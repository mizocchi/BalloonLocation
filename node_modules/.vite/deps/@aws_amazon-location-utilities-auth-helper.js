import {
  Client,
  Command,
  CredentialsProviderError,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  FetchHttpHandler,
  HttpRequest,
  HttpResponse,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  SignatureV4,
  _json,
  bowser_default,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  decorateServiceException,
  dist_es_exports,
  dist_es_exports2,
  expectNonNull,
  expectNumber,
  expectString,
  extendedEncodeURIComponent,
  fromBase64,
  fromUtf8,
  getContentLengthPlugin,
  getEndpointPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getUserAgentPrefix,
  getValueFromTextNode,
  init_dist_es,
  init_dist_es2,
  invalidProvider,
  loadConfigsForDefaultMode,
  memoize,
  normalizeProvider,
  parseEpochTimestamp,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  require_tslib,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  streamCollector,
  strictParseInt32,
  take,
  toBase64,
  toUtf8,
  withBaseException
} from "./chunk-2ACXYCCZ.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha256 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData();
    var constants_1 = require_constants();
    var util_utf8_browser_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.secret = secret;
        this.reset();
      }
      Sha2566.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function(operation) {
          operation.onerror = function() {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function() {
        });
      };
      Sha2566.prototype.digest = function() {
        return this.operation.then(function(operation) {
          return new Promise(function(resolve, reject) {
            operation.onerror = function() {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function() {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      Sha2566.prototype.reset = function() {
        if (this.secret) {
          this.operation = getKeyPromise(this.secret).then(function(keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function() {
          });
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var fromUtf85 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf85(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData2 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData2();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha256 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build();
    var constants_1 = require_constants();
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.toHash = new Uint8Array(0);
        this.secret = secret;
        this.reset();
      }
      Sha2566.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2566.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      Sha2566.prototype.reset = function() {
        var _this = this;
        this.toHash = new Uint8Array(0);
        if (this.secret && this.secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(_this.secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha256 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants2();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i3 = this.bufferLength; i3 < constants_1.BLOCK_SIZE; i3++) {
              bufferView.setUint8(i3, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i3 = this.bufferLength; i3 < constants_1.BLOCK_SIZE - 8; i3++) {
            bufferView.setUint8(i3, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i3 = 0; i3 < 8; i3++) {
          out[i3 * 4] = this.state[i3] >>> 24 & 255;
          out[i3 * 4 + 1] = this.state[i3] >>> 16 & 255;
          out[i3 * 4 + 2] = this.state[i3] >>> 8 & 255;
          out[i3 * 4 + 3] = this.state[i3] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i3 = 0; i3 < constants_1.BLOCK_SIZE; i3++) {
          if (i3 < 16) {
            this.temp[i3] = (buffer[i3 * 4] & 255) << 24 | (buffer[i3 * 4 + 1] & 255) << 16 | (buffer[i3 * 4 + 2] & 255) << 8 | buffer[i3 * 4 + 3] & 255;
          } else {
            var u2 = this.temp[i3 - 2];
            var t1_1 = (u2 >>> 17 | u2 << 15) ^ (u2 >>> 19 | u2 << 13) ^ u2 >>> 10;
            u2 = this.temp[i3 - 15];
            var t2_1 = (u2 >>> 7 | u2 << 25) ^ (u2 >>> 18 | u2 << 14) ^ u2 >>> 3;
            this.temp[i3] = (t1_1 + this.temp[i3 - 7] | 0) + (t2_1 + this.temp[i3 - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i3] + this.temp[i3] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha256 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib3();
    var constants_1 = require_constants2();
    var RawSha256_1 = require_RawSha256();
    var util_1 = require_build();
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.secret = secret;
        this.hash = new RawSha256_1.RawSha256();
        this.reset();
      }
      Sha2566.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e3) {
          this.error = e3;
        }
      };
      Sha2566.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2566.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          return tslib_1.__generator(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      Sha2566.prototype.reset = function() {
        this.hash = new RawSha256_1.RawSha256();
        if (this.secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(this.secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i3 = 0; i3 < constants_1.BLOCK_SIZE; i3++) {
            inner[i3] ^= 54;
            outer[i3] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i3 = 0; i3 < inner.byteLength; i3++) {
            inner[i3] = 0;
          }
        }
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib3();
    tslib_1.__exportStar(require_jsSha256(), exports);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js
var require_tslib4 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib4();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues = window2.crypto.getRandomValues;
        return typeof getRandomValues === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [2];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build3 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib4();
    tslib_1.__exportStar(require_supportsWebCrypto(), exports);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js
var require_tslib5 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build4 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib5();
    tslib_1.__exportStar(require_CryptoOperation(), exports);
    tslib_1.__exportStar(require_Key(), exports);
    tslib_1.__exportStar(require_KeyOperation(), exports);
    tslib_1.__exportStar(require_MsSubtleCrypto(), exports);
    tslib_1.__exportStar(require_MsWindow(), exports);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha256 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha256();
    var webCryptoSha256_1 = require_webCryptoSha256();
    var sha256_js_1 = require_build2();
    var supports_web_crypto_1 = require_build3();
    var ie11_detection_1 = require_build4();
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_1 = require_build();
    var Sha2565 = function() {
      function Sha2566(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha2566.prototype.update = function(data, encoding) {
        this.hash.update((0, util_1.convertToBuffer)(data));
      };
      Sha2566.prototype.digest = function() {
        return this.hash.digest();
      };
      Sha2566.prototype.reset = function() {
        this.hash.reset();
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build5 = __commonJS({
  "node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_crossPlatformSha256(), exports);
    var ie11Sha256_1 = require_ie11Sha256();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha256();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js
var require_tslib6 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha2562 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData3();
    var constants_1 = require_constants3();
    var util_utf8_browser_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.secret = secret;
        this.reset();
      }
      Sha2566.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function(operation) {
          operation.onerror = function() {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function() {
        });
      };
      Sha2566.prototype.digest = function() {
        return this.operation.then(function(operation) {
          return new Promise(function(resolve, reject) {
            operation.onerror = function() {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function() {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      Sha2566.prototype.reset = function() {
        if (this.secret) {
          this.operation = getKeyPromise(this.secret).then(function(keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function() {
          });
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var fromUtf85 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf85(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData4 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint82 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/index.js
var require_build6 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer2();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData4();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint82();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom2();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha2562 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build6();
    var constants_1 = require_constants3();
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.toHash = new Uint8Array(0);
        this.secret = secret;
        this.reset();
      }
      Sha2566.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2566.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      Sha2566.prototype.reset = function() {
        var _this = this;
        this.toHash = new Uint8Array(0);
        if (this.secret && this.secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(_this.secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js
var require_tslib7 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants4 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha2562 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants4();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i3 = this.bufferLength; i3 < constants_1.BLOCK_SIZE; i3++) {
              bufferView.setUint8(i3, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i3 = this.bufferLength; i3 < constants_1.BLOCK_SIZE - 8; i3++) {
            bufferView.setUint8(i3, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i3 = 0; i3 < 8; i3++) {
          out[i3 * 4] = this.state[i3] >>> 24 & 255;
          out[i3 * 4 + 1] = this.state[i3] >>> 16 & 255;
          out[i3 * 4 + 2] = this.state[i3] >>> 8 & 255;
          out[i3 * 4 + 3] = this.state[i3] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i3 = 0; i3 < constants_1.BLOCK_SIZE; i3++) {
          if (i3 < 16) {
            this.temp[i3] = (buffer[i3 * 4] & 255) << 24 | (buffer[i3 * 4 + 1] & 255) << 16 | (buffer[i3 * 4 + 2] & 255) << 8 | buffer[i3 * 4 + 3] & 255;
          } else {
            var u2 = this.temp[i3 - 2];
            var t1_1 = (u2 >>> 17 | u2 << 15) ^ (u2 >>> 19 | u2 << 13) ^ u2 >>> 10;
            u2 = this.temp[i3 - 15];
            var t2_1 = (u2 >>> 7 | u2 << 25) ^ (u2 >>> 18 | u2 << 14) ^ u2 >>> 3;
            this.temp[i3] = (t1_1 + this.temp[i3 - 7] | 0) + (t2_1 + this.temp[i3 - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i3] + this.temp[i3] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha2562 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib7();
    var constants_1 = require_constants4();
    var RawSha256_1 = require_RawSha2562();
    var util_1 = require_build6();
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.secret = secret;
        this.hash = new RawSha256_1.RawSha256();
        this.reset();
      }
      Sha2566.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e3) {
          this.error = e3;
        }
      };
      Sha2566.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2566.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          return tslib_1.__generator(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      Sha2566.prototype.reset = function() {
        this.hash = new RawSha256_1.RawSha256();
        if (this.secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(this.secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i3 = 0; i3 < constants_1.BLOCK_SIZE; i3++) {
            inner[i3] ^= 54;
            outer[i3] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i3 = 0; i3 < inner.byteLength; i3++) {
            inner[i3] = 0;
          }
        }
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/index.js
var require_build7 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib7();
    tslib_1.__exportStar(require_jsSha2562(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js
var require_tslib8 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib8();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues = window2.crypto.getRandomValues;
        return typeof getRandomValues === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [2];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build8 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib8();
    tslib_1.__exportStar(require_supportsWebCrypto2(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js
var require_tslib9 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js"(exports, module) {
    var __extends5;
    var __assign15;
    var __rest3;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter19;
    var __generator19;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread3;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p3 in b3)
          if (b3.hasOwnProperty(p3))
            d3[p3] = b3[p3];
      };
      __extends5 = function(d3, b3) {
        extendStatics3(d3, b3);
        function __() {
          this.constructor = d3;
        }
        d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign15 = Object.assign || function(t2) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3))
              t2[p3] = s3[p3];
        }
        return t2;
      };
      __rest3 = function(s3, e3) {
        var t2 = {};
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
            t2[p3] = s3[p3];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
            if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
              t2[p3[i3]] = s3[p3[i3]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r3 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d3 = decorators[i3])
              r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
        return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter19 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator19 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f3, y2, t2, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v2) {
            return step([n3, v2]);
          };
        }
        function step(op) {
          if (f3)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e3) {
              op = [6, e3];
              y2 = 0;
            } finally {
              f3 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      };
      __exportStar = function(m3, exports2) {
        for (var p3 in m3)
          if (p3 !== "default" && !exports2.hasOwnProperty(p3))
            exports2[p3] = m3[p3];
      };
      __values6 = function(o3) {
        var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
        if (m3)
          return m3.call(o3);
        if (o3 && typeof o3.length === "number")
          return {
            next: function() {
              if (o3 && i3 >= o3.length)
                o3 = void 0;
              return { value: o3 && o3[i3++], done: !o3 };
            }
          };
        throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o3, n3) {
        var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
        if (!m3)
          return o3;
        var i3 = m3.call(o3), r3, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
            ar.push(r3.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r3 && !r3.done && (m3 = i3["return"]))
              m3.call(i3);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread3 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read14(arguments[i3]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s3 += arguments[i3].length;
        for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
            r3[k3] = a3[j3];
        return r3;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n3) {
          if (g3[n3])
            i3[n3] = function(v2) {
              return new Promise(function(a3, b3) {
                q3.push([n3, v2, a3, b3]) > 1 || resume(n3, v2);
              });
            };
        }
        function resume(n3, v2) {
          try {
            step(g3[n3](v2));
          } catch (e3) {
            settle(q3[0][3], e3);
          }
        }
        function step(r3) {
          r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f3, v2) {
          if (f3(v2), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator = function(o3) {
        var i3, p3;
        return i3 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n3, f3) {
          i3[n3] = o3[n3] ? function(v2) {
            return (p3 = !p3) ? { value: __await2(o3[n3](v2)), done: n3 === "return" } : f3 ? f3(v2) : v2;
          } : f3;
        }
      };
      __asyncValues = function(o3) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o3[Symbol.asyncIterator], i3;
        return m3 ? m3.call(o3) : (o3 = typeof __values6 === "function" ? __values6(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n3) {
          i3[n3] = o3[n3] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o3[n3](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d3, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d3 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (Object.hasOwnProperty.call(mod, k3))
              result[k3] = mod[k3];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends5);
      exporter("__assign", __assign15);
      exporter("__rest", __rest3);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter19);
      exporter("__generator", __generator19);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread3);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build9 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_CryptoOperation2(), exports);
    tslib_1.__exportStar(require_Key2(), exports);
    tslib_1.__exportStar(require_KeyOperation2(), exports);
    tslib_1.__exportStar(require_MsSubtleCrypto2(), exports);
    tslib_1.__exportStar(require_MsWindow2(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha2562 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha2562();
    var webCryptoSha256_1 = require_webCryptoSha2562();
    var sha256_js_1 = require_build7();
    var supports_web_crypto_1 = require_build8();
    var ie11_detection_1 = require_build9();
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_1 = require_build6();
    var Sha2565 = function() {
      function Sha2566(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha2566.prototype.update = function(data, encoding) {
        this.hash.update((0, util_1.convertToBuffer)(data));
      };
      Sha2566.prototype.digest = function() {
        return this.hash.digest();
      };
      Sha2566.prototype.reset = function() {
        this.hash.reset();
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build10 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib6();
    tslib_1.__exportStar(require_crossPlatformSha2562(), exports);
    var ie11Sha256_1 = require_ie11Sha2562();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha2562();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v2) {
      return typeof v2 !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a3, arrayMode) {
      if (a3) {
        const keys = Object.keys(a3);
        const len = keys.length;
        for (let i3 = 0; i3 < len; i3++) {
          if (arrayMode === "strict") {
            target[keys[i3]] = [a3[keys[i3]]];
          } else {
            target[keys[i3]] = a3[keys[i3]];
          }
        }
      }
    };
    exports.getValue = function(v2) {
      if (exports.isExist(v2)) {
        return v2;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i3 = 0; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === "<" && xmlData[i3 + 1] === "?") {
          i3 += 2;
          i3 = readPI(xmlData, i3);
          if (i3.err)
            return i3;
        } else if (xmlData[i3] === "<") {
          let tagStartPos = i3;
          i3++;
          if (xmlData[i3] === "!") {
            i3 = readCommentAndCDATA(xmlData, i3);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i3] === "/") {
              closingTag = true;
              i3++;
            }
            let tagName = "";
            for (; i3 < xmlData.length && xmlData[i3] !== ">" && xmlData[i3] !== " " && xmlData[i3] !== "	" && xmlData[i3] !== "\n" && xmlData[i3] !== "\r"; i3++) {
              tagName += xmlData[i3];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i3--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i3));
            }
            const result = readAttributeStr(xmlData, i3);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i3));
            }
            let attrStr = result.value;
            i3 = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i3 - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i3));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i3 - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i3));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i3++; i3 < xmlData.length; i3++) {
              if (xmlData[i3] === "<") {
                if (xmlData[i3 + 1] === "!") {
                  i3++;
                  i3 = readCommentAndCDATA(xmlData, i3);
                  continue;
                } else if (xmlData[i3 + 1] === "?") {
                  i3 = readPI(xmlData, ++i3);
                  if (i3.err)
                    return i3;
                } else {
                  break;
                }
              } else if (xmlData[i3] === "&") {
                const afterAmp = validateAmpersand(xmlData, i3);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i3));
                i3 = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i3])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i3));
                }
              }
            }
            if (xmlData[i3] === "<") {
              i3--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i3])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i3] + "' is not expected.", getLineNumberForPosition(xmlData, i3));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t2) => t2.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i3) {
      const start = i3;
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] == "?" || xmlData[i3] == " ") {
          const tagname = xmlData.substr(start, i3 - start);
          if (i3 > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i3));
          } else if (xmlData[i3] == "?" && xmlData[i3 + 1] == ">") {
            i3++;
            break;
          } else {
            continue;
          }
        }
      }
      return i3;
    }
    function readCommentAndCDATA(xmlData, i3) {
      if (xmlData.length > i3 + 5 && xmlData[i3 + 1] === "-" && xmlData[i3 + 2] === "-") {
        for (i3 += 3; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "-" && xmlData[i3 + 1] === "-" && xmlData[i3 + 2] === ">") {
            i3 += 2;
            break;
          }
        }
      } else if (xmlData.length > i3 + 8 && xmlData[i3 + 1] === "D" && xmlData[i3 + 2] === "O" && xmlData[i3 + 3] === "C" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "Y" && xmlData[i3 + 6] === "P" && xmlData[i3 + 7] === "E") {
        let angleBracketsCount = 1;
        for (i3 += 8; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i3] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i3 + 9 && xmlData[i3 + 1] === "[" && xmlData[i3 + 2] === "C" && xmlData[i3 + 3] === "D" && xmlData[i3 + 4] === "A" && xmlData[i3 + 5] === "T" && xmlData[i3 + 6] === "A" && xmlData[i3 + 7] === "[") {
        for (i3 += 8; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "]" && xmlData[i3 + 1] === "]" && xmlData[i3 + 2] === ">") {
            i3 += 2;
            break;
          }
        }
      }
      return i3;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i3) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === doubleQuote || xmlData[i3] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i3];
          } else if (startChar !== xmlData[i3]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i3] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i3];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i3,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i3 = 0; i3 < matches.length; i3++) {
        if (matches[i3][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i3][2] + "' has no space in starting.", getPositionFromMatch(matches[i3]));
        } else if (matches[i3][3] !== void 0 && matches[i3][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i3][2] + "' is without value.", getPositionFromMatch(matches[i3]));
        } else if (matches[i3][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i3][2] + "' is not allowed.", getPositionFromMatch(matches[i3]));
        }
        const attrName = matches[i3][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i3]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i3]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i3) {
      let re = /\d/;
      if (xmlData[i3] === "x") {
        i3++;
        re = /[\da-fA-F]/;
      }
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === ";")
          return i3;
        if (!xmlData[i3].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i3) {
      i3++;
      if (xmlData[i3] === ";")
        return -1;
      if (xmlData[i3] === "#") {
        i3++;
        return validateNumberAmpersand(xmlData, i3);
      }
      let count = 0;
      for (; i3 < xmlData.length; i3++, count++) {
        if (xmlData[i3].match(/\w/) && count < 20)
          continue;
        if (xmlData[i3] === ";")
          break;
        return -1;
      }
      return i3;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      allowBooleanAttributes: false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module.exports = XmlNode;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module) {
    var util = require_util();
    function readDocType(xmlData, i3) {
      const entities = {};
      if (xmlData[i3 + 3] === "O" && xmlData[i3 + 4] === "C" && xmlData[i3 + 5] === "T" && xmlData[i3 + 6] === "Y" && xmlData[i3 + 7] === "P" && xmlData[i3 + 8] === "E") {
        i3 = i3 + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i3)) {
              i3 += 7;
              [entityName, val, i3] = readEntityExp(xmlData, i3 + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i3))
              i3 += 8;
            else if (hasBody && isAttlist(xmlData, i3))
              i3 += 8;
            else if (hasBody && isNotation(xmlData, i3))
              i3 += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i3] === ">") {
            if (comment) {
              if (xmlData[i3 - 1] === "-" && xmlData[i3 - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i3] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i3];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i: i3 };
    }
    function readEntityExp(xmlData, i3) {
      let entityName2 = "";
      for (; i3 < xmlData.length && (xmlData[i3] !== "'" && xmlData[i3] !== '"'); i3++) {
        entityName2 += xmlData[i3];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i3++];
      let val2 = "";
      for (; i3 < xmlData.length && xmlData[i3] !== startChar; i3++) {
        val2 += xmlData[i3];
      }
      return [entityName2, val2, i3];
    }
    function isComment(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "-" && xmlData[i3 + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "E" && xmlData[i3 + 3] === "N" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "I" && xmlData[i3 + 6] === "T" && xmlData[i3 + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "E" && xmlData[i3 + 3] === "L" && xmlData[i3 + 4] === "E" && xmlData[i3 + 5] === "M" && xmlData[i3 + 6] === "E" && xmlData[i3 + 7] === "N" && xmlData[i3 + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "A" && xmlData[i3 + 3] === "T" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "L" && xmlData[i3 + 6] === "I" && xmlData[i3 + 7] === "S" && xmlData[i3 + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "N" && xmlData[i3 + 3] === "O" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "A" && xmlData[i3 + 6] === "T" && xmlData[i3 + 7] === "I" && xmlData[i3 + 8] === "O" && xmlData[i3 + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module.exports = readDocType;
  }
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "node_modules/strnum/strnum.js"(exports, module) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module.exports = toNumber;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i3 = 0; i3 < entKeys.length; i3++) {
        const ent = entKeys[i3];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i3 = 0; i3 < len; i3++) {
          const attrName = this.resolveNameSpace(matches[i3][1]);
          let oldVal = matches[i3][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i3 = 0; i3 < xmlData.length; i3++) {
        const ch = xmlData[i3];
        if (ch === "<") {
          if (xmlData[i3 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i3, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i3 + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i3 = closeIndex;
          } else if (xmlData[i3 + 1] === "?") {
            let tagData = readTagExp(xmlData, i3, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i3 = tagData.closeIndex + 1;
          } else if (xmlData.substr(i3 + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i3 + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i3 + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i3 = endIndex;
          } else if (xmlData.substr(i3 + 1, 2) === "!D") {
            const result = readDocType(xmlData, i3);
            this.docTypeEntities = result.entities;
            i3 = result.i;
          } else if (xmlData.substr(i3 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i3, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i3 + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i3 = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i3, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i3 = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i3 = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i3 = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i3 = closeIndex;
            }
          }
        } else {
          textData += xmlData[i3];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i3, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i3; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i3, errMsg) {
      const closingIndex = xmlData.indexOf(str, i3);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i3, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i3 + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i3) {
      const startIndex = i3;
      let openTagCount = 1;
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === "<") {
          if (xmlData[i3 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i3, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i3 + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i3),
                  i: closeIndex
                };
              }
            }
            i3 = closeIndex;
          } else if (xmlData[i3 + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i3 + 1, "StopNode is not closed.");
            i3 = closeIndex;
          } else if (xmlData.substr(i3 + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i3 + 3, "StopNode is not closed.");
            i3 = closeIndex;
          } else if (xmlData.substr(i3 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i3, "StopNode is not closed.") - 2;
            i3 = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i3, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i3 = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module.exports = OrderedObjParser;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i3 = 0; i3 < arr.length; i3++) {
        const tagObj = arr[i3];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i3 = 0; i3 < keys.length; i3++) {
        const key = keys[i3];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i3 = 0; i3 < len; i3++) {
          const atrrName = keys[i3];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports.prettify = prettify;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser2 = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module.exports = XMLParser2;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i3 = 0; i3 < arr.length; i3++) {
        const tagObj = arr[i3];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i3 = 0; i3 < keys.length; i3++) {
        const key = keys[i3];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i3 = 0; i3 < options.entities.length; i3++) {
          const entity = options.entities[i3];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module.exports = toXml;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a3) {
        return a3;
      },
      attributeValueProcessor: function(attrName, a3) {
        return a3;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j3 = 0; j3 < arrLen; j3++) {
            const item = jObj[key][j3];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j3 = 0; j3 < L; j3++) {
              attrStr += this.buildAttrPairStr(Ks[j3], "" + jObj[key][Ks[j3]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i3 = 0; i3 < this.options.entities.length; i3++) {
          const entity = this.options.entities[i3];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module.exports = Builder;
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "node_modules/fast-xml-parser/src/fxp.js"(exports, module) {
    "use strict";
    var validator = require_validator();
    var XMLParser2 = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module.exports = {
      XMLParser: XMLParser2,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// node_modules/zen-observable/lib/Observable.js
var require_Observable = __commonJS({
  "node_modules/zen-observable/lib/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i3 = 0; i3 < props.length; i3++) {
        var descriptor = props[i3];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol2 = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol2(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol2("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable2;
    }
    function isObservable(x2) {
      return x2 instanceof Observable2;
    }
    function hostReportError(e3) {
      if (hostReportError.log) {
        hostReportError.log(e3);
      } else {
        setTimeout(function() {
          throw e3;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e3) {
          hostReportError(e3);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e3) {
        hostReportError(e3);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i3 = 0; i3 < queue.length; ++i3) {
        notifySubscription(subscription, queue[i3].type, queue[i3].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m3 = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m3)
              m3.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m3)
              m3.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m3)
              m3.call(observer);
            break;
        }
      } catch (e3) {
        hostReportError(e3);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e3) {
          subscriptionObserver.error(e3);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable2 = function() {
      function Observable3(subscriber) {
        _classCallCheck(this, Observable3);
        if (!(this instanceof Observable3))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass(Observable3, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            if (typeof fn !== "function") {
              reject(new TypeError(fn + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn(value, done);
                } catch (e3) {
                  reject(e3);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn(value);
                } catch (e3) {
                  return observer.error(e3);
                }
                observer.next(value);
              },
              error: function(e3) {
                observer.error(e3);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn(value))
                    return;
                } catch (e3) {
                  return observer.error(e3);
                }
                observer.next(value);
              },
              error: function(e3) {
                observer.error(e3);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C2(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e3) {
                    return observer.error(e3);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e3) {
                observer.error(e3);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v2) {
                  observer.next(v2);
                },
                error: function(e3) {
                  observer.error(e3);
                },
                complete: function() {
                  if (index === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C2.from(sources[index++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e3) {
                    return observer.error(e3);
                  }
                }
                var inner = C2.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e3) {
                    observer.error(e3);
                  },
                  complete: function() {
                    var i3 = subscriptions.indexOf(inner);
                    if (i3 >= 0)
                      subscriptions.splice(i3, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e3) {
                observer.error(e3);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s3) {
                return s3.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from(x2) {
          var C2 = typeof this === "function" ? this : Observable3;
          if (x2 == null)
            throw new TypeError(x2 + " is not an object");
          var method = getMethod(x2, SymbolObservable);
          if (method) {
            var observable = method.call(x2);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C2)
              return observable;
            return new C2(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol2("iterator")) {
            method = getMethod(x2, SymbolIterator);
            if (method) {
              return new C2(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x2)) {
            return new C2(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i3 = 0; i3 < x2.length; ++i3) {
                  observer.next(x2[i3]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x2 + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C2 = typeof this === "function" ? this : Observable3;
          return new C2(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i3 = 0; i3 < items.length; ++i3) {
                observer.next(items[i3]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable3;
    }();
    exports.Observable = Observable2;
    if (hasSymbols()) {
      Object.defineProperty(Observable2, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  }
});

// node_modules/zen-observable/index.js
var require_zen_observable = __commonJS({
  "node_modules/zen-observable/index.js"(exports, module) {
    module.exports = require_Observable().Observable;
  }
});

// node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants5 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha2563 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants5();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i3 = this.bufferLength; i3 < constants_1.BLOCK_SIZE; i3++) {
              bufferView.setUint8(i3, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i3 = this.bufferLength; i3 < constants_1.BLOCK_SIZE - 8; i3++) {
            bufferView.setUint8(i3, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i3 = 0; i3 < 8; i3++) {
          out[i3 * 4] = this.state[i3] >>> 24 & 255;
          out[i3 * 4 + 1] = this.state[i3] >>> 16 & 255;
          out[i3 * 4 + 2] = this.state[i3] >>> 8 & 255;
          out[i3 * 4 + 3] = this.state[i3] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i3 = 0; i3 < constants_1.BLOCK_SIZE; i3++) {
          if (i3 < 16) {
            this.temp[i3] = (buffer[i3 * 4] & 255) << 24 | (buffer[i3 * 4 + 1] & 255) << 16 | (buffer[i3 * 4 + 2] & 255) << 8 | buffer[i3 * 4 + 3] & 255;
          } else {
            var u2 = this.temp[i3 - 2];
            var t1_1 = (u2 >>> 17 | u2 << 15) ^ (u2 >>> 19 | u2 << 13) ^ u2 >>> 10;
            u2 = this.temp[i3 - 15];
            var t2_1 = (u2 >>> 7 | u2 << 25) ^ (u2 >>> 18 | u2 << 14) ^ u2 >>> 3;
            this.temp[i3] = (t1_1 + this.temp[i3 - 7] | 0) + (t2_1 + this.temp[i3 - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i3] + this.temp[i3] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer3 = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var fromUtf85 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf85(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData5 = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint83 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom3 = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build11 = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer3();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData5();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint83();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom3();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha2563 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib();
    var constants_1 = require_constants5();
    var RawSha256_1 = require_RawSha2563();
    var util_1 = require_build11();
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i3 = 0; i3 < constants_1.BLOCK_SIZE; i3++) {
            inner[i3] ^= 54;
            outer[i3] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i3 = 0; i3 < inner.byteLength; i3++) {
            inner[i3] = 0;
          }
        }
      }
      Sha2566.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e3) {
          this.error = e3;
        }
      };
      Sha2566.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2566.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
          return (0, tslib_1.__generator)(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-crypto/sha256-js/build/index.js
var require_build12 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    (0, tslib_1.__exportStar)(require_jsSha2563(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData6 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants6 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha2563 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData6();
    var constants_1 = require_constants6();
    var util_utf8_browser_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var Sha2565 = function() {
      function Sha2566(secret) {
        if (secret) {
          this.operation = getKeyPromise(secret).then(function(keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function() {
          });
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      }
      Sha2566.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function(operation) {
          operation.onerror = function() {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function() {
        });
      };
      Sha2566.prototype.digest = function() {
        return this.operation.then(function(operation) {
          return new Promise(function(resolve, reject) {
            operation.onerror = function() {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function() {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha2563 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build11();
    var constants_1 = require_constants6();
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var Sha2565 = function() {
      function Sha2566(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      }
      Sha2566.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2566.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto3 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues = window2.crypto.getRandomValues;
        return typeof getRandomValues === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [2];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build13 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_supportsWebCrypto3(), exports);
  }
});

// node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation3 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key3 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation3 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto3 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow3 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build14 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CryptoOperation3(), exports);
    tslib_1.__exportStar(require_Key3(), exports);
    tslib_1.__exportStar(require_KeyOperation3(), exports);
    tslib_1.__exportStar(require_MsSubtleCrypto3(), exports);
    tslib_1.__exportStar(require_MsWindow3(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha2563 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha2563();
    var webCryptoSha256_1 = require_webCryptoSha2563();
    var sha256_js_1 = require_build12();
    var supports_web_crypto_1 = require_build13();
    var ie11_detection_1 = require_build14();
    var util_locate_window_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var Sha2565 = function() {
      function Sha2566(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha2566.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
      };
      Sha2566.prototype.digest = function() {
        return this.hash.digest();
      };
      return Sha2566;
    }();
    exports.Sha256 = Sha2565;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build15 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib();
    (0, tslib_1.__exportStar)(require_crossPlatformSha2563(), exports);
    var ie11Sha256_1 = require_ie11Sha2563();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha2563();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/uuid/lib/rng-browser.js"(exports, module) {
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i3 = 0, r3; i3 < 16; i3++) {
          if ((i3 & 3) === 0)
            r3 = Math.random() * 4294967296;
          rnds[i3] = r3 >>> ((i3 & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
    var byteToHex = [];
    for (i3 = 0; i3 < 256; ++i3) {
      byteToHex[i3] = (i3 + 256).toString(16).substr(1);
    }
    var i3;
    function bytesToUuid(buf, offset) {
      var i4 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i4++]],
        bth[buf[i4++]],
        bth[buf[i4++]],
        bth[buf[i4++]],
        "-",
        bth[buf[i4++]],
        bth[buf[i4++]],
        "-",
        bth[buf[i4++]],
        bth[buf[i4++]],
        "-",
        bth[buf[i4++]],
        bth[buf[i4++]],
        "-",
        bth[buf[i4++]],
        bth[buf[i4++]],
        bth[buf[i4++]],
        bth[buf[i4++]],
        bth[buf[i4++]],
        bth[buf[i4++]]
      ].join("");
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/uuid/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/v1.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i3 = buf && offset || 0;
      var b3 = buf || [];
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          node = _nodeId = [
            seedBytes[0] | 1,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
          ];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
      var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b3[i3++] = tl >>> 24 & 255;
      b3[i3++] = tl >>> 16 & 255;
      b3[i3++] = tl >>> 8 & 255;
      b3[i3++] = tl & 255;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b3[i3++] = tmh >>> 8 & 255;
      b3[i3++] = tmh & 255;
      b3[i3++] = tmh >>> 24 & 15 | 16;
      b3[i3++] = tmh >>> 16 & 255;
      b3[i3++] = clockseq >>> 8 | 128;
      b3[i3++] = clockseq & 255;
      for (var n3 = 0; n3 < 6; ++n3) {
        b3[i3 + n3] = node[n3];
      }
      return buf ? buf : bytesToUuid(b3);
    }
    module.exports = v1;
  }
});

// node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/v4.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v42(options, buf, offset) {
      var i3 = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i3 + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v42;
  }
});

// node_modules/uuid/index.js
var require_uuid = __commonJS({
  "node_modules/uuid/index.js"(exports, module) {
    var v1 = require_v1();
    var v42 = require_v4();
    var uuid = v42;
    uuid.v1 = v1;
    uuid.v4 = v42;
    module.exports = uuid;
  }
});

// node_modules/unfetch/dist/unfetch.module.js
var unfetch_module_exports = {};
__export(unfetch_module_exports, {
  default: () => unfetch_module_default
});
function unfetch_module_default(e3, n3) {
  return n3 = n3 || {}, new Promise(function(t2, r3) {
    var s3 = new XMLHttpRequest(), o3 = [], u2 = [], i3 = {}, a3 = function() {
      return { ok: 2 == (s3.status / 100 | 0), statusText: s3.statusText, status: s3.status, url: s3.responseURL, text: function() {
        return Promise.resolve(s3.responseText);
      }, json: function() {
        return Promise.resolve(s3.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([s3.response]));
      }, clone: a3, headers: { keys: function() {
        return o3;
      }, entries: function() {
        return u2;
      }, get: function(e4) {
        return i3[e4.toLowerCase()];
      }, has: function(e4) {
        return e4.toLowerCase() in i3;
      } } };
    };
    for (var l3 in s3.open(n3.method || "get", e3, true), s3.onload = function() {
      s3.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e4, n4, t3) {
        o3.push(n4 = n4.toLowerCase()), u2.push([n4, t3]), i3[n4] = i3[n4] ? i3[n4] + "," + t3 : t3;
      }), t2(a3());
    }, s3.onerror = r3, s3.withCredentials = "include" == n3.credentials, n3.headers)
      s3.setRequestHeader(l3, n3.headers[l3]);
    s3.send(n3.body || null);
  });
}
var init_unfetch_module = __esm({
  "node_modules/unfetch/dist/unfetch.module.js"() {
  }
});

// node_modules/isomorphic-unfetch/browser.js
var require_browser = __commonJS({
  "node_modules/isomorphic-unfetch/browser.js"(exports, module) {
    module.exports = self.fetch || (self.fetch = (init_unfetch_module(), __toCommonJS(unfetch_module_exports)).default || (init_unfetch_module(), __toCommonJS(unfetch_module_exports)));
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse3;
    exports.serialize = serialize2;
    var decode = decodeURIComponent;
    var encode = encodeURIComponent;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options || {};
      var pairs = str.split(";");
      var dec = opt.decode || decode;
      for (var i3 = 0; i3 < pairs.length; i3++) {
        var pair = pairs[i3];
        var index = pair.indexOf("=");
        if (index < 0) {
          continue;
        }
        var key = pair.substring(0, index).trim();
        if (void 0 == obj[key]) {
          var val2 = pair.substring(index + 1, pair.length).trim();
          if (val2[0] === '"') {
            val2 = val2.slice(1, -1);
          }
          obj[key] = tryDecode(val2, dec);
        }
      }
      return obj;
    }
    function serialize2(name, val2, options) {
      var opt = options || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val2);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e3) {
        return str;
      }
    }
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = (options) => (next) => async (args) => {
  if (!HttpRequest.isInstance(args.request))
    return next(args);
  const { request } = args;
  const { handlerProtocol = "" } = options.requestHandler.metadata || {};
  if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
    delete request.headers["host"];
    request.headers[":authority"] = "";
  } else if (!request.headers["host"]) {
    let host = request.hostname;
    if (request.port != null)
      host += `:${request.port}`;
    request.headers["host"] = host;
  }
  return next(args);
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware = () => (next, context) => async (args) => {
  var _a, _b;
  try {
    const response = await next(args);
    const { clientName, commandName, logger: logger12, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
    const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog != null ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
    const { $metadata, ...outputWithoutMetadata } = response.output;
    (_a = logger12 == null ? void 0 : logger12.info) == null ? void 0 : _a.call(logger12, {
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      output: outputFilterSensitiveLog(outputWithoutMetadata),
      metadata: $metadata
    });
    return response;
  } catch (error) {
    const { clientName, commandName, logger: logger12, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
    (_b = logger12 == null ? void 0 : logger12.error) == null ? void 0 : _b.call(logger12, {
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      error,
      metadata: error.$metadata
    });
    throw error;
  }
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthConfiguration.js
var CREDENTIAL_EXPIRE_WINDOW = 3e5;
var resolveAwsAuthConfig = (input) => {
  const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
  const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
  let signer;
  if (input.signer) {
    signer = normalizeProvider(input.signer);
  } else if (input.regionInfoProvider) {
    signer = () => normalizeProvider(input.region)().then(async (region) => [
      await input.regionInfoProvider(region, {
        useFipsEndpoint: await input.useFipsEndpoint(),
        useDualstackEndpoint: await input.useDualstackEndpoint()
      }) || {},
      region
    ]).then(([regionInfo, region]) => {
      const { signingRegion, signingService } = regionInfo;
      input.signingRegion = input.signingRegion || signingRegion || region;
      input.signingName = input.signingName || signingService || input.serviceId;
      const params = {
        ...input,
        credentials: normalizedCreds,
        region: input.signingRegion,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = input.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    });
  } else {
    signer = async (authScheme) => {
      authScheme = Object.assign({}, {
        name: "sigv4",
        signingName: input.signingName || input.defaultSigningName,
        signingRegion: await normalizeProvider(input.region)(),
        properties: {}
      }, authScheme);
      const signingRegion = authScheme.signingRegion;
      const signingService = authScheme.signingName;
      input.signingRegion = input.signingRegion || signingRegion;
      input.signingName = input.signingName || signingService || input.serviceId;
      const params = {
        ...input,
        credentials: normalizedCreds,
        region: input.signingRegion,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = input.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    };
  }
  return {
    ...input,
    systemClockOffset,
    signingEscapePath,
    credentials: normalizedCreds,
    signer
  };
};
var normalizeCredentialProvider = (credentials) => {
  if (typeof credentials === "function") {
    return memoize(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
  }
  return normalizeProvider(credentials);
};

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js
var isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
  const clockTimeInMs = Date.parse(clockTime);
  if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
    return clockTimeInMs - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthMiddleware.js
var awsAuthMiddleware = (options) => (next, context) => async function(args) {
  var _a, _b, _c, _d;
  if (!HttpRequest.isInstance(args.request))
    return next(args);
  const authScheme = (_c = (_b = (_a = context.endpointV2) == null ? void 0 : _a.properties) == null ? void 0 : _b.authSchemes) == null ? void 0 : _c[0];
  const multiRegionOverride = (authScheme == null ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme == null ? void 0 : authScheme.signingRegionSet) == null ? void 0 : _d.join(",") : void 0;
  const signer = await options.signer(authScheme);
  const output = await next({
    ...args,
    request: await signer.sign(args.request, {
      signingDate: getSkewCorrectedDate(options.systemClockOffset),
      signingRegion: multiRegionOverride || context["signing_region"],
      signingService: context["signing_service"]
    })
  }).catch((error) => {
    var _a2;
    const serverTime = (_a2 = error.ServerTime) != null ? _a2 : getDateHeader(error.$response);
    if (serverTime) {
      options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);
    }
    throw error;
  });
  const dateHeader = getDateHeader(output.response);
  if (dateHeader) {
    options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);
  }
  return output;
};
var getDateHeader = (response) => {
  var _a, _b, _c;
  return HttpResponse.isInstance(response) ? (_c = (_a = response.headers) == null ? void 0 : _a.date) != null ? _c : (_b = response.headers) == null ? void 0 : _b.Date : void 0;
};
var awsAuthMiddlewareOptions = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
function resolveUserAgentConfig(input) {
  return {
    ...input,
    customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
  };
}

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_NAME_SEPARATOR = "/";
var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
var UA_ESCAPE_CHAR = "-";

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware = (options) => (next, context) => async (args) => {
  var _a, _b;
  const { request } = args;
  if (!HttpRequest.isInstance(request))
    return next(args);
  const { headers } = request;
  const userAgent = ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent)) || [];
  const defaultUserAgent4 = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
  const customUserAgent = ((_b = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _b.map(escapeUserAgent)) || [];
  const prefix = getUserAgentPrefix();
  const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent4, ...userAgent, ...customUserAgent]).join(SPACE);
  const normalUAValue = [
    ...defaultUserAgent4.filter((section) => section.startsWith("aws-sdk-")),
    ...customUserAgent
  ].join(SPACE);
  if (options.runtime !== "browser") {
    if (normalUAValue) {
      headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
    }
    headers[USER_AGENT] = sdkUserAgentValue;
  } else {
    headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
  }
  return next({
    ...args,
    request
  });
};
var escapeUserAgent = (userAgentPair) => {
  var _a;
  const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
  const version2 = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
  const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
  const prefix = name.substring(0, prefixSeparatorIndex);
  let uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
    switch (index) {
      case 0:
        return item;
      case 1:
        return `${acc}/${item}`;
      default:
        return `${acc}#${item}`;
    }
  }, "");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = (config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  var _a, _b;
  return {
    ...options,
    useDualstackEndpoint: (_a = options.useDualstackEndpoint) != null ? _a : false,
    useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
    defaultSigningName: "cognito-identity"
  };
};

// node_modules/@aws-sdk/client-cognito-identity/package.json
var package_default = {
  name: "@aws-sdk/client-cognito-identity",
  description: "AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native",
  version: "3.363.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "tsc -p tsconfig.cjs.json",
    "build:docs": "typedoc",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo cognito-identity",
    "test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "3.0.0",
    "@aws-crypto/sha256-js": "3.0.0",
    "@aws-sdk/client-sts": "3.363.0",
    "@aws-sdk/credential-provider-node": "3.363.0",
    "@aws-sdk/middleware-host-header": "3.363.0",
    "@aws-sdk/middleware-logger": "3.363.0",
    "@aws-sdk/middleware-recursion-detection": "3.363.0",
    "@aws-sdk/middleware-signing": "3.363.0",
    "@aws-sdk/middleware-user-agent": "3.363.0",
    "@aws-sdk/types": "3.357.0",
    "@aws-sdk/util-endpoints": "3.357.0",
    "@aws-sdk/util-user-agent-browser": "3.363.0",
    "@aws-sdk/util-user-agent-node": "3.363.0",
    "@smithy/config-resolver": "^1.0.1",
    "@smithy/fetch-http-handler": "^1.0.1",
    "@smithy/hash-node": "^1.0.1",
    "@smithy/invalid-dependency": "^1.0.1",
    "@smithy/middleware-content-length": "^1.0.1",
    "@smithy/middleware-endpoint": "^1.0.1",
    "@smithy/middleware-retry": "^1.0.2",
    "@smithy/middleware-serde": "^1.0.1",
    "@smithy/middleware-stack": "^1.0.1",
    "@smithy/node-config-provider": "^1.0.1",
    "@smithy/node-http-handler": "^1.0.2",
    "@smithy/protocol-http": "^1.0.1",
    "@smithy/smithy-client": "^1.0.3",
    "@smithy/types": "^1.0.0",
    "@smithy/url-parser": "^1.0.1",
    "@smithy/util-base64": "^1.0.1",
    "@smithy/util-body-length-browser": "^1.0.1",
    "@smithy/util-body-length-node": "^1.0.1",
    "@smithy/util-defaults-mode-browser": "^1.0.1",
    "@smithy/util-defaults-mode-node": "^1.0.1",
    "@smithy/util-retry": "^1.0.2",
    "@smithy/util-utf8": "^1.0.1",
    tslib: "^2.5.0"
  },
  devDependencies: {
    "@aws-sdk/client-iam": "3.363.0",
    "@aws-sdk/service-client-documentation-generator": "3.310.0",
    "@smithy/service-client-documentation-generator": "^1.0.1",
    "@tsconfig/node14": "1.0.3",
    "@types/chai": "^4.2.11",
    "@types/mocha": "^8.0.4",
    "@types/node": "^14.14.31",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typedoc: "0.23.23",
    typescript: "~4.9.5"
  },
  engines: {
    node: ">=14.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cognito-identity"
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build5());

// node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var defaultUserAgent = ({ serviceId, clientVersion }) => async () => {
  var _a, _b, _c, _d, _e, _f, _g;
  const parsedUA = typeof window !== "undefined" && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
  const sections = [
    ["aws-sdk-js", clientVersion],
    ["ua", "2.0"],
    [`os/${((_b = parsedUA == null ? void 0 : parsedUA.os) == null ? void 0 : _b.name) || "other"}`, (_c = parsedUA == null ? void 0 : parsedUA.os) == null ? void 0 : _c.version],
    ["lang/js"],
    ["md/browser", `${(_e = (_d = parsedUA == null ? void 0 : parsedUA.browser) == null ? void 0 : _d.name) != null ? _e : "unknown"}_${(_g = (_f = parsedUA == null ? void 0 : parsedUA.browser) == null ? void 0 : _f.version) != null ? _g : "unknown"}`]
  ];
  if (serviceId) {
    sections.push([`api/${serviceId}`, clientVersion]);
  }
  return sections;
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/ruleset.js
var p = "required";
var q = "fn";
var r = "argv";
var s = "ref";
var a = "PartitionResult";
var b = "tree";
var c = "error";
var d = "endpoint";
var e = { [p]: false, "type": "String" };
var f = { [p]: true, "default": false, "type": "Boolean" };
var g = { [s]: "Endpoint" };
var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
var j = {};
var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
var m = [g];
var n = [h];
var o = [i];
var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://cognito-identity-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://cognito-identity-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://cognito-identity.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://cognito-identity.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  });
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  return {
    apiVersion: "2014-06-30",
    base64Decoder: (_a = config == null ? void 0 : config.base64Decoder) != null ? _a : fromBase64,
    base64Encoder: (_b = config == null ? void 0 : config.base64Encoder) != null ? _b : toBase64,
    disableHostPrefix: (_c = config == null ? void 0 : config.disableHostPrefix) != null ? _c : false,
    endpointProvider: (_d = config == null ? void 0 : config.endpointProvider) != null ? _d : defaultEndpointResolver,
    logger: (_e = config == null ? void 0 : config.logger) != null ? _e : new NoOpLogger(),
    serviceId: (_f = config == null ? void 0 : config.serviceId) != null ? _f : "Cognito Identity",
    urlParser: (_g = config == null ? void 0 : config.urlParser) != null ? _g : parseUrl,
    utf8Decoder: (_h = config == null ? void 0 : config.utf8Decoder) != null ? _h : fromUtf8,
    utf8Encoder: (_i = config == null ? void 0 : config.utf8Encoder) != null ? _i : toUtf8
  };
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (_a = config == null ? void 0 : config.bodyLengthChecker) != null ? _a : calculateBodyLength,
    credentialDefaultProvider: (_b = config == null ? void 0 : config.credentialDefaultProvider) != null ? _b : (_) => () => Promise.reject(new Error("Credential is missing")),
    defaultUserAgentProvider: (_c = config == null ? void 0 : config.defaultUserAgentProvider) != null ? _c : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (_d = config == null ? void 0 : config.maxAttempts) != null ? _d : DEFAULT_MAX_ATTEMPTS,
    region: (_e = config == null ? void 0 : config.region) != null ? _e : invalidProvider("Region is missing"),
    requestHandler: (_f = config == null ? void 0 : config.requestHandler) != null ? _f : new FetchHttpHandler(defaultConfigProvider),
    retryMode: (_g = config == null ? void 0 : config.retryMode) != null ? _g : async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,
    sha256: (_h = config == null ? void 0 : config.sha256) != null ? _h : import_sha256_browser.Sha256,
    streamCollector: (_i = config == null ? void 0 : config.streamCollector) != null ? _i : streamCollector,
    useDualstackEndpoint: (_j = config == null ? void 0 : config.useDualstackEndpoint) != null ? _j : () => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT),
    useFipsEndpoint: (_k = config == null ? void 0 : config.useFipsEndpoint) != null ? _k : () => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT)
  };
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js
var CognitoIdentityClient = class extends Client {
  constructor(configuration) {
    const _config_0 = getRuntimeConfig2(configuration);
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveRegionConfig(_config_1);
    const _config_3 = resolveEndpointConfig(_config_2);
    const _config_4 = resolveRetryConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveAwsAuthConfig(_config_5);
    const _config_7 = resolveUserAgentConfig(_config_6);
    super(_config_7);
    this.config = _config_7;
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getUserAgentPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js
var CognitoIdentityServiceException = class extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, CognitoIdentityServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js
var InternalErrorException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "InternalErrorException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalErrorException";
    this.$fault = "server";
    Object.setPrototypeOf(this, InternalErrorException.prototype);
  }
};
var InvalidParameterException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "InvalidParameterException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidParameterException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidParameterException.prototype);
  }
};
var LimitExceededException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, LimitExceededException.prototype);
  }
};
var NotAuthorizedException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "NotAuthorizedException",
      $fault: "client",
      ...opts
    });
    this.name = "NotAuthorizedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, NotAuthorizedException.prototype);
  }
};
var ResourceConflictException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "ResourceConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, ResourceConflictException.prototype);
  }
};
var TooManyRequestsException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRequestsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, TooManyRequestsException.prototype);
  }
};
var ResourceNotFoundException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
  }
};
var ExternalServiceException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "ExternalServiceException",
      $fault: "client",
      ...opts
    });
    this.name = "ExternalServiceException";
    this.$fault = "client";
    Object.setPrototypeOf(this, ExternalServiceException.prototype);
  }
};
var InvalidIdentityPoolConfigurationException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "InvalidIdentityPoolConfigurationException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidIdentityPoolConfigurationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidIdentityPoolConfigurationException.prototype);
  }
};
var DeveloperUserAlreadyRegisteredException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "DeveloperUserAlreadyRegisteredException",
      $fault: "client",
      ...opts
    });
    this.name = "DeveloperUserAlreadyRegisteredException";
    this.$fault = "client";
    Object.setPrototypeOf(this, DeveloperUserAlreadyRegisteredException.prototype);
  }
};
var ConcurrentModificationException = class extends CognitoIdentityServiceException {
  constructor(opts) {
    super({
      name: "ConcurrentModificationException",
      $fault: "client",
      ...opts
    });
    this.name = "ConcurrentModificationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js
var se_CreateIdentityPoolCommand = async (input, context) => {
  const headers = sharedHeaders("CreateIdentityPool");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteIdentitiesCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteIdentities");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteIdentityPoolCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteIdentityPool");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIdentityCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeIdentity");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIdentityPoolCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeIdentityPool");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetCredentialsForIdentityCommand = async (input, context) => {
  const headers = sharedHeaders("GetCredentialsForIdentity");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIdCommand = async (input, context) => {
  const headers = sharedHeaders("GetId");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIdentityPoolRolesCommand = async (input, context) => {
  const headers = sharedHeaders("GetIdentityPoolRoles");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetOpenIdTokenCommand = async (input, context) => {
  const headers = sharedHeaders("GetOpenIdToken");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetOpenIdTokenForDeveloperIdentityCommand = async (input, context) => {
  const headers = sharedHeaders("GetOpenIdTokenForDeveloperIdentity");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetPrincipalTagAttributeMapCommand = async (input, context) => {
  const headers = sharedHeaders("GetPrincipalTagAttributeMap");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListIdentitiesCommand = async (input, context) => {
  const headers = sharedHeaders("ListIdentities");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListIdentityPoolsCommand = async (input, context) => {
  const headers = sharedHeaders("ListIdentityPools");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListTagsForResourceCommand = async (input, context) => {
  const headers = sharedHeaders("ListTagsForResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_LookupDeveloperIdentityCommand = async (input, context) => {
  const headers = sharedHeaders("LookupDeveloperIdentity");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_MergeDeveloperIdentitiesCommand = async (input, context) => {
  const headers = sharedHeaders("MergeDeveloperIdentities");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SetIdentityPoolRolesCommand = async (input, context) => {
  const headers = sharedHeaders("SetIdentityPoolRoles");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SetPrincipalTagAttributeMapCommand = async (input, context) => {
  const headers = sharedHeaders("SetPrincipalTagAttributeMap");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagResourceCommand = async (input, context) => {
  const headers = sharedHeaders("TagResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UnlinkDeveloperIdentityCommand = async (input, context) => {
  const headers = sharedHeaders("UnlinkDeveloperIdentity");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UnlinkIdentityCommand = async (input, context) => {
  const headers = sharedHeaders("UnlinkIdentity");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagResourceCommand = async (input, context) => {
  const headers = sharedHeaders("UntagResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateIdentityPoolCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateIdentityPool");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var de_CreateIdentityPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CreateIdentityPoolCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateIdentityPoolCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.cognitoidentity#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_DeleteIdentitiesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_DeleteIdentitiesCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteIdentitiesCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_DeleteIdentityPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_DeleteIdentityPoolCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteIdentityPoolCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_DescribeIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_DescribeIdentityCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_IdentityDescription(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_DescribeIdentityPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_DescribeIdentityPoolCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIdentityPoolCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_GetCredentialsForIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetCredentialsForIdentityCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GetCredentialsForIdentityResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetCredentialsForIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ExternalServiceException":
    case "com.amazonaws.cognitoidentity#ExternalServiceException":
      throw await de_ExternalServiceExceptionRes(parsedOutput, context);
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidIdentityPoolConfigurationException":
    case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
      throw await de_InvalidIdentityPoolConfigurationExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_GetIdCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetIdCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIdCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ExternalServiceException":
    case "com.amazonaws.cognitoidentity#ExternalServiceException":
      throw await de_ExternalServiceExceptionRes(parsedOutput, context);
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.cognitoidentity#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_GetIdentityPoolRolesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetIdentityPoolRolesCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIdentityPoolRolesCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_GetOpenIdTokenCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetOpenIdTokenCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetOpenIdTokenCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ExternalServiceException":
    case "com.amazonaws.cognitoidentity#ExternalServiceException":
      throw await de_ExternalServiceExceptionRes(parsedOutput, context);
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_GetOpenIdTokenForDeveloperIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetOpenIdTokenForDeveloperIdentityCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetOpenIdTokenForDeveloperIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeveloperUserAlreadyRegisteredException":
    case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
      throw await de_DeveloperUserAlreadyRegisteredExceptionRes(parsedOutput, context);
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_GetPrincipalTagAttributeMapCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetPrincipalTagAttributeMapCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetPrincipalTagAttributeMapCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_ListIdentitiesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_ListIdentitiesCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_ListIdentitiesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListIdentitiesCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_ListIdentityPoolsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_ListIdentityPoolsCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListIdentityPoolsCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_ListTagsForResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_ListTagsForResourceCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListTagsForResourceCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_LookupDeveloperIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_LookupDeveloperIdentityCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_LookupDeveloperIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_MergeDeveloperIdentitiesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_MergeDeveloperIdentitiesCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_MergeDeveloperIdentitiesCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_SetIdentityPoolRolesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_SetIdentityPoolRolesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_SetIdentityPoolRolesCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConcurrentModificationException":
    case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
      throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_SetPrincipalTagAttributeMapCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_SetPrincipalTagAttributeMapCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_SetPrincipalTagAttributeMapCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_TagResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_TagResourceCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_TagResourceCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_UnlinkDeveloperIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_UnlinkDeveloperIdentityCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UnlinkDeveloperIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_UnlinkIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_UnlinkIdentityCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UnlinkIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ExternalServiceException":
    case "com.amazonaws.cognitoidentity#ExternalServiceException":
      throw await de_ExternalServiceExceptionRes(parsedOutput, context);
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_UntagResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_UntagResourceCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UntagResourceCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_UpdateIdentityPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_UpdateIdentityPoolCommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateIdentityPoolCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConcurrentModificationException":
    case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
      throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
    case "InternalErrorException":
    case "com.amazonaws.cognitoidentity#InternalErrorException":
      throw await de_InternalErrorExceptionRes(parsedOutput, context);
    case "InvalidParameterException":
    case "com.amazonaws.cognitoidentity#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.cognitoidentity#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.cognitoidentity#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceConflictException":
    case "com.amazonaws.cognitoidentity#ResourceConflictException":
      throw await de_ResourceConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.cognitoidentity#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new ConcurrentModificationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_DeveloperUserAlreadyRegisteredExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new DeveloperUserAlreadyRegisteredException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ExternalServiceExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new ExternalServiceException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InternalErrorExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InternalErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidIdentityPoolConfigurationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidIdentityPoolConfigurationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidParameterException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new NotAuthorizedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new ResourceConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_Credentials = (output, context) => {
  return take(output, {
    AccessKeyId: expectString,
    Expiration: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    SecretKey: expectString,
    SessionToken: expectString
  });
};
var de_GetCredentialsForIdentityResponse = (output, context) => {
  return take(output, {
    Credentials: (_) => de_Credentials(_, context),
    IdentityId: expectString
  });
};
var de_IdentitiesList = (output, context) => {
  const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
    return de_IdentityDescription(entry, context);
  });
  return retVal;
};
var de_IdentityDescription = (output, context) => {
  return take(output, {
    CreationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    IdentityId: expectString,
    LastModifiedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    Logins: _json
  });
};
var de_ListIdentitiesResponse = (output, context) => {
  return take(output, {
    Identities: (_) => de_IdentitiesList(_, context),
    IdentityPoolId: expectString,
    NextToken: expectString
  });
};
var deserializeMetadata = (output) => {
  var _a, _b;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_b = (_a = output.headers["x-amzn-requestid"]) != null ? _a : output.headers["x-amzn-request-id"]) != null ? _b : output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
var throwDefaultError = withBaseException(CognitoIdentityServiceException);
var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new HttpRequest(contents);
};
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `AWSCognitoIdentityService.${operation}`
  };
}
var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
});
var parseErrorBody = async (errorBody, context) => {
  var _a;
  const value = await parseBody(errorBody, context);
  value.message = (_a = value.message) != null ? _a : value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find((k3) => k3.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = (rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/CreateIdentityPoolCommand.js
var CreateIdentityPoolCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, CreateIdentityPoolCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "CreateIdentityPoolCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_CreateIdentityPoolCommand(input, context);
  }
  deserialize(output, context) {
    return de_CreateIdentityPoolCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentitiesCommand.js
var DeleteIdentitiesCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, DeleteIdentitiesCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "DeleteIdentitiesCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_DeleteIdentitiesCommand(input, context);
  }
  deserialize(output, context) {
    return de_DeleteIdentitiesCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentityPoolCommand.js
var DeleteIdentityPoolCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, DeleteIdentityPoolCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "DeleteIdentityPoolCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_DeleteIdentityPoolCommand(input, context);
  }
  deserialize(output, context) {
    return de_DeleteIdentityPoolCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityCommand.js
var DescribeIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, DescribeIdentityCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "DescribeIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_DescribeIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_DescribeIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityPoolCommand.js
var DescribeIdentityPoolCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, DescribeIdentityPoolCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "DescribeIdentityPoolCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_DescribeIdentityPoolCommand(input, context);
  }
  deserialize(output, context) {
    return de_DescribeIdentityPoolCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js
var GetCredentialsForIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetCredentialsForIdentityCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "GetCredentialsForIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetCredentialsForIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetCredentialsForIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js
var GetIdCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetIdCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "GetIdCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetIdCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetIdCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdentityPoolRolesCommand.js
var GetIdentityPoolRolesCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetIdentityPoolRolesCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "GetIdentityPoolRolesCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetIdentityPoolRolesCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetIdentityPoolRolesCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenCommand.js
var GetOpenIdTokenCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetOpenIdTokenCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "GetOpenIdTokenCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetOpenIdTokenCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetOpenIdTokenCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js
var GetOpenIdTokenForDeveloperIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetOpenIdTokenForDeveloperIdentityCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "GetOpenIdTokenForDeveloperIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetOpenIdTokenForDeveloperIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetOpenIdTokenForDeveloperIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetPrincipalTagAttributeMapCommand.js
var GetPrincipalTagAttributeMapCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetPrincipalTagAttributeMapCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "GetPrincipalTagAttributeMapCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetPrincipalTagAttributeMapCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetPrincipalTagAttributeMapCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentitiesCommand.js
var ListIdentitiesCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, ListIdentitiesCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "ListIdentitiesCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_ListIdentitiesCommand(input, context);
  }
  deserialize(output, context) {
    return de_ListIdentitiesCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js
var ListIdentityPoolsCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, ListIdentityPoolsCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "ListIdentityPoolsCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_ListIdentityPoolsCommand(input, context);
  }
  deserialize(output, context) {
    return de_ListIdentityPoolsCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "ListTagsForResourceCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_ListTagsForResourceCommand(input, context);
  }
  deserialize(output, context) {
    return de_ListTagsForResourceCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/LookupDeveloperIdentityCommand.js
var LookupDeveloperIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, LookupDeveloperIdentityCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "LookupDeveloperIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_LookupDeveloperIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_LookupDeveloperIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/MergeDeveloperIdentitiesCommand.js
var MergeDeveloperIdentitiesCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, MergeDeveloperIdentitiesCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "MergeDeveloperIdentitiesCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_MergeDeveloperIdentitiesCommand(input, context);
  }
  deserialize(output, context) {
    return de_MergeDeveloperIdentitiesCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetIdentityPoolRolesCommand.js
var SetIdentityPoolRolesCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, SetIdentityPoolRolesCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "SetIdentityPoolRolesCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_SetIdentityPoolRolesCommand(input, context);
  }
  deserialize(output, context) {
    return de_SetIdentityPoolRolesCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetPrincipalTagAttributeMapCommand.js
var SetPrincipalTagAttributeMapCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, SetPrincipalTagAttributeMapCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "SetPrincipalTagAttributeMapCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_SetPrincipalTagAttributeMapCommand(input, context);
  }
  deserialize(output, context) {
    return de_SetPrincipalTagAttributeMapCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/TagResourceCommand.js
var TagResourceCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, TagResourceCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "TagResourceCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_TagResourceCommand(input, context);
  }
  deserialize(output, context) {
    return de_TagResourceCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkDeveloperIdentityCommand.js
var UnlinkDeveloperIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, UnlinkDeveloperIdentityCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "UnlinkDeveloperIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_UnlinkDeveloperIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_UnlinkDeveloperIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkIdentityCommand.js
var UnlinkIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, UnlinkIdentityCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "UnlinkIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_UnlinkIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_UnlinkIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, UntagResourceCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "UntagResourceCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_UntagResourceCommand(input, context);
  }
  deserialize(output, context) {
    return de_UntagResourceCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UpdateIdentityPoolCommand.js
var UpdateIdentityPoolCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, UpdateIdentityPoolCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "CognitoIdentityClient";
    const commandName = "UpdateIdentityPoolCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_UpdateIdentityPoolCommand(input, context);
  }
  deserialize(output, context) {
    return de_UpdateIdentityPoolCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentity.js
var commands = {
  CreateIdentityPoolCommand,
  DeleteIdentitiesCommand,
  DeleteIdentityPoolCommand,
  DescribeIdentityCommand,
  DescribeIdentityPoolCommand,
  GetCredentialsForIdentityCommand,
  GetIdCommand,
  GetIdentityPoolRolesCommand,
  GetOpenIdTokenCommand,
  GetOpenIdTokenForDeveloperIdentityCommand,
  GetPrincipalTagAttributeMapCommand,
  ListIdentitiesCommand,
  ListIdentityPoolsCommand,
  ListTagsForResourceCommand,
  LookupDeveloperIdentityCommand,
  MergeDeveloperIdentitiesCommand,
  SetIdentityPoolRolesCommand,
  SetPrincipalTagAttributeMapCommand,
  TagResourceCommand,
  UnlinkDeveloperIdentityCommand,
  UnlinkIdentityCommand,
  UntagResourceCommand,
  UpdateIdentityPoolCommand
};
var CognitoIdentity = class extends CognitoIdentityClient {
};
createAggregatedClient(commands, CognitoIdentity);

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js
function resolveLogins(logins) {
  return Promise.all(Object.keys(logins).reduce((arr, name) => {
    const tokenOrProvider = logins[name];
    if (typeof tokenOrProvider === "string") {
      arr.push([name, tokenOrProvider]);
    } else {
      arr.push(tokenOrProvider().then((token) => [name, token]));
    }
    return arr;
  }, [])).then((resolvedPairs) => resolvedPairs.reduce((logins2, [key, value]) => {
    logins2[key] = value;
    return logins2;
  }, {}));
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js
function fromCognitoIdentity(parameters) {
  return async () => {
    const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(), Expiration, SecretKey = throwOnMissingSecretKey(), SessionToken } = throwOnMissingCredentials() } = await parameters.client.send(new GetCredentialsForIdentityCommand({
      CustomRoleArn: parameters.customRoleArn,
      IdentityId: parameters.identityId,
      Logins: parameters.logins ? await resolveLogins(parameters.logins) : void 0
    }));
    return {
      identityId: parameters.identityId,
      accessKeyId: AccessKeyId,
      secretAccessKey: SecretKey,
      sessionToken: SessionToken,
      expiration: Expiration
    };
  };
}
function throwOnMissingAccessKeyId() {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no secret key");
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js
var STORE_NAME = "IdentityIds";
var IndexedDbStorage = class {
  constructor(dbName = "aws:cognito-identity-ids") {
    this.dbName = dbName;
  }
  getItem(key) {
    return this.withObjectStore("readonly", (store) => {
      const req = store.get(key);
      return new Promise((resolve) => {
        req.onerror = () => resolve(null);
        req.onsuccess = () => resolve(req.result ? req.result.value : null);
      });
    }).catch(() => null);
  }
  removeItem(key) {
    return this.withObjectStore("readwrite", (store) => {
      const req = store.delete(key);
      return new Promise((resolve, reject) => {
        req.onerror = () => reject(req.error);
        req.onsuccess = () => resolve();
      });
    });
  }
  setItem(id, value) {
    return this.withObjectStore("readwrite", (store) => {
      const req = store.put({ id, value });
      return new Promise((resolve, reject) => {
        req.onerror = () => reject(req.error);
        req.onsuccess = () => resolve();
      });
    });
  }
  getDb() {
    const openDbRequest = self.indexedDB.open(this.dbName, 1);
    return new Promise((resolve, reject) => {
      openDbRequest.onsuccess = () => {
        resolve(openDbRequest.result);
      };
      openDbRequest.onerror = () => {
        reject(openDbRequest.error);
      };
      openDbRequest.onblocked = () => {
        reject(new Error("Unable to access DB"));
      };
      openDbRequest.onupgradeneeded = () => {
        const db = openDbRequest.result;
        db.onerror = () => {
          reject(new Error("Failed to create object store"));
        };
        db.createObjectStore(STORE_NAME, { keyPath: "id" });
      };
    });
  }
  withObjectStore(mode, action) {
    return this.getDb().then((db) => {
      const tx = db.transaction(STORE_NAME, mode);
      tx.oncomplete = () => db.close();
      return new Promise((resolve, reject) => {
        tx.onerror = () => reject(tx.error);
        resolve(action(tx.objectStore(STORE_NAME)));
      }).catch((err) => {
        db.close();
        throw err;
      });
    });
  }
};

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js
var InMemoryStorage = class {
  constructor(store = {}) {
    this.store = store;
  }
  getItem(key) {
    if (key in this.store) {
      return this.store[key];
    }
    return null;
  }
  removeItem(key) {
    delete this.store[key];
  }
  setItem(key, value) {
    this.store[key] = value;
  }
};

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js
var inMemoryStorage = new InMemoryStorage();
function localStorage() {
  if (typeof self === "object" && self.indexedDB) {
    return new IndexedDbStorage();
  }
  if (typeof window === "object" && window.localStorage) {
    return window.localStorage;
  }
  return inMemoryStorage;
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js
function fromCognitoIdentityPool({ accountId, cache = localStorage(), client, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : void 0 }) {
  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : void 0;
  let provider = async () => {
    let identityId = cacheKey && await cache.getItem(cacheKey);
    if (!identityId) {
      const { IdentityId = throwOnMissingId() } = await client.send(new GetIdCommand({
        AccountId: accountId,
        IdentityPoolId: identityPoolId,
        Logins: logins ? await resolveLogins(logins) : void 0
      }));
      identityId = IdentityId;
      if (cacheKey) {
        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {
        });
      }
    }
    provider = fromCognitoIdentity({
      client,
      customRoleArn,
      logins,
      identityId
    });
    return provider();
  };
  return () => provider().catch(async (err) => {
    if (cacheKey) {
      Promise.resolve(cache.removeItem(cacheKey)).catch(() => {
      });
    }
    throw err;
  });
}
function throwOnMissingId() {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no identity ID");
}

// node_modules/@aws-sdk/credential-providers/dist-es/fromCognitoIdentityPool.js
var fromCognitoIdentityPool2 = (options) => {
  var _a;
  return fromCognitoIdentityPool({
    ...options,
    client: new CognitoIdentityClient((_a = options.clientConfig) != null ? _a : {})
  });
};

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig2(input) {
  return input;
}
var hostHeaderMiddleware2 = (options) => (next) => async (args) => {
  if (!HttpRequest.isInstance(args.request))
    return next(args);
  const { request } = args;
  const { handlerProtocol = "" } = options.requestHandler.metadata || {};
  if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
    delete request.headers["host"];
    request.headers[":authority"] = "";
  } else if (!request.headers["host"]) {
    let host = request.hostname;
    if (request.port != null)
      host += `:${request.port}`;
    request.headers["host"] = host;
  }
  return next(args);
};
var hostHeaderMiddlewareOptions2 = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin2 = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(hostHeaderMiddleware2(options), hostHeaderMiddlewareOptions2);
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware2 = () => (next, context) => async (args) => {
  var _a, _b;
  try {
    const response = await next(args);
    const { clientName, commandName, logger: logger12, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
    const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog != null ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
    const { $metadata, ...outputWithoutMetadata } = response.output;
    (_a = logger12 == null ? void 0 : logger12.info) == null ? void 0 : _a.call(logger12, {
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      output: outputFilterSensitiveLog(outputWithoutMetadata),
      metadata: $metadata
    });
    return response;
  } catch (error) {
    const { clientName, commandName, logger: logger12, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
    (_b = logger12 == null ? void 0 : logger12.error) == null ? void 0 : _b.call(logger12, {
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      error,
      metadata: error.$metadata
    });
    throw error;
  }
};
var loggerMiddlewareOptions2 = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin2 = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(loggerMiddleware2(), loggerMiddlewareOptions2);
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthConfiguration.js
var CREDENTIAL_EXPIRE_WINDOW2 = 3e5;
var resolveAwsAuthConfig2 = (input) => {
  const normalizedCreds = input.credentials ? normalizeCredentialProvider2(input.credentials) : input.credentialDefaultProvider(input);
  const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
  let signer;
  if (input.signer) {
    signer = normalizeProvider(input.signer);
  } else if (input.regionInfoProvider) {
    signer = () => normalizeProvider(input.region)().then(async (region) => [
      await input.regionInfoProvider(region, {
        useFipsEndpoint: await input.useFipsEndpoint(),
        useDualstackEndpoint: await input.useDualstackEndpoint()
      }) || {},
      region
    ]).then(([regionInfo, region]) => {
      const { signingRegion, signingService } = regionInfo;
      input.signingRegion = input.signingRegion || signingRegion || region;
      input.signingName = input.signingName || signingService || input.serviceId;
      const params = {
        ...input,
        credentials: normalizedCreds,
        region: input.signingRegion,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = input.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    });
  } else {
    signer = async (authScheme) => {
      authScheme = Object.assign({}, {
        name: "sigv4",
        signingName: input.signingName || input.defaultSigningName,
        signingRegion: await normalizeProvider(input.region)(),
        properties: {}
      }, authScheme);
      const signingRegion = authScheme.signingRegion;
      const signingService = authScheme.signingName;
      input.signingRegion = input.signingRegion || signingRegion;
      input.signingName = input.signingName || signingService || input.serviceId;
      const params = {
        ...input,
        credentials: normalizedCreds,
        region: input.signingRegion,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = input.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    };
  }
  return {
    ...input,
    systemClockOffset,
    signingEscapePath,
    credentials: normalizedCreds,
    signer
  };
};
var normalizeCredentialProvider2 = (credentials) => {
  if (typeof credentials === "function") {
    return memoize(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW2, (credentials2) => credentials2.expiration !== void 0);
  }
  return normalizeProvider(credentials);
};

// node_modules/@aws-sdk/middleware-sdk-sts/dist-es/index.js
var resolveStsAuthConfig = (input, { stsClientCtor }) => resolveAwsAuthConfig2({
  ...input,
  stsClientCtor
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
function resolveUserAgentConfig2(input) {
  return {
    ...input,
    customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
  };
}

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT2 = "user-agent";
var X_AMZ_USER_AGENT2 = "x-amz-user-agent";
var SPACE2 = " ";
var UA_NAME_SEPARATOR2 = "/";
var UA_NAME_ESCAPE_REGEX2 = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
var UA_VALUE_ESCAPE_REGEX2 = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
var UA_ESCAPE_CHAR2 = "-";

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware2 = (options) => (next, context) => async (args) => {
  var _a, _b;
  const { request } = args;
  if (!HttpRequest.isInstance(request))
    return next(args);
  const { headers } = request;
  const userAgent = ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent2)) || [];
  const defaultUserAgent4 = (await options.defaultUserAgentProvider()).map(escapeUserAgent2);
  const customUserAgent = ((_b = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _b.map(escapeUserAgent2)) || [];
  const prefix = getUserAgentPrefix();
  const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent4, ...userAgent, ...customUserAgent]).join(SPACE2);
  const normalUAValue = [
    ...defaultUserAgent4.filter((section) => section.startsWith("aws-sdk-")),
    ...customUserAgent
  ].join(SPACE2);
  if (options.runtime !== "browser") {
    if (normalUAValue) {
      headers[X_AMZ_USER_AGENT2] = headers[X_AMZ_USER_AGENT2] ? `${headers[USER_AGENT2]} ${normalUAValue}` : normalUAValue;
    }
    headers[USER_AGENT2] = sdkUserAgentValue;
  } else {
    headers[X_AMZ_USER_AGENT2] = sdkUserAgentValue;
  }
  return next({
    ...args,
    request
  });
};
var escapeUserAgent2 = (userAgentPair) => {
  var _a;
  const name = userAgentPair[0].split(UA_NAME_SEPARATOR2).map((part) => part.replace(UA_NAME_ESCAPE_REGEX2, UA_ESCAPE_CHAR2)).join(UA_NAME_SEPARATOR2);
  const version2 = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX2, UA_ESCAPE_CHAR2);
  const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR2);
  const prefix = name.substring(0, prefixSeparatorIndex);
  let uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
    switch (index) {
      case 0:
        return item;
      case 1:
        return `${acc}/${item}`;
      default:
        return `${acc}#${item}`;
    }
  }, "");
};
var getUserAgentMiddlewareOptions2 = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin2 = (config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(userAgentMiddleware2(config), getUserAgentMiddlewareOptions2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters2 = (options) => {
  var _a, _b, _c;
  return {
    ...options,
    useDualstackEndpoint: (_a = options.useDualstackEndpoint) != null ? _a : false,
    useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
    useGlobalEndpoint: (_c = options.useGlobalEndpoint) != null ? _c : false,
    defaultSigningName: "sts"
  };
};

// node_modules/@aws-sdk/client-sts/package.json
var package_default2 = {
  name: "@aws-sdk/client-sts",
  description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
  version: "3.363.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "tsc -p tsconfig.cjs.json",
    "build:docs": "typedoc",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
    test: "yarn test:unit",
    "test:unit": "jest"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "3.0.0",
    "@aws-crypto/sha256-js": "3.0.0",
    "@aws-sdk/credential-provider-node": "3.363.0",
    "@aws-sdk/middleware-host-header": "3.363.0",
    "@aws-sdk/middleware-logger": "3.363.0",
    "@aws-sdk/middleware-recursion-detection": "3.363.0",
    "@aws-sdk/middleware-sdk-sts": "3.363.0",
    "@aws-sdk/middleware-signing": "3.363.0",
    "@aws-sdk/middleware-user-agent": "3.363.0",
    "@aws-sdk/types": "3.357.0",
    "@aws-sdk/util-endpoints": "3.357.0",
    "@aws-sdk/util-user-agent-browser": "3.363.0",
    "@aws-sdk/util-user-agent-node": "3.363.0",
    "@smithy/config-resolver": "^1.0.1",
    "@smithy/fetch-http-handler": "^1.0.1",
    "@smithy/hash-node": "^1.0.1",
    "@smithy/invalid-dependency": "^1.0.1",
    "@smithy/middleware-content-length": "^1.0.1",
    "@smithy/middleware-endpoint": "^1.0.1",
    "@smithy/middleware-retry": "^1.0.1",
    "@smithy/middleware-serde": "^1.0.1",
    "@smithy/middleware-stack": "^1.0.1",
    "@smithy/node-config-provider": "^1.0.1",
    "@smithy/node-http-handler": "^1.0.1",
    "@smithy/protocol-http": "^1.1.0",
    "@smithy/smithy-client": "^1.0.2",
    "@smithy/types": "^1.1.0",
    "@smithy/url-parser": "^1.0.1",
    "@smithy/util-base64": "^1.0.1",
    "@smithy/util-body-length-browser": "^1.0.1",
    "@smithy/util-body-length-node": "^1.0.1",
    "@smithy/util-defaults-mode-browser": "^1.0.1",
    "@smithy/util-defaults-mode-node": "^1.0.1",
    "@smithy/util-retry": "^1.0.1",
    "@smithy/util-utf8": "^1.0.1",
    "fast-xml-parser": "4.2.5",
    tslib: "^2.5.0"
  },
  devDependencies: {
    "@aws-sdk/service-client-documentation-generator": "3.310.0",
    "@smithy/service-client-documentation-generator": "^1.0.1",
    "@tsconfig/node14": "1.0.3",
    "@types/node": "^14.14.31",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typedoc: "0.23.23",
    typescript: "~4.9.5"
  },
  engines: {
    node: ">=14.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-sts"
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.browser.js
var import_sha256_browser2 = __toESM(require_build10());

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var defaultUserAgent2 = ({ serviceId, clientVersion }) => async () => {
  var _a, _b, _c, _d, _e, _f, _g;
  const parsedUA = typeof window !== "undefined" && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
  const sections = [
    ["aws-sdk-js", clientVersion],
    ["ua", "2.0"],
    [`os/${((_b = parsedUA == null ? void 0 : parsedUA.os) == null ? void 0 : _b.name) || "other"}`, (_c = parsedUA == null ? void 0 : parsedUA.os) == null ? void 0 : _c.version],
    ["lang/js"],
    ["md/browser", `${(_e = (_d = parsedUA == null ? void 0 : parsedUA.browser) == null ? void 0 : _d.name) != null ? _e : "unknown"}_${(_g = (_f = parsedUA == null ? void 0 : parsedUA.browser) == null ? void 0 : _f.version) != null ? _g : "unknown"}`]
  ];
  if (serviceId) {
    sections.push([`api/${serviceId}`, clientVersion]);
  }
  return sections;
};

// node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js
var F = "required";
var G = "type";
var H = "fn";
var I = "argv";
var J = "ref";
var a2 = false;
var b2 = true;
var c2 = "booleanEquals";
var d2 = "tree";
var e2 = "stringEquals";
var f2 = "sigv4";
var g2 = "sts";
var h2 = "us-east-1";
var i2 = "endpoint";
var j2 = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
var k2 = "error";
var l2 = "getAttr";
var m2 = { [F]: false, [G]: "String" };
var n2 = { [F]: true, "default": false, [G]: "Boolean" };
var o2 = { [J]: "Endpoint" };
var p2 = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
var q2 = { [J]: "Region" };
var r2 = { [H]: "aws.partition", [I]: [q2], "assign": "PartitionResult" };
var s2 = { [J]: "UseFIPS" };
var t = { [J]: "UseDualStack" };
var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": f2, "signingName": g2, "signingRegion": h2 }] }, "headers": {} };
var v = {};
var w = { "conditions": [{ [H]: e2, [I]: [q2, "aws-global"] }], [i2]: u, [G]: i2 };
var x = { [H]: c2, [I]: [s2, true] };
var y = { [H]: c2, [I]: [t, true] };
var z = { [H]: c2, [I]: [true, { [H]: l2, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] }] };
var A = { [J]: "PartitionResult" };
var B = { [H]: c2, [I]: [true, { [H]: l2, [I]: [A, "supportsDualStack"] }] };
var C = [{ [H]: "isSet", [I]: [o2] }];
var D = [x];
var E = [y];
var _data2 = { version: "1.0", parameters: { Region: m2, UseDualStack: n2, UseFIPS: n2, Endpoint: m2, UseGlobalEndpoint: n2 }, rules: [{ conditions: [{ [H]: c2, [I]: [{ [J]: "UseGlobalEndpoint" }, b2] }, { [H]: "not", [I]: C }, p2, r2, { [H]: c2, [I]: [s2, a2] }, { [H]: c2, [I]: [t, a2] }], [G]: d2, rules: [{ conditions: [{ [H]: e2, [I]: [q2, "ap-northeast-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "ap-south-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "ap-southeast-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "ap-southeast-2"] }], endpoint: u, [G]: i2 }, w, { conditions: [{ [H]: e2, [I]: [q2, "ca-central-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "eu-central-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "eu-north-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "eu-west-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "eu-west-2"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "eu-west-3"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "sa-east-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, h2] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "us-east-2"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "us-west-1"] }], endpoint: u, [G]: i2 }, { conditions: [{ [H]: e2, [I]: [q2, "us-west-2"] }], endpoint: u, [G]: i2 }, { endpoint: { url: j2, properties: { authSchemes: [{ name: f2, signingName: g2, signingRegion: "{Region}" }] }, headers: v }, [G]: i2 }] }, { conditions: C, [G]: d2, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k2 }, { [G]: d2, rules: [{ conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k2 }, { endpoint: { url: o2, properties: v, headers: v }, [G]: i2 }] }] }, { [G]: d2, rules: [{ conditions: [p2], [G]: d2, rules: [{ conditions: [r2], [G]: d2, rules: [{ conditions: [x, y], [G]: d2, rules: [{ conditions: [z, B], [G]: d2, rules: [{ [G]: d2, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i2 }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k2 }] }, { conditions: D, [G]: d2, rules: [{ conditions: [z], [G]: d2, rules: [{ [G]: d2, rules: [{ conditions: [{ [H]: e2, [I]: ["aws-us-gov", { [H]: l2, [I]: [A, "name"] }] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: i2 }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: i2 }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k2 }] }, { conditions: E, [G]: d2, rules: [{ conditions: [B], [G]: d2, rules: [{ [G]: d2, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i2 }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k2 }] }, { [G]: d2, rules: [w, { endpoint: { url: j2, properties: v, headers: v }, [G]: i2 }] }] }] }, { error: "Invalid Configuration: Missing Region", [G]: k2 }] }] };
var ruleSet2 = _data2;

// node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver2 = (endpointParams, context = {}) => {
  return resolveEndpoint(ruleSet2, {
    endpointParams,
    logger: context.logger
  });
};

// node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js
var getRuntimeConfig3 = (config) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  return {
    apiVersion: "2011-06-15",
    base64Decoder: (_a = config == null ? void 0 : config.base64Decoder) != null ? _a : fromBase64,
    base64Encoder: (_b = config == null ? void 0 : config.base64Encoder) != null ? _b : toBase64,
    disableHostPrefix: (_c = config == null ? void 0 : config.disableHostPrefix) != null ? _c : false,
    endpointProvider: (_d = config == null ? void 0 : config.endpointProvider) != null ? _d : defaultEndpointResolver2,
    logger: (_e = config == null ? void 0 : config.logger) != null ? _e : new NoOpLogger(),
    serviceId: (_f = config == null ? void 0 : config.serviceId) != null ? _f : "STS",
    urlParser: (_g = config == null ? void 0 : config.urlParser) != null ? _g : parseUrl,
    utf8Decoder: (_h = config == null ? void 0 : config.utf8Decoder) != null ? _h : fromUtf8,
    utf8Encoder: (_i = config == null ? void 0 : config.utf8Encoder) != null ? _i : toUtf8
  };
};

// node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.browser.js
var getRuntimeConfig4 = (config) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig3(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (_a = config == null ? void 0 : config.bodyLengthChecker) != null ? _a : calculateBodyLength,
    credentialDefaultProvider: (_b = config == null ? void 0 : config.credentialDefaultProvider) != null ? _b : (_) => () => Promise.reject(new Error("Credential is missing")),
    defaultUserAgentProvider: (_c = config == null ? void 0 : config.defaultUserAgentProvider) != null ? _c : defaultUserAgent2({ serviceId: clientSharedValues.serviceId, clientVersion: package_default2.version }),
    maxAttempts: (_d = config == null ? void 0 : config.maxAttempts) != null ? _d : DEFAULT_MAX_ATTEMPTS,
    region: (_e = config == null ? void 0 : config.region) != null ? _e : invalidProvider("Region is missing"),
    requestHandler: (_f = config == null ? void 0 : config.requestHandler) != null ? _f : new FetchHttpHandler(defaultConfigProvider),
    retryMode: (_g = config == null ? void 0 : config.retryMode) != null ? _g : async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,
    sha256: (_h = config == null ? void 0 : config.sha256) != null ? _h : import_sha256_browser2.Sha256,
    streamCollector: (_i = config == null ? void 0 : config.streamCollector) != null ? _i : streamCollector,
    useDualstackEndpoint: (_j = config == null ? void 0 : config.useDualstackEndpoint) != null ? _j : () => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT),
    useFipsEndpoint: (_k = config == null ? void 0 : config.useFipsEndpoint) != null ? _k : () => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT)
  };
};

// node_modules/@aws-sdk/client-sts/dist-es/STSClient.js
var STSClient = class extends Client {
  constructor(configuration) {
    const _config_0 = getRuntimeConfig4(configuration);
    const _config_1 = resolveClientEndpointParameters2(_config_0);
    const _config_2 = resolveRegionConfig(_config_1);
    const _config_3 = resolveEndpointConfig(_config_2);
    const _config_4 = resolveRetryConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig2(_config_4);
    const _config_6 = resolveStsAuthConfig(_config_5, { stsClientCtor: STSClient });
    const _config_7 = resolveUserAgentConfig2(_config_6);
    super(_config_7);
    this.config = _config_7;
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin2(this.config));
    this.middlewareStack.use(getLoggerPlugin2(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getUserAgentPlugin2(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate3 = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js
var isClockSkewed3 = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate3(systemClockOffset).getTime() - clockTime) >= 3e5;

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset3 = (clockTime, currentSystemClockOffset) => {
  const clockTimeInMs = Date.parse(clockTime);
  if (isClockSkewed3(clockTimeInMs, currentSystemClockOffset)) {
    return clockTimeInMs - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthMiddleware.js
var awsAuthMiddleware2 = (options) => (next, context) => async function(args) {
  var _a, _b, _c, _d;
  if (!HttpRequest.isInstance(args.request))
    return next(args);
  const authScheme = (_c = (_b = (_a = context.endpointV2) == null ? void 0 : _a.properties) == null ? void 0 : _b.authSchemes) == null ? void 0 : _c[0];
  const multiRegionOverride = (authScheme == null ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme == null ? void 0 : authScheme.signingRegionSet) == null ? void 0 : _d.join(",") : void 0;
  const signer = await options.signer(authScheme);
  const output = await next({
    ...args,
    request: await signer.sign(args.request, {
      signingDate: getSkewCorrectedDate3(options.systemClockOffset),
      signingRegion: multiRegionOverride || context["signing_region"],
      signingService: context["signing_service"]
    })
  }).catch((error) => {
    var _a2;
    const serverTime = (_a2 = error.ServerTime) != null ? _a2 : getDateHeader2(error.$response);
    if (serverTime) {
      options.systemClockOffset = getUpdatedSystemClockOffset3(serverTime, options.systemClockOffset);
    }
    throw error;
  });
  const dateHeader = getDateHeader2(output.response);
  if (dateHeader) {
    options.systemClockOffset = getUpdatedSystemClockOffset3(dateHeader, options.systemClockOffset);
  }
  return output;
};
var getDateHeader2 = (response) => {
  var _a, _b, _c;
  return HttpResponse.isInstance(response) ? (_c = (_a = response.headers) == null ? void 0 : _a.date) != null ? _c : (_b = response.headers) == null ? void 0 : _b.Date : void 0;
};
var awsAuthMiddlewareOptions2 = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin2 = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.addRelativeTo(awsAuthMiddleware2(options), awsAuthMiddlewareOptions2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js
var STSServiceException = class extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, STSServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js
var ExpiredTokenException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "ExpiredTokenException",
      $fault: "client",
      ...opts
    });
    this.name = "ExpiredTokenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, ExpiredTokenException.prototype);
  }
};
var MalformedPolicyDocumentException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "MalformedPolicyDocumentException",
      $fault: "client",
      ...opts
    });
    this.name = "MalformedPolicyDocumentException";
    this.$fault = "client";
    Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
  }
};
var PackedPolicyTooLargeException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "PackedPolicyTooLargeException",
      $fault: "client",
      ...opts
    });
    this.name = "PackedPolicyTooLargeException";
    this.$fault = "client";
    Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
  }
};
var RegionDisabledException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "RegionDisabledException",
      $fault: "client",
      ...opts
    });
    this.name = "RegionDisabledException";
    this.$fault = "client";
    Object.setPrototypeOf(this, RegionDisabledException.prototype);
  }
};
var IDPRejectedClaimException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "IDPRejectedClaimException",
      $fault: "client",
      ...opts
    });
    this.name = "IDPRejectedClaimException";
    this.$fault = "client";
    Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
  }
};
var InvalidIdentityTokenException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "InvalidIdentityTokenException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidIdentityTokenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
  }
};
var IDPCommunicationErrorException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "IDPCommunicationErrorException",
      $fault: "client",
      ...opts
    });
    this.name = "IDPCommunicationErrorException";
    this.$fault = "client";
    Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
  }
};
var InvalidAuthorizationMessageException = class extends STSServiceException {
  constructor(opts) {
    super({
      name: "InvalidAuthorizationMessageException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidAuthorizationMessageException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
  }
};
var CredentialsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING }
});
var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
});
var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SAMLAssertion && { SAMLAssertion: SENSITIVE_STRING }
});
var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
});
var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.WebIdentityToken && { WebIdentityToken: SENSITIVE_STRING }
});
var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
});
var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
});
var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
});

// node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js
var import_fast_xml_parser = __toESM(require_fxp());
var se_AssumeRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssumeRoleRequest(input, context),
    Action: "AssumeRole",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var se_AssumeRoleWithSAMLCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssumeRoleWithSAMLRequest(input, context),
    Action: "AssumeRoleWithSAML",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssumeRoleWithWebIdentityRequest(input, context),
    Action: "AssumeRoleWithWebIdentity",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var se_DecodeAuthorizationMessageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DecodeAuthorizationMessageRequest(input, context),
    Action: "DecodeAuthorizationMessage",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var se_GetAccessKeyInfoCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetAccessKeyInfoRequest(input, context),
    Action: "GetAccessKeyInfo",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var se_GetCallerIdentityCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetCallerIdentityRequest(input, context),
    Action: "GetCallerIdentity",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var se_GetFederationTokenCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetFederationTokenRequest(input, context),
    Action: "GetFederationToken",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var se_GetSessionTokenCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSessionTokenRequest(input, context),
    Action: "GetSessionToken",
    Version: "2011-06-15"
  });
  return buildHttpRpcRequest2(context, headers, "/", void 0, body);
};
var de_AssumeRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_AssumeRoleCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_AssumeRoleCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ExpiredTokenException":
    case "com.amazonaws.sts#ExpiredTokenException":
      throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
    case "MalformedPolicyDocument":
    case "com.amazonaws.sts#MalformedPolicyDocumentException":
      throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
    case "PackedPolicyTooLarge":
    case "com.amazonaws.sts#PackedPolicyTooLargeException":
      throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
    case "RegionDisabledException":
    case "com.amazonaws.sts#RegionDisabledException":
      throw await de_RegionDisabledExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var de_AssumeRoleWithSAMLCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_AssumeRoleWithSAMLCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ExpiredTokenException":
    case "com.amazonaws.sts#ExpiredTokenException":
      throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
    case "IDPRejectedClaim":
    case "com.amazonaws.sts#IDPRejectedClaimException":
      throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
    case "InvalidIdentityToken":
    case "com.amazonaws.sts#InvalidIdentityTokenException":
      throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
    case "MalformedPolicyDocument":
    case "com.amazonaws.sts#MalformedPolicyDocumentException":
      throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
    case "PackedPolicyTooLarge":
    case "com.amazonaws.sts#PackedPolicyTooLargeException":
      throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
    case "RegionDisabledException":
    case "com.amazonaws.sts#RegionDisabledException":
      throw await de_RegionDisabledExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_AssumeRoleWithWebIdentityCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ExpiredTokenException":
    case "com.amazonaws.sts#ExpiredTokenException":
      throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
    case "IDPCommunicationError":
    case "com.amazonaws.sts#IDPCommunicationErrorException":
      throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
    case "IDPRejectedClaim":
    case "com.amazonaws.sts#IDPRejectedClaimException":
      throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
    case "InvalidIdentityToken":
    case "com.amazonaws.sts#InvalidIdentityTokenException":
      throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
    case "MalformedPolicyDocument":
    case "com.amazonaws.sts#MalformedPolicyDocumentException":
      throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
    case "PackedPolicyTooLarge":
    case "com.amazonaws.sts#PackedPolicyTooLargeException":
      throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
    case "RegionDisabledException":
    case "com.amazonaws.sts#RegionDisabledException":
      throw await de_RegionDisabledExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var de_DecodeAuthorizationMessageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_DecodeAuthorizationMessageCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidAuthorizationMessageException":
    case "com.amazonaws.sts#InvalidAuthorizationMessageException":
      throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var de_GetAccessKeyInfoCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetAccessKeyInfoCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_GetAccessKeyInfoCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError2({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
};
var de_GetCallerIdentityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetCallerIdentityCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_GetCallerIdentityCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError2({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
};
var de_GetFederationTokenCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetFederationTokenCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_GetFederationTokenCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "MalformedPolicyDocument":
    case "com.amazonaws.sts#MalformedPolicyDocumentException":
      throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
    case "PackedPolicyTooLarge":
    case "com.amazonaws.sts#PackedPolicyTooLargeException":
      throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
    case "RegionDisabledException":
    case "com.amazonaws.sts#RegionDisabledException":
      throw await de_RegionDisabledExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var de_GetSessionTokenCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_GetSessionTokenCommandError(output, context);
  }
  const data = await parseBody2(output.body, context);
  let contents = {};
  contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
  const response = {
    $metadata: deserializeMetadata2(output),
    ...contents
  };
  return response;
};
var de_GetSessionTokenCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody2(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "RegionDisabledException":
    case "com.amazonaws.sts#RegionDisabledException":
      throw await de_RegionDisabledExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ExpiredTokenException(body.Error, context);
  const exception = new ExpiredTokenException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_IDPCommunicationErrorException(body.Error, context);
  const exception = new IDPCommunicationErrorException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_IDPRejectedClaimException(body.Error, context);
  const exception = new IDPRejectedClaimException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
  const exception = new InvalidAuthorizationMessageException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidIdentityTokenException(body.Error, context);
  const exception = new InvalidIdentityTokenException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
  const exception = new MalformedPolicyDocumentException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
  const exception = new PackedPolicyTooLargeException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_RegionDisabledException(body.Error, context);
  const exception = new RegionDisabledException({
    $metadata: deserializeMetadata2(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var se_AssumeRoleRequest = (input, context) => {
  var _a, _b, _c;
  const entries = {};
  if (input.RoleArn != null) {
    entries["RoleArn"] = input.RoleArn;
  }
  if (input.RoleSessionName != null) {
    entries["RoleSessionName"] = input.RoleSessionName;
  }
  if (input.PolicyArns != null) {
    const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
    if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
      entries.PolicyArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Policy != null) {
    entries["Policy"] = input.Policy;
  }
  if (input.DurationSeconds != null) {
    entries["DurationSeconds"] = input.DurationSeconds;
  }
  if (input.Tags != null) {
    const memberEntries = se_tagListType(input.Tags, context);
    if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TransitiveTagKeys != null) {
    const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);
    if (((_c = input.TransitiveTagKeys) == null ? void 0 : _c.length) === 0) {
      entries.TransitiveTagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitiveTagKeys.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ExternalId != null) {
    entries["ExternalId"] = input.ExternalId;
  }
  if (input.SerialNumber != null) {
    entries["SerialNumber"] = input.SerialNumber;
  }
  if (input.TokenCode != null) {
    entries["TokenCode"] = input.TokenCode;
  }
  if (input.SourceIdentity != null) {
    entries["SourceIdentity"] = input.SourceIdentity;
  }
  return entries;
};
var se_AssumeRoleWithSAMLRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input.RoleArn != null) {
    entries["RoleArn"] = input.RoleArn;
  }
  if (input.PrincipalArn != null) {
    entries["PrincipalArn"] = input.PrincipalArn;
  }
  if (input.SAMLAssertion != null) {
    entries["SAMLAssertion"] = input.SAMLAssertion;
  }
  if (input.PolicyArns != null) {
    const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
    if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
      entries.PolicyArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Policy != null) {
    entries["Policy"] = input.Policy;
  }
  if (input.DurationSeconds != null) {
    entries["DurationSeconds"] = input.DurationSeconds;
  }
  return entries;
};
var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input.RoleArn != null) {
    entries["RoleArn"] = input.RoleArn;
  }
  if (input.RoleSessionName != null) {
    entries["RoleSessionName"] = input.RoleSessionName;
  }
  if (input.WebIdentityToken != null) {
    entries["WebIdentityToken"] = input.WebIdentityToken;
  }
  if (input.ProviderId != null) {
    entries["ProviderId"] = input.ProviderId;
  }
  if (input.PolicyArns != null) {
    const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
    if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
      entries.PolicyArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Policy != null) {
    entries["Policy"] = input.Policy;
  }
  if (input.DurationSeconds != null) {
    entries["DurationSeconds"] = input.DurationSeconds;
  }
  return entries;
};
var se_DecodeAuthorizationMessageRequest = (input, context) => {
  const entries = {};
  if (input.EncodedMessage != null) {
    entries["EncodedMessage"] = input.EncodedMessage;
  }
  return entries;
};
var se_GetAccessKeyInfoRequest = (input, context) => {
  const entries = {};
  if (input.AccessKeyId != null) {
    entries["AccessKeyId"] = input.AccessKeyId;
  }
  return entries;
};
var se_GetCallerIdentityRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_GetFederationTokenRequest = (input, context) => {
  var _a, _b;
  const entries = {};
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.Policy != null) {
    entries["Policy"] = input.Policy;
  }
  if (input.PolicyArns != null) {
    const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
    if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
      entries.PolicyArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DurationSeconds != null) {
    entries["DurationSeconds"] = input.DurationSeconds;
  }
  if (input.Tags != null) {
    const memberEntries = se_tagListType(input.Tags, context);
    if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_GetSessionTokenRequest = (input, context) => {
  const entries = {};
  if (input.DurationSeconds != null) {
    entries["DurationSeconds"] = input.DurationSeconds;
  }
  if (input.SerialNumber != null) {
    entries["SerialNumber"] = input.SerialNumber;
  }
  if (input.TokenCode != null) {
    entries["TokenCode"] = input.TokenCode;
  }
  return entries;
};
var se_policyDescriptorListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PolicyDescriptorType(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_PolicyDescriptorType = (input, context) => {
  const entries = {};
  if (input.arn != null) {
    entries["arn"] = input.arn;
  }
  return entries;
};
var se_Tag = (input, context) => {
  const entries = {};
  if (input.Key != null) {
    entries["Key"] = input.Key;
  }
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};
var se_tagKeyListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_tagListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var de_AssumedRoleUser = (output, context) => {
  const contents = {};
  if (output["AssumedRoleId"] !== void 0) {
    contents.AssumedRoleId = expectString(output["AssumedRoleId"]);
  }
  if (output["Arn"] !== void 0) {
    contents.Arn = expectString(output["Arn"]);
  }
  return contents;
};
var de_AssumeRoleResponse = (output, context) => {
  const contents = {};
  if (output["Credentials"] !== void 0) {
    contents.Credentials = de_Credentials2(output["Credentials"], context);
  }
  if (output["AssumedRoleUser"] !== void 0) {
    contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
  }
  if (output["PackedPolicySize"] !== void 0) {
    contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
  }
  if (output["SourceIdentity"] !== void 0) {
    contents.SourceIdentity = expectString(output["SourceIdentity"]);
  }
  return contents;
};
var de_AssumeRoleWithSAMLResponse = (output, context) => {
  const contents = {};
  if (output["Credentials"] !== void 0) {
    contents.Credentials = de_Credentials2(output["Credentials"], context);
  }
  if (output["AssumedRoleUser"] !== void 0) {
    contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
  }
  if (output["PackedPolicySize"] !== void 0) {
    contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
  }
  if (output["Subject"] !== void 0) {
    contents.Subject = expectString(output["Subject"]);
  }
  if (output["SubjectType"] !== void 0) {
    contents.SubjectType = expectString(output["SubjectType"]);
  }
  if (output["Issuer"] !== void 0) {
    contents.Issuer = expectString(output["Issuer"]);
  }
  if (output["Audience"] !== void 0) {
    contents.Audience = expectString(output["Audience"]);
  }
  if (output["NameQualifier"] !== void 0) {
    contents.NameQualifier = expectString(output["NameQualifier"]);
  }
  if (output["SourceIdentity"] !== void 0) {
    contents.SourceIdentity = expectString(output["SourceIdentity"]);
  }
  return contents;
};
var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
  const contents = {};
  if (output["Credentials"] !== void 0) {
    contents.Credentials = de_Credentials2(output["Credentials"], context);
  }
  if (output["SubjectFromWebIdentityToken"] !== void 0) {
    contents.SubjectFromWebIdentityToken = expectString(output["SubjectFromWebIdentityToken"]);
  }
  if (output["AssumedRoleUser"] !== void 0) {
    contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
  }
  if (output["PackedPolicySize"] !== void 0) {
    contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
  }
  if (output["Provider"] !== void 0) {
    contents.Provider = expectString(output["Provider"]);
  }
  if (output["Audience"] !== void 0) {
    contents.Audience = expectString(output["Audience"]);
  }
  if (output["SourceIdentity"] !== void 0) {
    contents.SourceIdentity = expectString(output["SourceIdentity"]);
  }
  return contents;
};
var de_Credentials2 = (output, context) => {
  const contents = {};
  if (output["AccessKeyId"] !== void 0) {
    contents.AccessKeyId = expectString(output["AccessKeyId"]);
  }
  if (output["SecretAccessKey"] !== void 0) {
    contents.SecretAccessKey = expectString(output["SecretAccessKey"]);
  }
  if (output["SessionToken"] !== void 0) {
    contents.SessionToken = expectString(output["SessionToken"]);
  }
  if (output["Expiration"] !== void 0) {
    contents.Expiration = expectNonNull(parseRfc3339DateTimeWithOffset(output["Expiration"]));
  }
  return contents;
};
var de_DecodeAuthorizationMessageResponse = (output, context) => {
  const contents = {};
  if (output["DecodedMessage"] !== void 0) {
    contents.DecodedMessage = expectString(output["DecodedMessage"]);
  }
  return contents;
};
var de_ExpiredTokenException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var de_FederatedUser = (output, context) => {
  const contents = {};
  if (output["FederatedUserId"] !== void 0) {
    contents.FederatedUserId = expectString(output["FederatedUserId"]);
  }
  if (output["Arn"] !== void 0) {
    contents.Arn = expectString(output["Arn"]);
  }
  return contents;
};
var de_GetAccessKeyInfoResponse = (output, context) => {
  const contents = {};
  if (output["Account"] !== void 0) {
    contents.Account = expectString(output["Account"]);
  }
  return contents;
};
var de_GetCallerIdentityResponse = (output, context) => {
  const contents = {};
  if (output["UserId"] !== void 0) {
    contents.UserId = expectString(output["UserId"]);
  }
  if (output["Account"] !== void 0) {
    contents.Account = expectString(output["Account"]);
  }
  if (output["Arn"] !== void 0) {
    contents.Arn = expectString(output["Arn"]);
  }
  return contents;
};
var de_GetFederationTokenResponse = (output, context) => {
  const contents = {};
  if (output["Credentials"] !== void 0) {
    contents.Credentials = de_Credentials2(output["Credentials"], context);
  }
  if (output["FederatedUser"] !== void 0) {
    contents.FederatedUser = de_FederatedUser(output["FederatedUser"], context);
  }
  if (output["PackedPolicySize"] !== void 0) {
    contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
  }
  return contents;
};
var de_GetSessionTokenResponse = (output, context) => {
  const contents = {};
  if (output["Credentials"] !== void 0) {
    contents.Credentials = de_Credentials2(output["Credentials"], context);
  }
  return contents;
};
var de_IDPCommunicationErrorException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var de_IDPRejectedClaimException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var de_InvalidAuthorizationMessageException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var de_InvalidIdentityTokenException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var de_MalformedPolicyDocumentException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var de_PackedPolicyTooLargeException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var de_RegionDisabledException = (output, context) => {
  const contents = {};
  if (output["message"] !== void 0) {
    contents.message = expectString(output["message"]);
  }
  return contents;
};
var deserializeMetadata2 = (output) => {
  var _a, _b;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_b = (_a = output.headers["x-amzn-requestid"]) != null ? _a : output.headers["x-amzn-request-id"]) != null ? _b : output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBodyString2 = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
var throwDefaultError2 = withBaseException(STSServiceException);
var buildHttpRpcRequest2 = async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new HttpRequest(contents);
};
var SHARED_HEADERS = {
  "content-type": "application/x-www-form-urlencoded"
};
var parseBody2 = (streamBody, context) => collectBodyString2(streamBody, context).then((encoded) => {
  if (encoded.length) {
    const parser = new import_fast_xml_parser.XMLParser({
      attributeNamePrefix: "",
      htmlEntities: true,
      ignoreAttributes: false,
      ignoreDeclaration: true,
      parseTagValue: false,
      trimValues: false,
      tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
    });
    parser.addEntity("#xD", "\r");
    parser.addEntity("#10", "\n");
    const parsedObj = parser.parse(encoded);
    const textNodeName = "#text";
    const key = Object.keys(parsedObj)[0];
    const parsedObjToReturn = parsedObj[key];
    if (parsedObjToReturn[textNodeName]) {
      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
      delete parsedObjToReturn[textNodeName];
    }
    return getValueFromTextNode(parsedObjToReturn);
  }
  return {};
});
var parseErrorBody2 = async (errorBody, context) => {
  var _a;
  const value = await parseBody2(errorBody, context);
  if (value.Error) {
    value.Error.message = (_a = value.Error.message) != null ? _a : value.Error.Message;
  }
  return value;
};
var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value)).join("&");
var loadQueryErrorCode = (output, data) => {
  var _a;
  if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js
var AssumeRoleCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin2(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "AssumeRoleCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: AssumeRoleResponseFilterSensitiveLog
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_AssumeRoleCommand(input, context);
  }
  deserialize(output, context) {
    return de_AssumeRoleCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithSAMLCommand.js
var AssumeRoleWithSAMLCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "AssumeRoleWithSAMLCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: AssumeRoleWithSAMLRequestFilterSensitiveLog,
      outputFilterSensitiveLog: AssumeRoleWithSAMLResponseFilterSensitiveLog
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_AssumeRoleWithSAMLCommand(input, context);
  }
  deserialize(output, context) {
    return de_AssumeRoleWithSAMLCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js
var AssumeRoleWithWebIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "AssumeRoleWithWebIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
      outputFilterSensitiveLog: AssumeRoleWithWebIdentityResponseFilterSensitiveLog
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_AssumeRoleWithWebIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_AssumeRoleWithWebIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/DecodeAuthorizationMessageCommand.js
var DecodeAuthorizationMessageCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin2(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "DecodeAuthorizationMessageCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_DecodeAuthorizationMessageCommand(input, context);
  }
  deserialize(output, context) {
    return de_DecodeAuthorizationMessageCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetAccessKeyInfoCommand.js
var GetAccessKeyInfoCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin2(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "GetAccessKeyInfoCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetAccessKeyInfoCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetAccessKeyInfoCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetCallerIdentityCommand.js
var GetCallerIdentityCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetCallerIdentityCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin2(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "GetCallerIdentityCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: (_) => _
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetCallerIdentityCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetCallerIdentityCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetFederationTokenCommand.js
var GetFederationTokenCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetFederationTokenCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin2(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "GetFederationTokenCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: GetFederationTokenResponseFilterSensitiveLog
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetFederationTokenCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetFederationTokenCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetSessionTokenCommand.js
var GetSessionTokenCommand = class extends Command {
  static getEndpointParameterInstructions() {
    return {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  constructor(input) {
    super();
    this.input = input;
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));
    this.middlewareStack.use(getAwsAuthPlugin2(configuration));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger: logger12 } = configuration;
    const clientName = "STSClient";
    const commandName = "GetSessionTokenCommand";
    const handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: (_) => _,
      outputFilterSensitiveLog: GetSessionTokenResponseFilterSensitiveLog
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return se_GetSessionTokenCommand(input, context);
  }
  deserialize(output, context) {
    return de_GetSessionTokenCommand(output, context);
  }
};

// node_modules/@aws-sdk/client-sts/dist-es/STS.js
var commands2 = {
  AssumeRoleCommand,
  AssumeRoleWithSAMLCommand,
  AssumeRoleWithWebIdentityCommand,
  DecodeAuthorizationMessageCommand,
  GetAccessKeyInfoCommand,
  GetCallerIdentityCommand,
  GetFederationTokenCommand,
  GetSessionTokenCommand
};
var STS = class extends STSClient {
};
createAggregatedClient(commands2, STS);

// node_modules/@aws-amplify/core/lib-esm/Util/Constants.js
var AWS_CLOUDWATCH_BASE_BUFFER_SIZE = 26;
var AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE = 1048576;
var AWS_CLOUDWATCH_MAX_EVENT_SIZE = 256e3;
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var AWS_CLOUDWATCH_PROVIDER_NAME = "AWSCloudWatch";
var NO_CREDS_ERROR_STRING = "No credentials";
var RETRY_ERROR_CODES = [
  "ResourceNotFoundException",
  "InvalidSequenceTokenException"
];

// node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js
var __values = function(o3) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
  if (m3)
    return m3.call(o3);
  if (o3 && typeof o3.length === "number")
    return {
      next: function() {
        if (o3 && i3 >= o3.length)
          o3 = void 0;
        return { value: o3 && o3[i3++], done: !o3 };
      }
    };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
      if (ar || !(i3 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i3);
        ar[i3] = from[i3];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var LOG_LEVELS = {
  VERBOSE: 1,
  DEBUG: 2,
  INFO: 3,
  WARN: 4,
  ERROR: 5
};
var LOG_TYPE;
(function(LOG_TYPE2) {
  LOG_TYPE2["DEBUG"] = "DEBUG";
  LOG_TYPE2["ERROR"] = "ERROR";
  LOG_TYPE2["INFO"] = "INFO";
  LOG_TYPE2["WARN"] = "WARN";
  LOG_TYPE2["VERBOSE"] = "VERBOSE";
})(LOG_TYPE || (LOG_TYPE = {}));
var ConsoleLogger = function() {
  function ConsoleLogger2(name, level) {
    if (level === void 0) {
      level = LOG_TYPE.WARN;
    }
    this.name = name;
    this.level = level;
    this._pluggables = [];
  }
  ConsoleLogger2.prototype._padding = function(n3) {
    return n3 < 10 ? "0" + n3 : "" + n3;
  };
  ConsoleLogger2.prototype._ts = function() {
    var dt = new Date();
    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(":") + "." + dt.getMilliseconds();
  };
  ConsoleLogger2.prototype.configure = function(config) {
    if (!config)
      return this._config;
    this._config = config;
    return this._config;
  };
  ConsoleLogger2.prototype._log = function(type) {
    var e_1, _a;
    var msg = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      msg[_i - 1] = arguments[_i];
    }
    var logger_level_name = this.level;
    if (ConsoleLogger2.LOG_LEVEL) {
      logger_level_name = ConsoleLogger2.LOG_LEVEL;
    }
    if (typeof window !== "undefined" && window.LOG_LEVEL) {
      logger_level_name = window.LOG_LEVEL;
    }
    var logger_level = LOG_LEVELS[logger_level_name];
    var type_level = LOG_LEVELS[type];
    if (!(type_level >= logger_level)) {
      return;
    }
    var log = console.log.bind(console);
    if (type === LOG_TYPE.ERROR && console.error) {
      log = console.error.bind(console);
    }
    if (type === LOG_TYPE.WARN && console.warn) {
      log = console.warn.bind(console);
    }
    var prefix = "[".concat(type, "] ").concat(this._ts(), " ").concat(this.name);
    var message = "";
    if (msg.length === 1 && typeof msg[0] === "string") {
      message = "".concat(prefix, " - ").concat(msg[0]);
      log(message);
    } else if (msg.length === 1) {
      message = "".concat(prefix, " ").concat(msg[0]);
      log(prefix, msg[0]);
    } else if (typeof msg[0] === "string") {
      var obj = msg.slice(1);
      if (obj.length === 1) {
        obj = obj[0];
      }
      message = "".concat(prefix, " - ").concat(msg[0], " ").concat(obj);
      log("".concat(prefix, " - ").concat(msg[0]), obj);
    } else {
      message = "".concat(prefix, " ").concat(msg);
      log(prefix, msg);
    }
    try {
      for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {
        var plugin = _c.value;
        var logEvent = { message, timestamp: Date.now() };
        plugin.pushLogs([logEvent]);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  ConsoleLogger2.prototype.log = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spreadArray([LOG_TYPE.INFO], __read(msg), false));
  };
  ConsoleLogger2.prototype.info = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spreadArray([LOG_TYPE.INFO], __read(msg), false));
  };
  ConsoleLogger2.prototype.warn = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spreadArray([LOG_TYPE.WARN], __read(msg), false));
  };
  ConsoleLogger2.prototype.error = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spreadArray([LOG_TYPE.ERROR], __read(msg), false));
  };
  ConsoleLogger2.prototype.debug = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spreadArray([LOG_TYPE.DEBUG], __read(msg), false));
  };
  ConsoleLogger2.prototype.verbose = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spreadArray([LOG_TYPE.VERBOSE], __read(msg), false));
  };
  ConsoleLogger2.prototype.addPluggable = function(pluggable) {
    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
      this._pluggables.push(pluggable);
      pluggable.configure(this._config);
    }
  };
  ConsoleLogger2.prototype.listPluggables = function() {
    return this._pluggables;
  };
  ConsoleLogger2.LOG_LEVEL = null;
  return ConsoleLogger2;
}();

// node_modules/@aws-amplify/core/lib-esm/Amplify.js
var __read2 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var logger = new ConsoleLogger("Amplify");
var AmplifyClass = function() {
  function AmplifyClass2() {
    this._components = [];
    this._config = {};
    this._modules = {};
    this.Auth = null;
    this.Analytics = null;
    this.API = null;
    this.Credentials = null;
    this.Storage = null;
    this.I18n = null;
    this.Cache = null;
    this.PubSub = null;
    this.Interactions = null;
    this.Pushnotification = null;
    this.UI = null;
    this.XR = null;
    this.Predictions = null;
    this.DataStore = null;
    this.Geo = null;
    this.Notifications = null;
    this.Logger = ConsoleLogger;
    this.ServiceWorker = null;
  }
  AmplifyClass2.prototype.register = function(comp) {
    logger.debug("component registered in amplify", comp);
    this._components.push(comp);
    if (typeof comp.getModuleName === "function") {
      this._modules[comp.getModuleName()] = comp;
      this[comp.getModuleName()] = comp;
    } else {
      logger.debug("no getModuleName method for component", comp);
    }
    comp.configure(this._config);
  };
  AmplifyClass2.prototype.configure = function(config) {
    var _this = this;
    if (!config)
      return this._config;
    this._config = Object.assign(this._config, config);
    logger.debug("amplify config", this._config);
    Object.entries(this._modules).forEach(function(_a) {
      var _b = __read2(_a, 2), Name = _b[0], comp = _b[1];
      Object.keys(comp).forEach(function(property) {
        if (_this._modules[property]) {
          comp[property] = _this._modules[property];
        }
      });
    });
    this._components.map(function(comp) {
      comp.configure(_this._config);
    });
    return this._config;
  };
  AmplifyClass2.prototype.addPluggable = function(pluggable) {
    if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") {
      this._components.map(function(comp) {
        if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") {
          comp.addPluggable(pluggable);
        }
      });
    }
  };
  return AmplifyClass2;
}();
var Amplify = new AmplifyClass();

// node_modules/@aws-amplify/core/lib-esm/Platform/types.js
var Framework;
(function(Framework2) {
  Framework2["WebUnknown"] = "0";
  Framework2["React"] = "1";
  Framework2["NextJs"] = "2";
  Framework2["Angular"] = "3";
  Framework2["VueJs"] = "4";
  Framework2["Nuxt"] = "5";
  Framework2["Svelte"] = "6";
  Framework2["ServerSideUnknown"] = "100";
  Framework2["ReactSSR"] = "101";
  Framework2["NextJsSSR"] = "102";
  Framework2["AngularSSR"] = "103";
  Framework2["VueJsSSR"] = "104";
  Framework2["NuxtSSR"] = "105";
  Framework2["SvelteSSR"] = "106";
  Framework2["ReactNative"] = "201";
  Framework2["Expo"] = "202";
})(Framework || (Framework = {}));
var Category;
(function(Category2) {
  Category2["API"] = "api";
  Category2["Auth"] = "auth";
  Category2["Analytics"] = "analytics";
  Category2["DataStore"] = "datastore";
  Category2["Geo"] = "geo";
  Category2["InAppMessaging"] = "inappmessaging";
  Category2["Interactions"] = "interactions";
  Category2["Predictions"] = "predictions";
  Category2["PubSub"] = "pubsub";
  Category2["PushNotification"] = "pushnotification";
  Category2["Storage"] = "storage";
})(Category || (Category = {}));
var AnalyticsAction;
(function(AnalyticsAction2) {
  AnalyticsAction2["Record"] = "1";
  AnalyticsAction2["UpdateEndpoint"] = "2";
})(AnalyticsAction || (AnalyticsAction = {}));
var ApiAction;
(function(ApiAction2) {
  ApiAction2["GraphQl"] = "1";
  ApiAction2["Get"] = "2";
  ApiAction2["Post"] = "3";
  ApiAction2["Put"] = "4";
  ApiAction2["Patch"] = "5";
  ApiAction2["Del"] = "6";
  ApiAction2["Head"] = "7";
})(ApiAction || (ApiAction = {}));
var AuthAction;
(function(AuthAction2) {
  AuthAction2["FederatedSignIn"] = "30";
})(AuthAction || (AuthAction = {}));
var DataStoreAction;
(function(DataStoreAction2) {
  DataStoreAction2["Subscribe"] = "1";
  DataStoreAction2["GraphQl"] = "2";
})(DataStoreAction || (DataStoreAction = {}));
var GeoAction;
(function(GeoAction2) {
  GeoAction2["None"] = "0";
})(GeoAction || (GeoAction = {}));
var InAppMessagingAction;
(function(InAppMessagingAction2) {
  InAppMessagingAction2["None"] = "0";
})(InAppMessagingAction || (InAppMessagingAction = {}));
var InteractionsAction;
(function(InteractionsAction2) {
  InteractionsAction2["None"] = "0";
})(InteractionsAction || (InteractionsAction = {}));
var PredictionsAction;
(function(PredictionsAction2) {
  PredictionsAction2["Convert"] = "1";
  PredictionsAction2["Identify"] = "2";
  PredictionsAction2["Interpret"] = "3";
})(PredictionsAction || (PredictionsAction = {}));
var PubSubAction;
(function(PubSubAction2) {
  PubSubAction2["Subscribe"] = "1";
})(PubSubAction || (PubSubAction = {}));
var PushNotificationAction;
(function(PushNotificationAction2) {
  PushNotificationAction2["None"] = "0";
})(PushNotificationAction || (PushNotificationAction = {}));
var StorageAction;
(function(StorageAction2) {
  StorageAction2["Put"] = "1";
  StorageAction2["Get"] = "2";
  StorageAction2["List"] = "3";
  StorageAction2["Copy"] = "4";
  StorageAction2["Remove"] = "5";
  StorageAction2["GetProperties"] = "6";
})(StorageAction || (StorageAction = {}));

// node_modules/@aws-amplify/core/lib-esm/Platform/version.js
var version = "5.3.3";

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/helpers.js
var globalExists = function() {
  return typeof global !== "undefined";
};
var windowExists = function() {
  return typeof window !== "undefined";
};
var documentExists = function() {
  return typeof document !== "undefined";
};
var processExists = function() {
  return typeof process !== "undefined";
};
var keyPrefixMatch = function(object, prefix) {
  return !!Object.keys(object).find(function(key) {
    return key.startsWith(prefix);
  });
};

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/React.js
function reactWebDetect() {
  var elementKeyPrefixedWithReact = function(key) {
    return key.startsWith("_react") || key.startsWith("__react");
  };
  var elementIsReactEnabled = function(element) {
    return Object.keys(element).find(elementKeyPrefixedWithReact);
  };
  var allElementsWithId = function() {
    return Array.from(document.querySelectorAll("[id]"));
  };
  return documentExists() && allElementsWithId().some(elementIsReactEnabled);
}
function reactSSRDetect() {
  return processExists() && typeof process.env !== "undefined" && !!Object.keys(process.env).find(function(key) {
    return key.includes("react");
  });
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/Vue.js
function vueWebDetect() {
  return windowExists() && keyPrefixMatch(window, "__VUE");
}
function vueSSRDetect() {
  return globalExists() && keyPrefixMatch(global, "__VUE");
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/Svelte.js
function svelteWebDetect() {
  return windowExists() && keyPrefixMatch(window, "__SVELTE");
}
function svelteSSRDetect() {
  return processExists() && typeof process.env !== "undefined" && !!Object.keys(process.env).find(function(key) {
    return key.includes("svelte");
  });
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/Next.js
function nextWebDetect() {
  return windowExists() && window["next"] && typeof window["next"] === "object";
}
function nextSSRDetect() {
  return globalExists() && (keyPrefixMatch(global, "__next") || keyPrefixMatch(global, "__NEXT"));
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/Nuxt.js
function nuxtWebDetect() {
  return windowExists() && (window["__NUXT__"] !== void 0 || window["$nuxt"] !== void 0);
}
function nuxtSSRDetect() {
  return globalExists() && typeof global["__NUXT_PATHS__"] !== "undefined";
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/Angular.js
function angularWebDetect() {
  var angularVersionSetInDocument = Boolean(documentExists() && document.querySelector("[ng-version]"));
  var angularContentSetInWindow = Boolean(
    windowExists() && typeof window["ng"] !== "undefined"
  );
  return angularVersionSetInDocument || angularContentSetInWindow;
}
function angularSSRDetect() {
  var _a;
  return processExists() && typeof process.env === "object" && ((_a = process.env["npm_lifecycle_script"]) === null || _a === void 0 ? void 0 : _a.startsWith("ng ")) || false;
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/ReactNative.js
function reactNativeDetect() {
  return typeof navigator !== "undefined" && typeof navigator.product !== "undefined" && navigator.product === "ReactNative";
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/Expo.js
function expoDetect() {
  return globalExists() && typeof global["expo"] !== "undefined";
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/Web.js
function webDetect() {
  return windowExists();
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detection/index.js
var detectionMap = [
  { platform: Framework.Expo, detectionMethod: expoDetect },
  { platform: Framework.ReactNative, detectionMethod: reactNativeDetect },
  { platform: Framework.NextJs, detectionMethod: nextWebDetect },
  { platform: Framework.Nuxt, detectionMethod: nuxtWebDetect },
  { platform: Framework.Angular, detectionMethod: angularWebDetect },
  { platform: Framework.React, detectionMethod: reactWebDetect },
  { platform: Framework.VueJs, detectionMethod: vueWebDetect },
  { platform: Framework.Svelte, detectionMethod: svelteWebDetect },
  { platform: Framework.WebUnknown, detectionMethod: webDetect },
  { platform: Framework.NextJsSSR, detectionMethod: nextSSRDetect },
  { platform: Framework.NuxtSSR, detectionMethod: nuxtSSRDetect },
  { platform: Framework.ReactSSR, detectionMethod: reactSSRDetect },
  { platform: Framework.VueJsSSR, detectionMethod: vueSSRDetect },
  { platform: Framework.AngularSSR, detectionMethod: angularSSRDetect },
  { platform: Framework.SvelteSSR, detectionMethod: svelteSSRDetect }
];
function detect() {
  var _a;
  return ((_a = detectionMap.find(function(detectionEntry) {
    return detectionEntry.detectionMethod();
  })) === null || _a === void 0 ? void 0 : _a.platform) || Framework.ServerSideUnknown;
}

// node_modules/@aws-amplify/core/lib-esm/Platform/detectFramework.js
var frameworkCache;
var frameworkChangeObservers = [];
var resetTriggered = false;
var SSR_RESET_TIMEOUT = 10;
var WEB_RESET_TIMEOUT = 10;
var PRIME_FRAMEWORK_DELAY = 1e3;
var detectFramework = function() {
  if (!frameworkCache) {
    frameworkCache = detect();
    frameworkChangeObservers.forEach(function(fcn) {
      return fcn();
    });
    resetTimeout(Framework.ServerSideUnknown, SSR_RESET_TIMEOUT);
    resetTimeout(Framework.WebUnknown, WEB_RESET_TIMEOUT);
  }
  return frameworkCache;
};
var observeFrameworkChanges = function(fcn) {
  frameworkChangeObservers.push(fcn);
};
function clearCache() {
  frameworkCache = void 0;
}
function resetTimeout(framework, delay) {
  if (frameworkCache === framework && !resetTriggered) {
    setTimeout(function() {
      clearCache();
      resetTriggered = true;
      setTimeout(detectFramework, PRIME_FRAMEWORK_DELAY);
    }, delay);
  }
}

// node_modules/@aws-amplify/core/lib-esm/Platform/index.js
var __read3 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var BASE_USER_AGENT = "aws-amplify";
var PlatformBuilder = function() {
  function PlatformBuilder2() {
    this.userAgent = "".concat(BASE_USER_AGENT, "/").concat(version);
  }
  Object.defineProperty(PlatformBuilder2.prototype, "framework", {
    get: function() {
      return detectFramework();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(PlatformBuilder2.prototype, "isReactNative", {
    get: function() {
      return this.framework === Framework.ReactNative || this.framework === Framework.Expo;
    },
    enumerable: false,
    configurable: true
  });
  PlatformBuilder2.prototype.observeFrameworkChanges = function(fcn) {
    observeFrameworkChanges(fcn);
  };
  return PlatformBuilder2;
}();
var Platform = new PlatformBuilder();
var getAmplifyUserAgentObject = function(_a) {
  var _b = _a === void 0 ? {} : _a, category = _b.category, action = _b.action, framework = _b.framework;
  var userAgent = [[BASE_USER_AGENT, version]];
  if (category) {
    userAgent.push([category, action]);
  }
  userAgent.push(["framework", detectFramework()]);
  return userAgent;
};
var getAmplifyUserAgent = function(customUserAgentDetails) {
  var userAgent = getAmplifyUserAgentObject(customUserAgentDetails);
  var userAgentString = userAgent.map(function(_a) {
    var _b = __read3(_a, 2), agentKey = _b[0], agentValue = _b[1];
    return "".concat(agentKey, "/").concat(agentValue);
  }).join(" ");
  return userAgentString;
};

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/browser.js
var logger2 = new ConsoleLogger("ClientDevice_Browser");
function clientInfo() {
  if (typeof window === "undefined") {
    return {};
  }
  return browserClientInfo();
}
function browserClientInfo() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return {};
  }
  var nav = window.navigator;
  if (!nav) {
    logger2.warn("No navigator object available to get browser client info");
    return {};
  }
  var platform = nav.platform, product = nav.product, vendor = nav.vendor, userAgent = nav.userAgent, language = nav.language;
  var type = browserType(userAgent);
  var timezone = browserTimezone();
  return {
    platform,
    make: product || vendor,
    model: type.type,
    version: type.version,
    appVersion: [type.type, type.version].join("/"),
    language,
    timezone
  };
}
function dimension() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return { width: 320, height: 320 };
  }
  return {
    width: window.innerWidth,
    height: window.innerHeight
  };
}
function browserTimezone() {
  var tzMatch = /\(([A-Za-z\s].*)\)/.exec(new Date().toString());
  return tzMatch ? tzMatch[1] || "" : "";
}
function browserType(userAgent) {
  var operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9\.]+).*/i.exec(userAgent);
  if (operaMatch) {
    return { type: operaMatch[1], version: operaMatch[2] };
  }
  var ieMatch = /.+(Trident|Edge)\/([0-9\.]+).*/i.exec(userAgent);
  if (ieMatch) {
    return { type: ieMatch[1], version: ieMatch[2] };
  }
  var cfMatch = /.+(Chrome|Firefox|FxiOS)\/([0-9\.]+).*/i.exec(userAgent);
  if (cfMatch) {
    return { type: cfMatch[1], version: cfMatch[2] };
  }
  var sMatch = /.+(Safari)\/([0-9\.]+).*/i.exec(userAgent);
  if (sMatch) {
    return { type: sMatch[1], version: sMatch[2] };
  }
  var awkMatch = /.+(AppleWebKit)\/([0-9\.]+).*/i.exec(userAgent);
  if (awkMatch) {
    return { type: awkMatch[1], version: awkMatch[2] };
  }
  var anyMatch = /.*([A-Z]+)\/([0-9\.]+).*/i.exec(userAgent);
  if (anyMatch) {
    return { type: anyMatch[1], version: anyMatch[2] };
  }
  return { type: "", version: "" };
}

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/index.js
var ClientDevice = function() {
  function ClientDevice2() {
  }
  ClientDevice2.clientInfo = function() {
    return clientInfo();
  };
  ClientDevice2.dimension = function() {
    return dimension();
  };
  return ClientDevice2;
}();

// node_modules/@aws-amplify/core/lib-esm/Hub.js
var __assign = function() {
  __assign = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
var __read4 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
      if (ar || !(i3 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i3);
        ar[i3] = from[i3];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var logger3 = new ConsoleLogger("Hub");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
function isLegacyCallback(callback) {
  return callback.onHubCapsule !== void 0;
}
var HubClass = function() {
  function HubClass2(name) {
    this.listeners = [];
    this.patterns = [];
    this.protectedChannels = [
      "core",
      "auth",
      "api",
      "analytics",
      "interactions",
      "pubsub",
      "storage",
      "ui",
      "xr"
    ];
    this.name = name;
  }
  HubClass2.prototype._remove = function(channel, listener) {
    if (channel instanceof RegExp) {
      var pattern_1 = this.patterns.find(function(_a) {
        var pattern = _a.pattern;
        return pattern.source === channel.source;
      });
      if (!pattern_1) {
        logger3.warn("No listeners for ".concat(channel));
        return;
      }
      this.patterns = __spreadArray2([], __read4(this.patterns.filter(function(x2) {
        return x2 !== pattern_1;
      })), false);
    } else {
      var holder = this.listeners[channel];
      if (!holder) {
        logger3.warn("No listeners for ".concat(channel));
        return;
      }
      this.listeners[channel] = __spreadArray2([], __read4(holder.filter(function(_a) {
        var callback = _a.callback;
        return callback !== listener;
      })), false);
    }
  };
  HubClass2.prototype.remove = function(channel, listener) {
    this._remove(channel, listener);
  };
  HubClass2.prototype.dispatch = function(channel, payload, source, ampSymbol) {
    if (source === void 0) {
      source = "";
    }
    if (this.protectedChannels.indexOf(channel) > -1) {
      var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
      if (!hasAccess) {
        logger3.warn("WARNING: ".concat(channel, " is protected and dispatching on it can have unintended consequences"));
      }
    }
    var capsule = {
      channel,
      payload: __assign({}, payload),
      source,
      patternInfo: []
    };
    try {
      this._toListeners(capsule);
    } catch (e3) {
      logger3.error(e3);
    }
  };
  HubClass2.prototype.listen = function(channel, callback, listenerName) {
    var _this = this;
    if (listenerName === void 0) {
      listenerName = "noname";
    }
    var cb;
    if (isLegacyCallback(callback)) {
      logger3.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
      cb = callback.onHubCapsule.bind(callback);
    } else if (typeof callback !== "function") {
      throw new Error("No callback supplied to Hub");
    } else {
      cb = callback;
    }
    if (channel instanceof RegExp) {
      this.patterns.push({
        pattern: channel,
        callback: cb
      });
    } else {
      var holder = this.listeners[channel];
      if (!holder) {
        holder = [];
        this.listeners[channel] = holder;
      }
      holder.push({
        name: listenerName,
        callback: cb
      });
    }
    return function() {
      _this._remove(channel, cb);
    };
  };
  HubClass2.prototype._toListeners = function(capsule) {
    var channel = capsule.channel, payload = capsule.payload;
    var holder = this.listeners[channel];
    if (holder) {
      holder.forEach(function(listener) {
        logger3.debug("Dispatching to ".concat(channel, " with "), payload);
        try {
          listener.callback(capsule);
        } catch (e3) {
          logger3.error(e3);
        }
      });
    }
    if (this.patterns.length > 0) {
      if (!payload.message) {
        logger3.warn("Cannot perform pattern matching without a message key");
        return;
      }
      var payloadStr_1 = payload.message;
      this.patterns.forEach(function(pattern) {
        var match = payloadStr_1.match(pattern.pattern);
        if (match) {
          var _a = __read4(match), groups = _a.slice(1);
          var dispatchingCapsule = __assign(__assign({}, capsule), { patternInfo: groups });
          try {
            pattern.callback(dispatchingCapsule);
          } catch (e3) {
            logger3.error(e3);
          }
        }
      });
    }
  };
  return HubClass2;
}();
var Hub = new HubClass("__default__");

// node_modules/@aws-amplify/core/lib-esm/I18n/I18n.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign2.apply(this, arguments);
};
var logger4 = new ConsoleLogger("I18n");
var I18n = function() {
  function I18n3(options) {
    this._options = null;
    this._lang = null;
    this._dict = {};
    this._options = Object.assign({}, options);
    this._lang = this._options.language;
    if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
      this._lang = window.navigator.language;
    }
    logger4.debug(this._lang);
  }
  I18n3.prototype.setLanguage = function(lang) {
    this._lang = lang;
  };
  I18n3.prototype.get = function(key, defVal) {
    if (defVal === void 0) {
      defVal = void 0;
    }
    if (!this._lang) {
      return typeof defVal !== "undefined" ? defVal : key;
    }
    var lang = this._lang;
    var val2 = this.getByLanguage(key, lang);
    if (val2) {
      return val2;
    }
    if (lang.indexOf("-") > 0) {
      val2 = this.getByLanguage(key, lang.split("-")[0]);
    }
    if (val2) {
      return val2;
    }
    return typeof defVal !== "undefined" ? defVal : key;
  };
  I18n3.prototype.getByLanguage = function(key, language, defVal) {
    if (defVal === void 0) {
      defVal = null;
    }
    if (!language) {
      return defVal;
    }
    var lang_dict = this._dict[language];
    if (!lang_dict) {
      return defVal;
    }
    return lang_dict[key];
  };
  I18n3.prototype.putVocabulariesForLanguage = function(language, vocabularies) {
    var lang_dict = this._dict[language];
    if (!lang_dict) {
      lang_dict = this._dict[language] = {};
    }
    this._dict[language] = __assign2(__assign2({}, lang_dict), vocabularies);
  };
  I18n3.prototype.putVocabularies = function(vocabularies) {
    var _this = this;
    Object.keys(vocabularies).map(function(key) {
      _this.putVocabulariesForLanguage(key, vocabularies[key]);
    });
  };
  return I18n3;
}();

// node_modules/@aws-amplify/core/lib-esm/I18n/index.js
var logger5 = new ConsoleLogger("I18n");
var _config = null;
var _i18n = null;
var I18n2 = function() {
  function I18n3() {
  }
  I18n3.configure = function(config) {
    logger5.debug("configure I18n");
    if (!config) {
      return _config;
    }
    _config = Object.assign({}, _config, config.I18n || config);
    I18n3.createInstance();
    return _config;
  };
  I18n3.getModuleName = function() {
    return "I18n";
  };
  I18n3.createInstance = function() {
    logger5.debug("create I18n instance");
    if (_i18n) {
      return;
    }
    _i18n = new I18n(_config);
  };
  I18n3.setLanguage = function(lang) {
    I18n3.checkConfig();
    return _i18n.setLanguage(lang);
  };
  I18n3.get = function(key, defVal) {
    if (!I18n3.checkConfig()) {
      return typeof defVal === "undefined" ? key : defVal;
    }
    return _i18n.get(key, defVal);
  };
  I18n3.putVocabulariesForLanguage = function(language, vocabularies) {
    I18n3.checkConfig();
    return _i18n.putVocabulariesForLanguage(language, vocabularies);
  };
  I18n3.putVocabularies = function(vocabularies) {
    I18n3.checkConfig();
    return _i18n.putVocabularies(vocabularies);
  };
  I18n3.checkConfig = function() {
    if (!_i18n) {
      _i18n = new I18n(_config);
    }
    return true;
  };
  return I18n3;
}();
Amplify.register(I18n2);

// node_modules/@aws-amplify/core/lib-esm/JS.js
var makeQuerablePromise = function(promise) {
  if (promise.isResolved)
    return promise;
  var isPending = true;
  var isRejected = false;
  var isFullfilled = false;
  var result = promise.then(function(data) {
    isFullfilled = true;
    isPending = false;
    return data;
  }, function(e3) {
    isRejected = true;
    isPending = false;
    throw e3;
  });
  result.isFullfilled = function() {
    return isFullfilled;
  };
  result.isPending = function() {
    return isPending;
  };
  result.isRejected = function() {
    return isRejected;
  };
  return result;
};
var isWebWorker = function() {
  if (typeof self === "undefined") {
    return false;
  }
  var selfContext = self;
  return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};
var browserOrNode = function() {
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined";
  var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
  return {
    isBrowser: isBrowser2,
    isNode
  };
};

// node_modules/@aws-amplify/core/lib-esm/Util/Retry.js
var __extends = function() {
  var extendStatics3 = function(d3, b3) {
    extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
      d4.__proto__ = b4;
    } || function(d4, b4) {
      for (var p3 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p3))
          d4[p3] = b4[p3];
    };
    return extendStatics3(d3, b3);
  };
  return function(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics3(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read5 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
      if (ar || !(i3 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i3);
        ar[i3] = from[i3];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var logger6 = new ConsoleLogger("Util");
var NonRetryableError = function(_super) {
  __extends(NonRetryableError2, _super);
  function NonRetryableError2(message) {
    var _this = _super.call(this, message) || this;
    _this.nonRetryable = true;
    return _this;
  }
  return NonRetryableError2;
}(Error);
var isNonRetryableError = function(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, onTerminate) {
  return __awaiter(this, void 0, void 0, function() {
    var _this = this;
    return __generator(this, function(_a) {
      if (typeof functionToRetry !== "function") {
        throw Error("functionToRetry must be a function");
      }
      return [2, new Promise(function(resolve, reject) {
        return __awaiter(_this, void 0, void 0, function() {
          var attempt, terminated, timeout, wakeUp, lastError, _loop_1, state_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                attempt = 0;
                terminated = false;
                wakeUp = function() {
                };
                onTerminate && onTerminate.then(function() {
                  terminated = true;
                  clearTimeout(timeout);
                  wakeUp();
                });
                _loop_1 = function() {
                  var _b, _c, err_1, retryIn_1;
                  return __generator(this, function(_d) {
                    switch (_d.label) {
                      case 0:
                        attempt++;
                        logger6.debug("".concat(functionToRetry.name, " attempt #").concat(attempt, " with this vars: ").concat(JSON.stringify(args)));
                        _d.label = 1;
                      case 1:
                        _d.trys.push([1, 3, , 7]);
                        _b = {};
                        _c = resolve;
                        return [4, functionToRetry.apply(void 0, __spreadArray3([], __read5(args), false))];
                      case 2:
                        return [2, (_b.value = _c.apply(void 0, [_d.sent()]), _b)];
                      case 3:
                        err_1 = _d.sent();
                        lastError = err_1;
                        logger6.debug("error on ".concat(functionToRetry.name), err_1);
                        if (isNonRetryableError(err_1)) {
                          logger6.debug("".concat(functionToRetry.name, " non retryable error"), err_1);
                          return [2, { value: reject(err_1) }];
                        }
                        retryIn_1 = delayFn(attempt, args, err_1);
                        logger6.debug("".concat(functionToRetry.name, " retrying in ").concat(retryIn_1, " ms"));
                        if (!(retryIn_1 === false || terminated))
                          return [3, 4];
                        return [2, { value: reject(err_1) }];
                      case 4:
                        return [4, new Promise(function(r3) {
                          wakeUp = r3;
                          timeout = setTimeout(wakeUp, retryIn_1);
                        })];
                      case 5:
                        _d.sent();
                        _d.label = 6;
                      case 6:
                        return [3, 7];
                      case 7:
                        return [2];
                    }
                  });
                };
                _a2.label = 1;
              case 1:
                if (!!terminated)
                  return [3, 3];
                return [5, _loop_1()];
              case 2:
                state_1 = _a2.sent();
                if (typeof state_1 === "object")
                  return [2, state_1.value];
                return [3, 1];
              case 3:
                reject(lastError);
                return [2];
            }
          });
        });
      })];
    });
  });
}
var MAX_DELAY_MS = 5 * 60 * 1e3;
function jitteredBackoff(maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var jitteredExponentialRetry = function(functionToRetry, args, maxDelayMs, onTerminate) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs), onTerminate);
};

// node_modules/@aws-amplify/core/lib-esm/Util/Mutex.js
var Mutex = function() {
  function Mutex2() {
    this._queue = [];
    this._pending = false;
  }
  Mutex2.prototype.isLocked = function() {
    return this._pending;
  };
  Mutex2.prototype.acquire = function() {
    var _this = this;
    var ticket = new Promise(function(resolve) {
      return _this._queue.push(resolve);
    });
    if (!this._pending) {
      this._dispatchNext();
    }
    return ticket;
  };
  Mutex2.prototype.runExclusive = function(callback) {
    return this.acquire().then(function(release) {
      var result;
      try {
        result = callback();
      } catch (e3) {
        release();
        throw e3;
      }
      return Promise.resolve(result).then(function(x2) {
        return release(), x2;
      }, function(e3) {
        release();
        throw e3;
      });
    });
  };
  Mutex2.prototype._dispatchNext = function() {
    if (this._queue.length > 0) {
      this._pending = true;
      this._queue.shift()(this._dispatchNext.bind(this));
    } else {
      this._pending = false;
    }
  };
  return Mutex2;
}();

// node_modules/zen-observable-ts/lib/bundle.esm.js
var import_zen_observable = __toESM(require_zen_observable());
var Observable = import_zen_observable.default;
var bundle_esm_default = Observable;

// node_modules/@aws-amplify/core/lib-esm/Util/Reachability.js
var __values2 = function(o3) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
  if (m3)
    return m3.call(o3);
  if (o3 && typeof o3.length === "number")
    return {
      next: function() {
        if (o3 && i3 >= o3.length)
          o3 = void 0;
        return { value: o3 && o3[i3++], done: !o3 };
      }
    };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ReachabilityNavigator = function() {
  function ReachabilityNavigator2() {
  }
  ReachabilityNavigator2.prototype.networkMonitor = function(netInfo) {
    if (browserOrNode().isNode) {
      return bundle_esm_default.from([{ online: true }]);
    }
    var globalObj = isWebWorker() ? self : window;
    return new bundle_esm_default(function(observer) {
      observer.next({ online: globalObj.navigator.onLine });
      var notifyOnline = function() {
        return observer.next({ online: true });
      };
      var notifyOffline = function() {
        return observer.next({ online: false });
      };
      globalObj.addEventListener("online", notifyOnline);
      globalObj.addEventListener("offline", notifyOffline);
      ReachabilityNavigator2._observers.push(observer);
      return function() {
        globalObj.removeEventListener("online", notifyOnline);
        globalObj.removeEventListener("offline", notifyOffline);
        ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
          return _observer !== observer;
        });
      };
    });
  };
  ReachabilityNavigator2._observerOverride = function(status) {
    var e_1, _a;
    var _loop_1 = function(observer2) {
      if (observer2.closed) {
        ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
          return _observer !== observer2;
        });
        return "continue";
      }
      observer2.next(status);
    };
    try {
      for (var _b = __values2(ReachabilityNavigator2._observers), _c = _b.next(); !_c.done; _c = _b.next()) {
        var observer = _c.value;
        _loop_1(observer);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  ReachabilityNavigator2._observers = [];
  return ReachabilityNavigator2;
}();

// node_modules/@aws-amplify/core/lib-esm/Util/DateUtils.js
var __read6 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var FIVE_MINUTES_IN_MS = 1e3 * 60 * 5;
var DateUtils = {
  clockOffset: 0,
  getDateWithClockOffset: function() {
    if (DateUtils.clockOffset) {
      return new Date(new Date().getTime() + DateUtils.clockOffset);
    } else {
      return new Date();
    }
  },
  getClockOffset: function() {
    return DateUtils.clockOffset;
  },
  getHeaderStringFromDate: function(date) {
    if (date === void 0) {
      date = DateUtils.getDateWithClockOffset();
    }
    return date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
  },
  getDateFromHeaderString: function(header) {
    var _a = __read6(header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
  },
  isClockSkewed: function(serverDate) {
    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;
  },
  isClockSkewError: function(error) {
    if (!error.response || !error.response.headers) {
      return false;
    }
    var headers = error.response.headers;
    return Boolean(["BadRequestException", "InvalidSignatureException"].includes(headers["x-amzn-errortype"]) && (headers.date || headers.Date));
  },
  setClockOffset: function(offset) {
    DateUtils.clockOffset = offset;
  }
};

// node_modules/@aws-amplify/core/lib-esm/Util/BackgroundProcessManager.js
var __extends2 = function() {
  var extendStatics3 = function(d3, b3) {
    extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
      d4.__proto__ = b4;
    } || function(d4, b4) {
      for (var p3 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p3))
          d4[p3] = b4[p3];
    };
    return extendStatics3(d3, b3);
  };
  return function(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics3(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __values3 = function(o3) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
  if (m3)
    return m3.call(o3);
  if (o3 && typeof o3.length === "number")
    return {
      next: function() {
        if (o3 && i3 >= o3.length)
          o3 = void 0;
        return { value: o3 && o3[i3++], done: !o3 };
      }
    };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var BackgroundProcessManager = function() {
  function BackgroundProcessManager2() {
    this._state = BackgroundProcessManagerState.Open;
    this.jobs = /* @__PURE__ */ new Set();
  }
  BackgroundProcessManager2.prototype.add = function(jobOrDescription, optionalDescription) {
    var job;
    var description;
    if (typeof jobOrDescription === "string") {
      job = void 0;
      description = jobOrDescription;
    } else {
      job = jobOrDescription;
      description = optionalDescription;
    }
    var error = this.closedFailure(description);
    if (error)
      return error;
    if (job === void 0) {
      return this.addHook(description);
    } else if (typeof job === "function") {
      return this.addFunction(job, description);
    } else if (job instanceof BackgroundProcessManager2) {
      return this.addManager(job, description);
    } else {
      throw new Error("If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.");
    }
  };
  BackgroundProcessManager2.prototype.addCleaner = function(clean, description) {
    var _this = this;
    var _a = this.addHook(description), resolve = _a.resolve, onTerminate = _a.onTerminate;
    var proxy = function() {
      return __awaiter2(_this, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, clean()];
            case 1:
              _a2.sent();
              resolve();
              return [2];
          }
        });
      });
    };
    onTerminate.then(proxy);
    return proxy;
  };
  BackgroundProcessManager2.prototype.addFunction = function(job, description) {
    var terminate;
    var onTerminate = new Promise(function(resolve) {
      terminate = resolve;
    });
    var jobResult = job(onTerminate);
    if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === "function") {
      this.registerPromise(jobResult, terminate, description);
    }
    return jobResult;
  };
  BackgroundProcessManager2.prototype.addManager = function(manager, description) {
    var _this = this;
    this.addCleaner(function() {
      return __awaiter2(_this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, manager.close()];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    }, description);
  };
  BackgroundProcessManager2.prototype.addHook = function(description) {
    var resolve;
    var reject;
    var promise = new Promise(function(res, rej) {
      resolve = res;
      reject = rej;
    });
    var terminate;
    var onTerminate = new Promise(function(resolveTerminate) {
      terminate = resolveTerminate;
    });
    this.registerPromise(promise, terminate, description);
    return {
      resolve,
      reject,
      onTerminate
    };
  };
  BackgroundProcessManager2.prototype.registerPromise = function(promise, terminate, description) {
    var _this = this;
    var jobEntry = { promise, terminate, description };
    this.jobs.add(jobEntry);
    promise.then(function() {
      _this.jobs.delete(jobEntry);
    }).catch(function() {
      _this.jobs.delete(jobEntry);
    });
  };
  Object.defineProperty(BackgroundProcessManager2.prototype, "length", {
    get: function() {
      return this.jobs.size;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "state", {
    get: function() {
      return this._state;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "pending", {
    get: function() {
      return Array.from(this.jobs).map(function(job) {
        return job.description;
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "isOpen", {
    get: function() {
      return this._state === BackgroundProcessManagerState.Open;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "isClosing", {
    get: function() {
      return this._state === BackgroundProcessManagerState.Closing;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BackgroundProcessManager2.prototype, "isClosed", {
    get: function() {
      return this._state === BackgroundProcessManagerState.Closed;
    },
    enumerable: false,
    configurable: true
  });
  BackgroundProcessManager2.prototype.closedFailure = function(description) {
    if (!this.isOpen) {
      return Promise.reject(new BackgroundManagerNotOpenError([
        "The manager is ".concat(this.state, "."),
        'You tried to add "'.concat(description, '".'),
        "Pending jobs: [\n".concat(this.pending.map(function(t2) {
          return "    " + t2;
        }).join(",\n"), "\n]")
      ].join("\n")));
    }
  };
  BackgroundProcessManager2.prototype.close = function() {
    return __awaiter2(this, void 0, void 0, function() {
      var _a, _b, job;
      var e_1, _c;
      return __generator2(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!this.isOpen)
              return [3, 2];
            this._state = BackgroundProcessManagerState.Closing;
            try {
              for (_a = __values3(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {
                job = _b.value;
                try {
                  job.terminate();
                } catch (error) {
                  console.warn("Failed to send termination signal to job. Error: ".concat(error.message), job);
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_b && !_b.done && (_c = _a.return))
                  _c.call(_a);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function(j3) {
              return j3.promise;
            }));
            return [4, this._closingPromise];
          case 1:
            _d.sent();
            this._state = BackgroundProcessManagerState.Closed;
            _d.label = 2;
          case 2:
            return [2, this._closingPromise];
        }
      });
    });
  };
  BackgroundProcessManager2.prototype.open = function() {
    return __awaiter2(this, void 0, void 0, function() {
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.isClosing)
              return [3, 2];
            return [4, this.close()];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            this._state = BackgroundProcessManagerState.Open;
            return [2];
        }
      });
    });
  };
  return BackgroundProcessManager2;
}();
var BackgroundManagerNotOpenError = function(_super) {
  __extends2(BackgroundManagerNotOpenError2, _super);
  function BackgroundManagerNotOpenError2(message) {
    return _super.call(this, "BackgroundManagerNotOpenError: ".concat(message)) || this;
  }
  return BackgroundManagerNotOpenError2;
}(Error);
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState2) {
  BackgroundProcessManagerState2["Open"] = "Open";
  BackgroundProcessManagerState2["Closing"] = "Closing";
  BackgroundProcessManagerState2["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSignedHeaders.js
var getSignedHeaders = function(headers) {
  return Object.keys(headers).map(function(key) {
    return key.toLowerCase();
  }).sort().join(";");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/constants.js
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var HOST_HEADER = "host";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var KEY_TYPE_IDENTIFIER = "aws4_request";
var SHA256_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var SIGNATURE_IDENTIFIER = "AWS4";
var EMPTY_HASH = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCredentialScope.js
var getCredentialScope = function(date, region, service) {
  return "".concat(date, "/").concat(region, "/").concat(service, "/").concat(KEY_TYPE_IDENTIFIER);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getFormattedDates.js
var getFormattedDates = function(date) {
  var longDate = date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
  return {
    longDate,
    shortDate: longDate.slice(0, 8)
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSigningValues.js
var getSigningValues = function(_a) {
  var credentials = _a.credentials, _b = _a.signingDate, signingDate = _b === void 0 ? new Date() : _b, signingRegion = _a.signingRegion, signingService = _a.signingService;
  var accessKeyId = credentials.accessKeyId, secretAccessKey = credentials.secretAccessKey, sessionToken = credentials.sessionToken;
  var _c = getFormattedDates(signingDate), longDate = _c.longDate, shortDate = _c.shortDate;
  var credentialScope = getCredentialScope(shortDate, signingRegion, signingService);
  return {
    accessKeyId,
    credentialScope,
    longDate,
    secretAccessKey,
    sessionToken,
    shortDate,
    signingRegion,
    signingService
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/dataHashHelpers.js
var import_sha256_js = __toESM(require_build12());

// node_modules/@aws-sdk/util-hex-encoding/dist/es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (i3 = 0; i3 < 256; i3++) {
  encodedByte = i3.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = "0" + encodedByte;
  }
  SHORT_TO_HEX[i3] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i3;
}
var encodedByte;
var i3;
function toHex(bytes) {
  var out = "";
  for (var i3 = 0; i3 < bytes.byteLength; i3++) {
    out += SHORT_TO_HEX[bytes[i3]];
  }
  return out;
}

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/dataHashHelpers.js
var getHashedData = function(key, data) {
  var sha256 = new import_sha256_js.Sha256(key);
  sha256.update(data);
  var hashedData = sha256.digestSync();
  return hashedData;
};
var getHashedDataAsHex = function(key, data) {
  var hashedData = getHashedData(key, data);
  return toHex(hashedData);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalHeaders.js
var __read7 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var getCanonicalHeaders = function(headers) {
  return Object.entries(headers).map(function(_a) {
    var _b;
    var _c = __read7(_a, 2), key = _c[0], value = _c[1];
    return {
      key: key.toLowerCase(),
      value: (_b = value === null || value === void 0 ? void 0 : value.trim().replace(/\s+/g, " ")) !== null && _b !== void 0 ? _b : ""
    };
  }).sort(function(a3, b3) {
    return a3.key < b3.key ? -1 : 1;
  }).map(function(entry) {
    return "".concat(entry.key, ":").concat(entry.value, "\n");
  }).join("");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalQueryString.js
var __read8 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var getCanonicalQueryString = function(searchParams) {
  return Array.from(searchParams).sort(function(_a, _b) {
    var _c = __read8(_a, 2), keyA = _c[0], valA = _c[1];
    var _d = __read8(_b, 2), keyB = _d[0], valB = _d[1];
    if (keyA === keyB) {
      return valA < valB ? -1 : 1;
    }
    return keyA < keyB ? -1 : 1;
  }).map(function(_a) {
    var _b = __read8(_a, 2), key = _b[0], val2 = _b[1];
    return "".concat(escapeUri(key), "=").concat(escapeUri(val2));
  }).join("&");
};
var escapeUri = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c3) {
  return "%".concat(c3.charCodeAt(0).toString(16).toUpperCase());
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalUri.js
var getCanonicalUri = function(pathname) {
  return pathname ? encodeURIComponent(pathname).replace(/%2F/g, "/") : "/";
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getHashedPayload.js
var getHashedPayload = function(body) {
  if (body == null) {
    return EMPTY_HASH;
  }
  if (isSourceData(body)) {
    var hashedData = getHashedDataAsHex(null, body);
    return hashedData;
  }
  return UNSIGNED_PAYLOAD;
};
var isSourceData = function(body) {
  return typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body);
};
var isArrayBuffer = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.js
var getCanonicalRequest = function(_a) {
  var body = _a.body, headers = _a.headers, method = _a.method, url = _a.url;
  return [
    method,
    getCanonicalUri(url.pathname),
    getCanonicalQueryString(url.searchParams),
    getCanonicalHeaders(headers),
    getSignedHeaders(headers),
    getHashedPayload(body)
  ].join("\n");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSigningKey.js
var getSigningKey = function(secretAccessKey, date, region, service) {
  var key = "".concat(SIGNATURE_IDENTIFIER).concat(secretAccessKey);
  var dateKey = getHashedData(key, date);
  var regionKey = getHashedData(dateKey, region);
  var serviceKey = getHashedData(regionKey, service);
  var signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);
  return signingKey;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getStringToSign.js
var getStringToSign = function(date, credentialScope, hashedRequest) {
  return [SHA256_ALGORITHM_IDENTIFIER, date, credentialScope, hashedRequest].join("\n");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSignature.js
var getSignature = function(request, _a) {
  var credentialScope = _a.credentialScope, longDate = _a.longDate, secretAccessKey = _a.secretAccessKey, shortDate = _a.shortDate, signingRegion = _a.signingRegion, signingService = _a.signingService;
  var canonicalRequest = getCanonicalRequest(request);
  var hashedRequest = getHashedDataAsHex(null, canonicalRequest);
  var stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);
  var signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);
  return signature;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/signRequest.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign3.apply(this, arguments);
};
var signRequest = function(request, options) {
  var signingValues = getSigningValues(options);
  var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;
  var headers = __assign3({}, request.headers);
  headers[HOST_HEADER] = request.url.host;
  headers[AMZ_DATE_HEADER] = longDate;
  if (sessionToken) {
    headers[TOKEN_HEADER] = sessionToken;
  }
  var requestToSign = __assign3(__assign3({}, request), { headers });
  var signature = getSignature(requestToSign, signingValues);
  var credentialEntry = "Credential=".concat(accessKeyId, "/").concat(credentialScope);
  var signedHeadersEntry = "SignedHeaders=".concat(getSignedHeaders(headers));
  var signatureEntry = "Signature=".concat(signature);
  headers[AUTH_HEADER] = "".concat(SHA256_ALGORITHM_IDENTIFIER, " ").concat(credentialEntry, ", ").concat(signedHeadersEntry, ", ").concat(signatureEntry);
  return requestToSign;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/presignUrl.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign4.apply(this, arguments);
};
var __rest = function(s3, e3) {
  var t2 = {};
  for (var p3 in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
      t2[p3] = s3[p3];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
      if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
        t2[p3[i3]] = s3[p3[i3]];
    }
  return t2;
};
var __read9 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var presignUrl = function(_a, _b) {
  var _c, _d, _e, _f;
  var body = _a.body, _g = _a.method, method = _g === void 0 ? "GET" : _g, url = _a.url;
  var expiration = _b.expiration, options = __rest(_b, ["expiration"]);
  var signingValues = getSigningValues(options);
  var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;
  var presignedUrl = new URL(url);
  Object.entries(__assign4(__assign4((_c = {}, _c[ALGORITHM_QUERY_PARAM] = SHA256_ALGORITHM_IDENTIFIER, _c[CREDENTIAL_QUERY_PARAM] = "".concat(accessKeyId, "/").concat(credentialScope), _c[AMZ_DATE_QUERY_PARAM] = longDate, _c[SIGNED_HEADERS_QUERY_PARAM] = HOST_HEADER, _c), expiration && (_d = {}, _d[EXPIRES_QUERY_PARAM] = expiration.toString(), _d)), sessionToken && (_e = {}, _e[TOKEN_QUERY_PARAM] = sessionToken, _e))).forEach(function(_a2) {
    var _b2 = __read9(_a2, 2), key = _b2[0], value = _b2[1];
    presignedUrl.searchParams.append(key, value);
  });
  var requestToSign = {
    body,
    headers: (_f = {}, _f[HOST_HEADER] = url.host, _f),
    method,
    url: presignedUrl
  };
  var signature = getSignature(requestToSign, signingValues);
  presignedUrl.searchParams.append(SIGNATURE_QUERY_PARAM, signature);
  return presignedUrl;
};

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign5.apply(this, arguments);
};
var IOT_SERVICE_NAME = "iotdevicegateway";
var AWS_ENDPOINT_REGEX = /([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(.cn)?$/;
var Signer = function() {
  function Signer2() {
  }
  Signer2.sign = function(request, accessInfo, serviceInfo) {
    request.headers = request.headers || {};
    if (request.body && !request.data) {
      throw new Error('The attribute "body" was found on the request object. Please use the attribute "data" instead.');
    }
    var requestToSign = __assign5(__assign5({}, request), { body: request.data, url: new URL(request.url) });
    var options = getOptions(requestToSign, accessInfo, serviceInfo);
    var signedRequest = signRequest(requestToSign, options);
    signedRequest.url = signedRequest.url.toString();
    signedRequest.headers.Authorization = signedRequest.headers.authorization;
    signedRequest.headers["X-Amz-Security-Token"] = signedRequest.headers["x-amz-security-token"];
    delete signedRequest.headers.authorization;
    delete signedRequest.headers["x-amz-security-token"];
    return signedRequest;
  };
  Signer2.signUrl = function(urlOrRequest, accessInfo, serviceInfo, expiration) {
    var urlToSign = typeof urlOrRequest === "object" ? urlOrRequest.url : urlOrRequest;
    var method = typeof urlOrRequest === "object" ? urlOrRequest.method : "GET";
    var body = typeof urlOrRequest === "object" ? urlOrRequest.body : void 0;
    var presignable = {
      body,
      method,
      url: new URL(urlToSign)
    };
    var options = getOptions(presignable, accessInfo, serviceInfo, expiration);
    var signedUrl = presignUrl(presignable, options);
    if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) {
      signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);
    }
    return signedUrl.toString();
  };
  return Signer2;
}();
var getOptions = function(request, accessInfo, serviceInfo, expiration) {
  var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {}, access_key = _a.access_key, secret_key = _a.secret_key, session_token = _a.session_token;
  var _b = parseServiceInfo(request.url), urlRegion = _b.region, urlService = _b.service;
  var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {}, _d = _c.region, region = _d === void 0 ? urlRegion : _d, _e = _c.service, service = _e === void 0 ? urlService : _e;
  var credentials = __assign5({ accessKeyId: access_key, secretAccessKey: secret_key }, sessionTokenRequiredInSigning(service) ? { sessionToken: session_token } : {});
  return __assign5({ credentials, signingDate: DateUtils.getDateWithClockOffset(), signingRegion: region, signingService: service }, expiration && { expiration });
};
var parseServiceInfo = function(url) {
  var _a;
  var host = url.host;
  var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];
  var parsed = matched.slice(1, 3);
  if (parsed[1] === "es") {
    parsed = parsed.reverse();
  }
  return {
    service: parsed[0],
    region: parsed[1]
  };
};
var sessionTokenRequiredInSigning = function(service) {
  return service !== IOT_SERVICE_NAME;
};

// node_modules/@aws-amplify/core/lib-esm/parseAWSExports.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign6.apply(this, arguments);
};
var logger7 = new ConsoleLogger("Parser");
var parseAWSExports = function(config) {
  var amplifyConfig = {};
  if (config["aws_mobile_analytics_app_id"]) {
    var Analytics = {
      AWSPinpoint: {
        appId: config["aws_mobile_analytics_app_id"],
        region: config["aws_mobile_analytics_app_region"]
      }
    };
    amplifyConfig.Analytics = Analytics;
  }
  if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) {
    amplifyConfig.Auth = {
      userPoolId: config["aws_user_pools_id"],
      userPoolWebClientId: config["aws_user_pools_web_client_id"],
      region: config["aws_cognito_region"],
      identityPoolId: config["aws_cognito_identity_pool_id"],
      identityPoolRegion: config["aws_cognito_region"],
      mandatorySignIn: config["aws_mandatory_sign_in"] === "enable",
      signUpVerificationMethod: config["aws_cognito_sign_up_verification_method"] || "code"
    };
  }
  var storageConfig;
  if (config["aws_user_files_s3_bucket"]) {
    storageConfig = {
      AWSS3: {
        bucket: config["aws_user_files_s3_bucket"],
        region: config["aws_user_files_s3_bucket_region"],
        dangerouslyConnectToHttpEndpointForTesting: config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"]
      }
    };
  } else {
    storageConfig = config ? config.Storage || config : {};
  }
  if (config["Logging"]) {
    amplifyConfig.Logging = __assign6(__assign6({}, config["Logging"]), { region: config["aws_project_region"] });
  }
  if (config["geo"]) {
    amplifyConfig.Geo = Object.assign({}, config.geo);
    if (config.geo["amazon_location_service"]) {
      amplifyConfig.Geo = {
        AmazonLocationService: config.geo["amazon_location_service"]
      };
    }
  }
  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
  amplifyConfig.Storage = Object.assign({}, storageConfig);
  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
  logger7.debug("parse config", config, "to amplifyconfig", amplifyConfig);
  return amplifyConfig;
};

// node_modules/@aws-sdk/client-cloudwatch-logs/node_modules/tslib/tslib.es6.js
var extendStatics = function(d3, b3) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
    d4.__proto__ = b4;
  } || function(d4, b4) {
    for (var p3 in b4)
      if (Object.prototype.hasOwnProperty.call(b4, p3))
        d4[p3] = b4[p3];
  };
  return extendStatics(d3, b3);
};
function __extends3(d3, b3) {
  if (typeof b3 !== "function" && b3 !== null)
    throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
  extendStatics(d3, b3);
  function __() {
    this.constructor = d3;
  }
  d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
}
var __assign7 = function() {
  __assign7 = Object.assign || function __assign15(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign7.apply(this, arguments);
};
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator3(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read10(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/package.json
var package_default3 = {
  name: "@aws-sdk/client-cloudwatch-logs",
  description: "AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    test: "exit 0",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cloudwatch-logs"
  }
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var import_sha256_browser3 = __toESM(require_build15());

// node_modules/tslib/tslib.es6.js
var extendStatics2 = function(d3, b3) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
    d4.__proto__ = b4;
  } || function(d4, b4) {
    for (var p3 in b4)
      if (b4.hasOwnProperty(p3))
        d4[p3] = b4[p3];
  };
  return extendStatics2(d3, b3);
};
function __extends4(d3, b3) {
  extendStatics2(d3, b3);
  function __() {
    this.constructor = d3;
  }
  d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
}
var __assign8 = function() {
  __assign8 = Object.assign || function __assign15(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign8.apply(this, arguments);
};
function __rest2(s3, e3) {
  var t2 = {};
  for (var p3 in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
      t2[p3] = s3[p3];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
      if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
        t2[p3[i3]] = s3[p3[i3]];
    }
  return t2;
}
function __awaiter4(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator4(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values4(o3) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
  if (m3)
    return m3.call(o3);
  if (o3 && typeof o3.length === "number")
    return {
      next: function() {
        if (o3 && i3 >= o3.length)
          o3 = void 0;
        return { value: o3 && o3[i3++], done: !o3 };
      }
    };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read11(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
    ar = ar.concat(__read11(arguments[i3]));
  return ar;
}

// node_modules/@aws-sdk/protocol-http/dist/es/httpResponse.js
var HttpResponse2 = function() {
  function HttpResponse3(options) {
    this.statusCode = options.statusCode;
    this.headers = options.headers || {};
    this.body = options.body;
  }
  HttpResponse3.isInstance = function(response) {
    if (!response)
      return false;
    var resp = response;
    return typeof resp.statusCode === "number" && typeof resp.headers === "object";
  };
  return HttpResponse3;
}();

// node_modules/@aws-sdk/protocol-http/dist/es/httpRequest.js
var HttpRequest2 = function() {
  function HttpRequest3(options) {
    this.method = options.method || "GET";
    this.hostname = options.hostname || "localhost";
    this.port = options.port;
    this.query = options.query || {};
    this.headers = options.headers || {};
    this.body = options.body;
    this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
    this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
  }
  HttpRequest3.isInstance = function(request) {
    if (!request)
      return false;
    var req = request;
    return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
  };
  HttpRequest3.prototype.clone = function() {
    var cloned = new HttpRequest3(__assign8(__assign8({}, this), { headers: __assign8({}, this.headers) }));
    if (cloned.query)
      cloned.query = cloneQuery(cloned.query);
    return cloned;
  };
  return HttpRequest3;
}();
function cloneQuery(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign8(__assign8({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/util-uri-escape/dist/es/escape-uri.js
var escapeUri2 = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode2);
};
var hexEncode2 = function(c3) {
  return "%" + c3.charCodeAt(0).toString(16).toUpperCase();
};

// node_modules/@aws-sdk/querystring-builder/dist/es/index.js
function buildQueryString(query) {
  var e_1, _a;
  var parts = [];
  try {
    for (var _b = __values4(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var value = query[key];
      key = escapeUri2(key);
      if (Array.isArray(value)) {
        for (var i3 = 0, iLen = value.length; i3 < iLen; i3++) {
          parts.push(key + "=" + escapeUri2(value[i3]));
        }
      } else {
        var qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += "=" + escapeUri2(value);
        }
        parts.push(qsEntry);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return parts.join("&");
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/request-timeout.js
function requestTimeout(timeoutInMs) {
  if (timeoutInMs === void 0) {
    timeoutInMs = 0;
  }
  return new Promise(function(resolve, reject) {
    if (timeoutInMs) {
      setTimeout(function() {
        var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/fetch-http-handler.js
var FetchHttpHandler2 = function() {
  function FetchHttpHandler3(_a) {
    var _b = _a === void 0 ? {} : _a, requestTimeout2 = _b.requestTimeout;
    this.requestTimeout = requestTimeout2;
  }
  FetchHttpHandler3.prototype.destroy = function() {
  };
  FetchHttpHandler3.prototype.handle = function(request, _a) {
    var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
    var requestTimeoutInMs = this.requestTimeout;
    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
      var abortError = new Error("Request aborted");
      abortError.name = "AbortError";
      return Promise.reject(abortError);
    }
    var path = request.path;
    if (request.query) {
      var queryString = buildQueryString(request.query);
      if (queryString) {
        path += "?" + queryString;
      }
    }
    var port = request.port, method = request.method;
    var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
    var body = method === "GET" || method === "HEAD" ? void 0 : request.body;
    var requestOptions = {
      body,
      headers: new Headers(request.headers),
      method
    };
    if (typeof AbortController !== "undefined") {
      requestOptions["signal"] = abortSignal;
    }
    var fetchRequest = new Request(url, requestOptions);
    var raceOfPromises = [
      fetch(fetchRequest).then(function(response) {
        var e_1, _a2;
        var fetchHeaders = response.headers;
        var transformedHeaders = {};
        try {
          for (var _b2 = __values4(fetchHeaders.entries()), _c = _b2.next(); !_c.done; _c = _b2.next()) {
            var pair = _c.value;
            transformedHeaders[pair[0]] = pair[1];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b2.return))
              _a2.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var hasReadableStream = response.body !== void 0;
        if (!hasReadableStream) {
          return response.blob().then(function(body2) {
            return {
              response: new HttpResponse2({
                headers: transformedHeaders,
                statusCode: response.status,
                body: body2
              })
            };
          });
        }
        return {
          response: new HttpResponse2({
            headers: transformedHeaders,
            statusCode: response.status,
            body: response.body
          })
        };
      }),
      requestTimeout(requestTimeoutInMs)
    ];
    if (abortSignal) {
      raceOfPromises.push(new Promise(function(resolve, reject) {
        abortSignal.onabort = function() {
          var abortError2 = new Error("Request aborted");
          abortError2.name = "AbortError";
          reject(abortError2);
        };
      }));
    }
    return Promise.race(raceOfPromises);
  };
  return FetchHttpHandler3;
}();

// node_modules/@aws-sdk/util-base64-browser/dist/es/index.js
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for (i3 = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i3 + start <= limit; i3++) {
  char = String.fromCharCode(i3 + start);
  alphabetByEncoding[char] = i3;
  alphabetByValue[i3] = char;
}
var char;
var i3;
var start;
var limit;
for (i3 = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i3 + start <= limit; i3++) {
  char = String.fromCharCode(i3 + start);
  index = i3 + 26;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i3;
var start;
var limit;
for (i3 = 0; i3 < 10; i3++) {
  alphabetByEncoding[i3.toString(10)] = i3 + 52;
  char = i3.toString(10);
  index = i3 + 52;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i3;
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase642(input) {
  var totalByteLength = input.length / 4 * 3;
  if (input.substr(-2) === "==") {
    totalByteLength -= 2;
  } else if (input.substr(-1) === "=") {
    totalByteLength--;
  }
  var out = new ArrayBuffer(totalByteLength);
  var dataView = new DataView(out);
  for (var i3 = 0; i3 < input.length; i3 += 4) {
    var bits = 0;
    var bitLength = 0;
    for (var j3 = i3, limit = i3 + 3; j3 <= limit; j3++) {
      if (input[j3] !== "=") {
        bits |= alphabetByEncoding[input[j3]] << (limit - j3) * bitsPerLetter;
        bitLength += bitsPerLetter;
      } else {
        bits >>= bitsPerLetter;
      }
    }
    var chunkOffset = i3 / 4 * 3;
    bits >>= bitLength % bitsPerByte;
    var byteLength = Math.floor(bitLength / bitsPerByte);
    for (var k3 = 0; k3 < byteLength; k3++) {
      var offset = (byteLength - k3 - 1) * bitsPerByte;
      dataView.setUint8(chunkOffset + k3, (bits & 255 << offset) >> offset);
    }
  }
  return new Uint8Array(out);
}
function toBase642(input) {
  var str = "";
  for (var i3 = 0; i3 < input.length; i3 += 3) {
    var bits = 0;
    var bitLength = 0;
    for (var j3 = i3, limit = Math.min(i3 + 3, input.length); j3 < limit; j3++) {
      bits |= input[j3] << (limit - j3 - 1) * bitsPerByte;
      bitLength += bitsPerByte;
    }
    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
    bits <<= bitClusterCount * bitsPerLetter - bitLength;
    for (var k3 = 1; k3 <= bitClusterCount; k3++) {
      var offset = (bitClusterCount - k3) * bitsPerLetter;
      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/stream-collector.js
var streamCollector2 = function(stream) {
  if (typeof Blob === "function" && stream instanceof Blob) {
    return collectBlob(stream);
  }
  return collectStream(stream);
};
function collectBlob(blob) {
  return __awaiter4(this, void 0, void 0, function() {
    var base64, arrayBuffer;
    return __generator4(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readToBase64(blob)];
        case 1:
          base64 = _a.sent();
          arrayBuffer = fromBase642(base64);
          return [2, new Uint8Array(arrayBuffer)];
      }
    });
  });
}
function collectStream(stream) {
  return __awaiter4(this, void 0, void 0, function() {
    var res, reader, isDone, _a, done, value, prior;
    return __generator4(this, function(_b) {
      switch (_b.label) {
        case 0:
          res = new Uint8Array(0);
          reader = stream.getReader();
          isDone = false;
          _b.label = 1;
        case 1:
          if (!!isDone)
            return [3, 3];
          return [4, reader.read()];
        case 2:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (value) {
            prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
          }
          isDone = done;
          return [3, 1];
        case 3:
          return [2, res];
      }
    });
  });
}
function readToBase64(blob) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onloadend = function() {
      var _a;
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
      var commaIndex = result.indexOf(",");
      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = function() {
      return reject(new Error("Read aborted"));
    };
    reader.onerror = function() {
      return reject(reader.error);
    };
    reader.readAsDataURL(blob);
  });
}

// node_modules/@aws-sdk/invalid-dependency/dist/es/invalidProvider.js
var invalidProvider2 = function(message) {
  return function() {
    return Promise.reject(message);
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryMiddleware.js
var retryMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var _a;
        return __generator4(this, function(_b) {
          if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode)
            context.userAgent = __spread(context.userAgent || [], [["cfg/retry-mode", options.retryStrategy.mode]]);
          return [2, options.retryStrategy.retry(next, args)];
        });
      });
    };
  };
};
var retryMiddlewareOptions = {
  name: "retryMiddleware",
  tags: ["RETRY"],
  step: "finalizeRequest",
  priority: "high",
  override: true
};
var getRetryPlugin2 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/constants.js
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20 * 1e3;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

// node_modules/@aws-sdk/service-error-classification/dist/es/constants.js
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException",
  "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

// node_modules/@aws-sdk/service-error-classification/dist/es/index.js
var isRetryableByTrait = function(error) {
  return error.$retryable !== void 0;
};
var isClockSkewError = function(error) {
  return CLOCK_SKEW_ERROR_CODES.includes(error.name);
};
var isThrottlingError = function(error) {
  var _a, _b;
  return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
  var _a;
  return TRANSIENT_ERROR_CODES.includes(error.name) || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var import_uuid = __toESM(require_uuid());

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultRetryQuota.js
var getDefaultRetryQuota = function(initialRetryTokens) {
  var MAX_CAPACITY = initialRetryTokens;
  var availableCapacity = initialRetryTokens;
  var getCapacityAmount = function(error) {
    return error.name === "TimeoutError" ? TIMEOUT_RETRY_COST : RETRY_COST;
  };
  var hasRetryTokens = function(error) {
    return getCapacityAmount(error) <= availableCapacity;
  };
  var retrieveRetryTokens = function(error) {
    if (!hasRetryTokens(error)) {
      throw new Error("No retry token available");
    }
    var capacityAmount = getCapacityAmount(error);
    availableCapacity -= capacityAmount;
    return capacityAmount;
  };
  var releaseRetryTokens = function(capacityReleaseAmount) {
    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;
    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
  };
  return Object.freeze({
    hasRetryTokens,
    retrieveRetryTokens,
    releaseRetryTokens
  });
};

// node_modules/@aws-sdk/middleware-retry/dist/es/delayDecider.js
var defaultDelayDecider = function(delayBase, attempts) {
  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryDecider.js
var defaultRetryDecider = function(error) {
  if (!error) {
    return false;
  }
  return isRetryableByTrait(error) || isClockSkewError(error) || isThrottlingError(error) || isTransientError(error);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var DEFAULT_MAX_ATTEMPTS2 = 3;
var DEFAULT_RETRY_MODE2 = "standard";
var StandardRetryStrategy = function() {
  function StandardRetryStrategy2(maxAttemptsProvider, options) {
    var _a, _b, _c;
    this.maxAttemptsProvider = maxAttemptsProvider;
    this.mode = DEFAULT_RETRY_MODE2;
    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;
    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;
    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
  }
  StandardRetryStrategy2.prototype.shouldRetry = function(error, attempts, maxAttempts) {
    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
  };
  StandardRetryStrategy2.prototype.getMaxAttempts = function() {
    return __awaiter4(this, void 0, void 0, function() {
      var maxAttempts, error_1;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, this.maxAttemptsProvider()];
          case 1:
            maxAttempts = _a.sent();
            return [3, 3];
          case 2:
            error_1 = _a.sent();
            maxAttempts = DEFAULT_MAX_ATTEMPTS2;
            return [3, 3];
          case 3:
            return [2, maxAttempts];
        }
      });
    });
  };
  StandardRetryStrategy2.prototype.retry = function(next, args) {
    return __awaiter4(this, void 0, void 0, function() {
      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            attempts = 0;
            totalDelay = 0;
            return [4, this.getMaxAttempts()];
          case 1:
            maxAttempts = _a.sent();
            request = args.request;
            if (HttpRequest2.isInstance(request)) {
              request.headers[INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
            }
            _loop_1 = function() {
              var _a2, response, output, err_1, delay_1;
              return __generator4(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    _b.trys.push([0, 2, , 5]);
                    if (HttpRequest2.isInstance(request)) {
                      request.headers[REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                    }
                    return [4, next(args)];
                  case 1:
                    _a2 = _b.sent(), response = _a2.response, output = _a2.output;
                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                    output.$metadata.attempts = attempts + 1;
                    output.$metadata.totalRetryDelay = totalDelay;
                    return [2, { value: { response, output } }];
                  case 2:
                    err_1 = _b.sent();
                    attempts++;
                    if (!this_1.shouldRetry(err_1, attempts, maxAttempts))
                      return [3, 4];
                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                    delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                    totalDelay += delay_1;
                    return [4, new Promise(function(resolve) {
                      return setTimeout(resolve, delay_1);
                    })];
                  case 3:
                    _b.sent();
                    return [2, "continue"];
                  case 4:
                    if (!err_1.$metadata) {
                      err_1.$metadata = {};
                    }
                    err_1.$metadata.attempts = attempts;
                    err_1.$metadata.totalRetryDelay = totalDelay;
                    throw err_1;
                  case 5:
                    return [2];
                }
              });
            };
            this_1 = this;
            _a.label = 2;
          case 2:
            if (false)
              return [3, 4];
            return [5, _loop_1()];
          case 3:
            state_1 = _a.sent();
            if (typeof state_1 === "object")
              return [2, state_1.value];
            return [3, 2];
          case 4:
            return [2];
        }
      });
    });
  };
  return StandardRetryStrategy2;
}();

// node_modules/@aws-sdk/middleware-retry/dist/es/configurations.js
var resolveRetryConfig2 = function(input) {
  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
  return __assign8(__assign8({}, input), { maxAttempts, retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts) });
};
var normalizeMaxAttempts = function(maxAttempts) {
  if (maxAttempts === void 0) {
    maxAttempts = DEFAULT_MAX_ATTEMPTS2;
  }
  if (typeof maxAttempts === "number") {
    var promisified_1 = Promise.resolve(maxAttempts);
    return function() {
      return promisified_1;
    };
  }
  return maxAttempts;
};

// node_modules/@aws-sdk/util-body-length-browser/dist/es/index.js
function calculateBodyLength2(body) {
  if (typeof body === "string") {
    var len = body.length;
    for (var i3 = len - 1; i3 >= 0; i3--) {
      var code = body.charCodeAt(i3);
      if (code > 127 && code <= 2047)
        len++;
      else if (code > 2047 && code <= 65535)
        len += 2;
    }
    return len;
  } else if (typeof body.byteLength === "number") {
    return body.byteLength;
  } else if (typeof body.size === "number") {
    return body.size;
  }
}

// node_modules/@aws-sdk/util-user-agent-browser/dist/es/index.js
var defaultUserAgent3 = function(_a) {
  var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
  return function() {
    return __awaiter4(void 0, void 0, void 0, function() {
      var parsedUA, sections;
      var _a2, _b, _c, _d, _e, _f, _g;
      return __generator4(this, function(_h) {
        parsedUA = ((_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
        sections = [
          ["aws-sdk-js", clientVersion],
          ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
          ["lang/js"],
          ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")]
        ];
        if (serviceId) {
          sections.push(["api/" + serviceId, clientVersion]);
        }
        return [2, sections];
      });
    });
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
var fromUtf82 = function(input) {
  var bytes = [];
  for (var i3 = 0, len = input.length; i3 < len; i3++) {
    var value = input.charCodeAt(i3);
    if (value < 128) {
      bytes.push(value);
    } else if (value < 2048) {
      bytes.push(value >> 6 | 192, value & 63 | 128);
    } else if (i3 + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i3 + 1) & 64512) === 56320) {
      var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i3) & 1023);
      bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
    } else {
      bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
    }
  }
  return Uint8Array.from(bytes);
};
var toUtf82 = function(input) {
  var decoded = "";
  for (var i3 = 0, len = input.length; i3 < len; i3++) {
    var byte = input[i3];
    if (byte < 128) {
      decoded += String.fromCharCode(byte);
    } else if (192 <= byte && byte < 224) {
      var nextByte = input[++i3];
      decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
    } else if (240 <= byte && byte < 365) {
      var surrogatePair = [byte, input[++i3], input[++i3], input[++i3]];
      var encoded = "%" + surrogatePair.map(function(byteValue) {
        return byteValue.toString(16);
      }).join("%");
      decoded += decodeURIComponent(encoded);
    } else {
      decoded += String.fromCharCode((byte & 15) << 12 | (input[++i3] & 63) << 6 | input[++i3] & 63);
    }
  }
  return decoded;
};

// node_modules/@aws-sdk/client-cloudwatch-logs/node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
function fromUtf83(input) {
  return new TextEncoder().encode(input);
}
function toUtf83(input) {
  return new TextDecoder("utf-8").decode(input);
}

// node_modules/@aws-sdk/client-cloudwatch-logs/node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
var fromUtf84 = function(input) {
  return typeof TextEncoder === "function" ? fromUtf83(input) : fromUtf82(input);
};
var toUtf84 = function(input) {
  return typeof TextDecoder === "function" ? toUtf83(input) : toUtf82(input);
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/endpoints.js
var AWS_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "logs.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "logs.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "logs.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_REGIONS = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "af-south-1":
      regionInfo = {
        hostname: "logs.af-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-east-1":
      regionInfo = {
        hostname: "logs.ap-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-1":
      regionInfo = {
        hostname: "logs.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "logs.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "logs.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "logs.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "logs.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "logs.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "logs.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "cn-northwest-1":
      regionInfo = {
        hostname: "logs.cn-northwest-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "logs.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "logs.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-south-1":
      regionInfo = {
        hostname: "logs.eu-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "logs.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "logs.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "logs.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "logs-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "logs-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-west-1":
      regionInfo = {
        hostname: "logs-fips.us-west-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "logs-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "me-south-1":
      regionInfo = {
        hostname: "logs.me-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "logs.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "logs.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "logs.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-east-1":
      regionInfo = {
        hostname: "logs.us-gov-east-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-east-1"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "logs.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "us-iso-east-1":
      regionInfo = {
        hostname: "logs.us-iso-east-1.c2s.ic.gov",
        partition: "aws-iso"
      };
      break;
    case "us-isob-east-1":
      regionInfo = {
        hostname: "logs.us-isob-east-1.sc2s.sgov.gov",
        partition: "aws-iso-b"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "logs.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "logs.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign7({ signingService: "logs" }, regionInfo));
};

// node_modules/@aws-sdk/querystring-parser/dist/es/index.js
function parseQueryString(querystring) {
  var e_1, _a;
  var query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    try {
      for (var _b = __values4(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var pair = _c.value;
        var _d = __read11(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return query;
}

// node_modules/@aws-sdk/url-parser/dist/es/index.js
var parseUrl2 = function(url) {
  var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
  var query;
  if (search) {
    query = parseQueryString(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : void 0,
    protocol,
    path: pathname,
    query
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.shared.js
var ClientSharedValues = {
  apiVersion: "2014-03-28",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider,
  serviceId: "CloudWatch Logs",
  urlParser: parseUrl2
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var ClientDefaultValues = __assign7(__assign7({}, ClientSharedValues), { runtime: "browser", base64Decoder: fromBase642, base64Encoder: toBase642, bodyLengthChecker: calculateBodyLength2, credentialDefaultProvider: function(_) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent3({
  serviceId: ClientSharedValues.serviceId,
  clientVersion: package_default3.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS2, region: invalidProvider2("Region is missing"), requestHandler: new FetchHttpHandler2(), sha256: import_sha256_browser3.Sha256, streamCollector: streamCollector2, utf8Decoder: fromUtf84, utf8Encoder: toUtf84 });

// node_modules/@aws-sdk/config-resolver/dist/es/EndpointsConfig.js
var resolveEndpointsConfig = function(input) {
  var _a;
  return __assign8(__assign8({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: input.endpoint ? normalizeEndpoint(input) : function() {
    return getEndPointFromRegion(input);
  }, isCustomEndpoint: input.endpoint ? true : false });
};
var normalizeEndpoint = function(input) {
  var endpoint = input.endpoint, urlParser = input.urlParser;
  if (typeof endpoint === "string") {
    var promisified_1 = Promise.resolve(urlParser(endpoint));
    return function() {
      return promisified_1;
    };
  } else if (typeof endpoint === "object") {
    var promisified_2 = Promise.resolve(endpoint);
    return function() {
      return promisified_2;
    };
  }
  return endpoint;
};
var getEndPointFromRegion = function(input) {
  return __awaiter4(void 0, void 0, void 0, function() {
    var _a, tls, region, dnsHostRegex, hostname;
    var _b;
    return __generator4(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = input.tls, tls = _a === void 0 ? true : _a;
          return [4, input.region()];
        case 1:
          region = _c.sent();
          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
          if (!dnsHostRegex.test(region)) {
            throw new Error("Invalid region in client config");
          }
          return [4, input.regionInfoProvider(region)];
        case 2:
          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
          if (!hostname) {
            throw new Error("Cannot resolve hostname from client config");
          }
          return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
      }
    });
  });
};

// node_modules/@aws-sdk/config-resolver/dist/es/RegionConfig.js
var resolveRegionConfig2 = function(input) {
  if (!input.region) {
    throw new Error("Region is missing");
  }
  return __assign8(__assign8({}, input), { region: normalizeRegion(input.region) });
};
var normalizeRegion = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  }
  return region;
};

// node_modules/@aws-sdk/middleware-content-length/dist/es/index.js
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter4(_this, void 0, void 0, function() {
        var request, body, headers, length;
        var _a;
        return __generator4(this, function(_b) {
          request = args.request;
          if (HttpRequest2.isInstance(request)) {
            body = request.body, headers = request.headers;
            if (body && Object.keys(headers).map(function(str) {
              return str.toLowerCase();
            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
              length = bodyLengthChecker(body);
              if (length !== void 0) {
                request.headers = __assign8(__assign8({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
              }
            }
          }
          return [2, next(__assign8(__assign8({}, args), { request }))];
        });
      });
    };
  };
}
var contentLengthMiddlewareOptions = {
  step: "build",
  tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
  name: "contentLengthMiddleware",
  override: true
};
var getContentLengthPlugin2 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-host-header/dist/es/index.js
function resolveHostHeaderConfig3(input) {
  return input;
}
var hostHeaderMiddleware3 = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var request, _a, handlerProtocol;
        return __generator4(this, function(_b) {
          if (!HttpRequest2.isInstance(args.request))
            return [2, next(args)];
          request = args.request;
          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
          if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
            delete request.headers["host"];
            request.headers[":authority"] = "";
          } else if (!request.headers["host"]) {
            request.headers["host"] = request.hostname;
          }
          return [2, next(args)];
        });
      });
    };
  };
};
var hostHeaderMiddlewareOptions3 = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin3 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(hostHeaderMiddleware3(options), hostHeaderMiddlewareOptions3);
    }
  };
};

// node_modules/@aws-sdk/middleware-logger/dist/es/loggerMiddleware.js
var loggerMiddleware3 = function() {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var clientName, commandName, inputFilterSensitiveLog, logger12, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator4(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger12 = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
              return [4, next(args)];
            case 1:
              response = _b.sent();
              if (!logger12) {
                return [2, response];
              }
              if (typeof logger12.info === "function") {
                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest2(_a, ["$metadata"]);
                logger12.info({
                  clientName,
                  commandName,
                  input: inputFilterSensitiveLog(args.input),
                  output: outputFilterSensitiveLog(outputWithoutMetadata),
                  metadata: $metadata
                });
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var loggerMiddlewareOptions3 = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin3 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(loggerMiddleware3(), loggerMiddlewareOptions3);
    }
  };
};

// node_modules/@aws-sdk/signature-v4/dist/es/constants.js
var ALGORITHM_QUERY_PARAM2 = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM2 = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM2 = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM2 = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM2 = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM2 = "X-Amz-Signature";
var TOKEN_QUERY_PARAM2 = "X-Amz-Security-Token";
var AUTH_HEADER2 = "authorization";
var AMZ_DATE_HEADER2 = AMZ_DATE_QUERY_PARAM2.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [AUTH_HEADER2, AMZ_DATE_HEADER2, DATE_HEADER];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM2.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER2 = TOKEN_QUERY_PARAM2.toLowerCase();
var ALWAYS_UNSIGNABLE_HEADERS = {
  authorization: true,
  "cache-control": true,
  connection: true,
  expect: true,
  from: true,
  "keep-alive": true,
  "max-forwards": true,
  pragma: true,
  referer: true,
  te: true,
  trailer: true,
  "transfer-encoding": true,
  upgrade: true,
  "user-agent": true,
  "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD2 = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER2 = "aws4_request";
var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

// node_modules/@aws-sdk/signature-v4/dist/es/credentialDerivation.js
var signingKeyCache = {};
var cacheQueue = [];
function createScope(shortDate, region, service) {
  return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER2;
}
var getSigningKey2 = function(sha256Constructor, credentials, shortDate, region, service) {
  return __awaiter4(void 0, void 0, void 0, function() {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator4(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
        case 1:
          credsHash = _d.sent();
          cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
          if (cacheKey in signingKeyCache) {
            return [2, signingKeyCache[cacheKey]];
          }
          cacheQueue.push(cacheKey);
          while (cacheQueue.length > MAX_CACHE_SIZE) {
            delete signingKeyCache[cacheQueue.shift()];
          }
          key = "AWS4" + credentials.secretAccessKey;
          _d.label = 2;
        case 2:
          _d.trys.push([2, 7, 8, 9]);
          _a = __values4([shortDate, region, service, KEY_TYPE_IDENTIFIER2]), _b = _a.next();
          _d.label = 3;
        case 3:
          if (!!_b.done)
            return [3, 6];
          signable = _b.value;
          return [4, hmac(sha256Constructor, key, signable)];
        case 4:
          key = _d.sent();
          _d.label = 5;
        case 5:
          _b = _a.next();
          return [3, 3];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [7];
        case 9:
          return [2, signingKeyCache[cacheKey] = key];
      }
    });
  });
};
function hmac(ctor, secret, data) {
  var hash = new ctor(secret);
  hash.update(data);
  return hash.digest();
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalHeaders.js
function getCanonicalHeaders2(_a, unsignableHeaders, signableHeaders) {
  var e_1, _b;
  var headers = _a.headers;
  var canonical = {};
  try {
    for (var _c = __values4(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var headerName = _d.value;
      var canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_b = _c.return))
        _b.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return canonical;
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalQuery.js
function getCanonicalQuery(_a) {
  var e_1, _b;
  var _c = _a.query, query = _c === void 0 ? {} : _c;
  var keys = [];
  var serialized = {};
  var _loop_1 = function(key2) {
    if (key2.toLowerCase() === SIGNATURE_HEADER) {
      return "continue";
    }
    keys.push(key2);
    var value = query[key2];
    if (typeof value === "string") {
      serialized[key2] = escapeUri2(key2) + "=" + escapeUri2(value);
    } else if (Array.isArray(value)) {
      serialized[key2] = value.slice(0).sort().reduce(function(encoded, value2) {
        return encoded.concat([escapeUri2(key2) + "=" + escapeUri2(value2)]);
      }, []).join("&");
    }
  };
  try {
    for (var _d = __values4(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
      var key = _e.value;
      _loop_1(key);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_b = _d.return))
        _b.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return keys.map(function(key2) {
    return serialized[key2];
  }).filter(function(serialized2) {
    return serialized2;
  }).join("&");
}

// node_modules/@aws-sdk/is-array-buffer/dist/es/index.js
var isArrayBuffer2 = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-sdk/signature-v4/dist/es/getPayloadHash.js
function getPayloadHash(_a, hashConstructor) {
  var headers = _a.headers, body = _a.body;
  return __awaiter4(this, void 0, void 0, function() {
    var _b, _c, headerName, hashCtor, _d;
    var e_1, _e;
    return __generator4(this, function(_f) {
      switch (_f.label) {
        case 0:
          try {
            for (_b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              headerName = _c.value;
              if (headerName.toLowerCase() === SHA256_HEADER) {
                return [2, headers[headerName]];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_e = _b.return))
                _e.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (!(body == void 0))
            return [3, 1];
          return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
        case 1:
          if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer2(body)))
            return [3, 3];
          hashCtor = new hashConstructor();
          hashCtor.update(body);
          _d = toHex;
          return [4, hashCtor.digest()];
        case 2:
          return [2, _d.apply(void 0, [_f.sent()])];
        case 3:
          return [2, UNSIGNED_PAYLOAD2];
      }
    });
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/hasHeader.js
function hasHeader(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
}

// node_modules/@aws-sdk/signature-v4/dist/es/cloneRequest.js
function cloneRequest(_a) {
  var headers = _a.headers, query = _a.query, rest = __rest2(_a, ["headers", "query"]);
  return __assign8(__assign8({}, rest), { headers: __assign8({}, headers), query: query ? cloneQuery2(query) : void 0 });
}
function cloneQuery2(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign8(__assign8({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/signature-v4/dist/es/moveHeadersToQuery.js
function moveHeadersToQuery(request, options) {
  var e_1, _a;
  var _b;
  if (options === void 0) {
    options = {};
  }
  var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
  try {
    for (var _e = __values4(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
      var name = _f.value;
      var lname = name.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e.return))
        _a.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return __assign8(__assign8({}, request), {
    headers,
    query
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/prepareRequest.js
function prepareRequest(request) {
  var e_1, _a;
  request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
  try {
    for (var _b = __values4(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return request;
}

// node_modules/@aws-sdk/signature-v4/dist/es/utilDate.js
function iso8601(time) {
  return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
}
function toDate(time) {
  if (typeof time === "number") {
    return new Date(time * 1e3);
  }
  if (typeof time === "string") {
    if (Number(time)) {
      return new Date(Number(time) * 1e3);
    }
    return new Date(time);
  }
  return time;
}

// node_modules/@aws-sdk/signature-v4/dist/es/SignatureV4.js
var SignatureV42 = function() {
  function SignatureV43(_a) {
    var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
    this.service = service;
    this.sha256 = sha256;
    this.uriEscapePath = uriEscapePath;
    this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
    this.regionProvider = normalizeRegionProvider(region);
    this.credentialProvider = normalizeCredentialsProvider(credentials);
  }
  SignatureV43.prototype.presign = function(originalRequest, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter4(this, void 0, void 0, function() {
      var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
      return __generator4(this, function(_l) {
        switch (_l.label) {
          case 0:
            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
            return [4, this.credentialProvider()];
          case 1:
            credentials = _l.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _c = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _c = _l.sent();
            _l.label = 4;
          case 4:
            region = _c;
            _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
            if (expiresIn > MAX_PRESIGNED_TTL) {
              return [2, Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")];
            }
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
            if (credentials.sessionToken) {
              request.query[TOKEN_QUERY_PARAM2] = credentials.sessionToken;
            }
            request.query[ALGORITHM_QUERY_PARAM2] = ALGORITHM_IDENTIFIER;
            request.query[CREDENTIAL_QUERY_PARAM2] = credentials.accessKeyId + "/" + scope;
            request.query[AMZ_DATE_QUERY_PARAM2] = longDate;
            request.query[EXPIRES_QUERY_PARAM2] = expiresIn.toString(10);
            canonicalHeaders = getCanonicalHeaders2(request, unsignableHeaders, signableHeaders);
            request.query[SIGNED_HEADERS_QUERY_PARAM2] = getCanonicalHeaderList(canonicalHeaders);
            _e = request.query;
            _f = SIGNATURE_QUERY_PARAM2;
            _g = this.getSignature;
            _h = [
              longDate,
              scope,
              this.getSigningKey(credentials, region, shortDate, signingService)
            ];
            _j = this.createCanonicalRequest;
            _k = [request, canonicalHeaders];
            return [4, getPayloadHash(originalRequest, this.sha256)];
          case 5:
            return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
          case 6:
            _e[_f] = _l.sent();
            return [2, request];
        }
      });
    });
  };
  SignatureV43.prototype.sign = function(toSign, options) {
    return __awaiter4(this, void 0, void 0, function() {
      return __generator4(this, function(_a) {
        if (typeof toSign === "string") {
          return [2, this.signString(toSign, options)];
        } else if (toSign.headers && toSign.payload) {
          return [2, this.signEvent(toSign, options)];
        } else {
          return [2, this.signRequest(toSign, options)];
        }
        return [2];
      });
    });
  };
  SignatureV43.prototype.signEvent = function(_a, _b) {
    var headers = _a.headers, payload = _a.payload;
    var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter4(this, void 0, void 0, function() {
      var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;
      return __generator4(this, function(_g) {
        switch (_g.label) {
          case 0:
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 1];
            _d = signingRegion;
            return [3, 3];
          case 1:
            return [4, this.regionProvider()];
          case 2:
            _d = _g.sent();
            _g.label = 3;
          case 3:
            region = _d;
            _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            return [4, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
          case 4:
            hashedPayload = _g.sent();
            hash = new this.sha256();
            hash.update(headers);
            _f = toHex;
            return [4, hash.digest()];
          case 5:
            hashedHeaders = _f.apply(void 0, [_g.sent()]);
            stringToSign = [
              EVENT_ALGORITHM_IDENTIFIER,
              longDate,
              scope,
              priorSignature,
              hashedHeaders,
              hashedPayload
            ].join("\n");
            return [2, this.signString(stringToSign, { signingDate, signingRegion: region, signingService })];
        }
      });
    });
  };
  SignatureV43.prototype.signString = function(stringToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter4(this, void 0, void 0, function() {
      var credentials, region, _d, shortDate, hash, _e, _f, _g;
      return __generator4(this, function(_h) {
        switch (_h.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _h.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _h.sent();
            _h.label = 4;
          case 4:
            region = _d;
            shortDate = formatDate(signingDate).shortDate;
            _f = (_e = this.sha256).bind;
            return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
          case 5:
            hash = new (_f.apply(_e, [void 0, _h.sent()]))();
            hash.update(stringToSign);
            _g = toHex;
            return [4, hash.digest()];
          case 6:
            return [2, _g.apply(void 0, [_h.sent()])];
        }
      });
    });
  };
  SignatureV43.prototype.signRequest = function(requestToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter4(this, void 0, void 0, function() {
      var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
      return __generator4(this, function(_f) {
        switch (_f.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _f.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _f.sent();
            _f.label = 4;
          case 4:
            region = _d;
            request = prepareRequest(requestToSign);
            _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request.headers[AMZ_DATE_HEADER2] = longDate;
            if (credentials.sessionToken) {
              request.headers[TOKEN_HEADER2] = credentials.sessionToken;
            }
            return [4, getPayloadHash(request, this.sha256)];
          case 5:
            payloadHash = _f.sent();
            if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
              request.headers[SHA256_HEADER] = payloadHash;
            }
            canonicalHeaders = getCanonicalHeaders2(request, unsignableHeaders, signableHeaders);
            return [4, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
          case 6:
            signature = _f.sent();
            request.headers[AUTH_HEADER2] = ALGORITHM_IDENTIFIER + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
            return [2, request];
        }
      });
    });
  };
  SignatureV43.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
    var sortedHeaders = Object.keys(canonicalHeaders).sort();
    return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery(request) + "\n" + sortedHeaders.map(function(name) {
      return name + ":" + canonicalHeaders[name];
    }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
  };
  SignatureV43.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
    return __awaiter4(this, void 0, void 0, function() {
      var hash, hashedRequest;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            hash = new this.sha256();
            hash.update(canonicalRequest);
            return [4, hash.digest()];
          case 1:
            hashedRequest = _a.sent();
            return [2, ALGORITHM_IDENTIFIER + "\n" + longDate + "\n" + credentialScope + "\n" + toHex(hashedRequest)];
        }
      });
    });
  };
  SignatureV43.prototype.getCanonicalPath = function(_a) {
    var path = _a.path;
    if (this.uriEscapePath) {
      var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
      return "/" + doubleEncoded.replace(/%2F/g, "/");
    }
    return path;
  };
  SignatureV43.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
    return __awaiter4(this, void 0, void 0, function() {
      var stringToSign, hash, _a, _b, _c;
      return __generator4(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
          case 1:
            stringToSign = _d.sent();
            _b = (_a = this.sha256).bind;
            return [4, keyPromise];
          case 2:
            hash = new (_b.apply(_a, [void 0, _d.sent()]))();
            hash.update(stringToSign);
            _c = toHex;
            return [4, hash.digest()];
          case 3:
            return [2, _c.apply(void 0, [_d.sent()])];
        }
      });
    });
  };
  SignatureV43.prototype.getSigningKey = function(credentials, region, shortDate, service) {
    return getSigningKey2(this.sha256, credentials, shortDate, region, service || this.service);
  };
  return SignatureV43;
}();
var formatDate = function(now) {
  var longDate = iso8601(now).replace(/[\-:]/g, "");
  return {
    longDate,
    shortDate: longDate.substr(0, 8)
  };
};
var getCanonicalHeaderList = function(headers) {
  return Object.keys(headers).sort().join(";");
};
var normalizeRegionProvider = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  } else {
    return region;
  }
};
var normalizeCredentialsProvider = function(credentials) {
  if (typeof credentials === "object") {
    var promisified_2 = Promise.resolve(credentials);
    return function() {
      return promisified_2;
    };
  } else {
    return credentials;
  }
};

// node_modules/@aws-sdk/middleware-signing/dist/es/configurations.js
function resolveAwsAuthConfig3(input) {
  var _this = this;
  var credentials = input.credentials || input.credentialDefaultProvider(input);
  var normalizedCreds = normalizeProvider2(credentials);
  var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
  var signer;
  if (input.signer) {
    signer = normalizeProvider2(input.signer);
  } else {
    signer = function() {
      return normalizeProvider2(input.region)().then(function(region) {
        return __awaiter4(_this, void 0, void 0, function() {
          return __generator4(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, input.regionInfoProvider(region)];
              case 1:
                return [2, [_a2.sent() || {}, region]];
            }
          });
        });
      }).then(function(_a2) {
        var _b2 = __read11(_a2, 2), regionInfo = _b2[0], region = _b2[1];
        var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        return new SignatureV42({
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        });
      });
    };
  }
  return __assign8(__assign8({}, input), {
    systemClockOffset,
    signingEscapePath,
    credentials: normalizedCreds,
    signer
  });
}
function normalizeProvider2(input) {
  if (typeof input === "object") {
    var promisified_1 = Promise.resolve(input);
    return function() {
      return promisified_1;
    };
  }
  return input;
}

// node_modules/@aws-sdk/middleware-signing/dist/es/middleware.js
var isClockSkewed4 = function(newServerTime, systemClockOffset) {
  return Math.abs(getSkewCorrectedDate4(systemClockOffset).getTime() - newServerTime) >= 3e5;
};
var getSkewCorrectedDate4 = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};
function awsAuthMiddleware3(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(this, void 0, void 0, function() {
        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
        var _d;
        return __generator4(this, function(_e) {
          switch (_e.label) {
            case 0:
              if (!HttpRequest2.isInstance(args.request))
                return [2, next(args)];
              if (!(typeof options.signer === "function"))
                return [3, 2];
              return [4, options.signer()];
            case 1:
              _a = _e.sent();
              return [3, 3];
            case 2:
              _a = options.signer;
              _e.label = 3;
            case 3:
              signer = _a;
              _b = next;
              _c = [__assign8({}, args)];
              _d = {};
              return [4, signer.sign(args.request, {
                signingDate: new Date(Date.now() + options.systemClockOffset),
                signingRegion: context["signing_region"],
                signingService: context["signing_service"]
              })];
            case 4:
              return [4, _b.apply(void 0, [__assign8.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];
            case 5:
              output = _e.sent();
              headers = output.response.headers;
              dateHeader = headers && (headers.date || headers.Date);
              if (dateHeader) {
                serverTime = Date.parse(dateHeader);
                if (isClockSkewed4(serverTime, options.systemClockOffset)) {
                  options.systemClockOffset = serverTime - Date.now();
                }
              }
              return [2, output];
          }
        });
      });
    };
  };
}
var awsAuthMiddlewareOptions3 = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin3 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(awsAuthMiddleware3(options), awsAuthMiddlewareOptions3);
    }
  };
};

// node_modules/@aws-sdk/middleware-user-agent/dist/es/configurations.js
function resolveUserAgentConfig3(input) {
  return __assign8(__assign8({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
}

// node_modules/@aws-sdk/middleware-user-agent/dist/es/constants.js
var USER_AGENT3 = "user-agent";
var X_AMZ_USER_AGENT3 = "x-amz-user-agent";
var SPACE3 = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

// node_modules/@aws-sdk/middleware-user-agent/dist/es/user-agent-middleware.js
var userAgentMiddleware3 = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var request, headers, userAgent, defaultUserAgent4, customUserAgent, normalUAValue;
        var _a, _b;
        return __generator4(this, function(_c) {
          switch (_c.label) {
            case 0:
              request = args.request;
              if (!HttpRequest2.isInstance(request))
                return [2, next(args)];
              headers = request.headers;
              userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent3)) || [];
              return [4, options.defaultUserAgentProvider()];
            case 1:
              defaultUserAgent4 = _c.sent().map(escapeUserAgent3);
              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent3)) || [];
              headers[X_AMZ_USER_AGENT3] = __spread(defaultUserAgent4, userAgent, customUserAgent).join(SPACE3);
              normalUAValue = __spread(defaultUserAgent4.filter(function(section) {
                return section.startsWith("aws-sdk-");
              }), customUserAgent).join(SPACE3);
              if (options.runtime !== "browser" && normalUAValue) {
                headers[USER_AGENT3] = headers[USER_AGENT3] ? headers[USER_AGENT3] + " " + normalUAValue : normalUAValue;
              }
              return [2, next(__assign8(__assign8({}, args), { request }))];
          }
        });
      });
    };
  };
};
var escapeUserAgent3 = function(_a) {
  var _b = __read11(_a, 2), name = _b[0], version2 = _b[1];
  var prefixSeparatorIndex = name.indexOf("/");
  var prefix = name.substring(0, prefixSeparatorIndex);
  var uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version2].filter(function(item) {
    return item && item.length > 0;
  }).map(function(item) {
    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_");
  }).join("/");
};
var getUserAgentMiddlewareOptions3 = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin3 = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(userAgentMiddleware3(config), getUserAgentMiddlewareOptions3);
    }
  };
};

// node_modules/@aws-sdk/middleware-stack/dist/es/MiddlewareStack.js
var constructStack = function() {
  var absoluteEntries = [];
  var relativeEntries = [];
  var entriesNameSet = /* @__PURE__ */ new Set();
  var sort = function(entries) {
    return entries.sort(function(a3, b3) {
      return stepWeights[b3.step] - stepWeights[a3.step] || priorityWeights[b3.priority || "normal"] - priorityWeights[a3.priority || "normal"];
    });
  };
  var removeByName = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.name && entry.name === toRemove) {
        isRemoved = true;
        entriesNameSet.delete(toRemove);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var removeByReference = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.middleware === toRemove) {
        isRemoved = true;
        if (entry.name)
          entriesNameSet.delete(entry.name);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var cloneTo = function(toStack) {
    absoluteEntries.forEach(function(entry) {
      toStack.add(entry.middleware, __assign8({}, entry));
    });
    relativeEntries.forEach(function(entry) {
      toStack.addRelativeTo(entry.middleware, __assign8({}, entry));
    });
    return toStack;
  };
  var expandRelativeMiddlewareList = function(from) {
    var expandedMiddlewareList = [];
    from.before.forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));
      }
    });
    expandedMiddlewareList.push(from);
    from.after.reverse().forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));
      }
    });
    return expandedMiddlewareList;
  };
  var getMiddlewareList = function() {
    var normalizedAbsoluteEntries = [];
    var normalizedRelativeEntries = [];
    var normalizedEntriesNameMap = {};
    absoluteEntries.forEach(function(entry) {
      var normalizedEntry = __assign8(__assign8({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedAbsoluteEntries.push(normalizedEntry);
    });
    relativeEntries.forEach(function(entry) {
      var normalizedEntry = __assign8(__assign8({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedRelativeEntries.push(normalizedEntry);
    });
    normalizedRelativeEntries.forEach(function(entry) {
      if (entry.toMiddleware) {
        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
        if (toMiddleware === void 0) {
          throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
        }
        if (entry.relation === "after") {
          toMiddleware.after.push(entry);
        }
        if (entry.relation === "before") {
          toMiddleware.before.push(entry);
        }
      }
    });
    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
      wholeList.push.apply(wholeList, __spread(expendedMiddlewareList));
      return wholeList;
    }, []);
    return mainChain.map(function(entry) {
      return entry.middleware;
    });
  };
  var stack = {
    add: function(middleware, options) {
      if (options === void 0) {
        options = {};
      }
      var name = options.name, override = options.override;
      var entry = __assign8({ step: "initialize", priority: "normal", middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = absoluteEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = absoluteEntries[toOverrideIndex];
          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
            throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
          }
          absoluteEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      absoluteEntries.push(entry);
    },
    addRelativeTo: function(middleware, options) {
      var name = options.name, override = options.override;
      var entry = __assign8({ middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = relativeEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = relativeEntries[toOverrideIndex];
          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
            throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
          }
          relativeEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      relativeEntries.push(entry);
    },
    clone: function() {
      return cloneTo(constructStack());
    },
    use: function(plugin) {
      plugin.applyToStack(stack);
    },
    remove: function(toRemove) {
      if (typeof toRemove === "string")
        return removeByName(toRemove);
      else
        return removeByReference(toRemove);
    },
    removeByTag: function(toRemove) {
      var isRemoved = false;
      var filterCb = function(entry) {
        var tags = entry.tags, name = entry.name;
        if (tags && tags.includes(toRemove)) {
          if (name)
            entriesNameSet.delete(name);
          isRemoved = true;
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    },
    concat: function(from) {
      var cloned = cloneTo(constructStack());
      cloned.use(from);
      return cloned;
    },
    applyToStack: cloneTo,
    resolve: function(handler, context) {
      var e_1, _a;
      try {
        for (var _b = __values4(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var middleware = _c.value;
          handler = middleware(handler, context);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return handler;
    }
  };
  return stack;
};
var stepWeights = {
  initialize: 5,
  serialize: 4,
  build: 3,
  finalizeRequest: 2,
  deserialize: 1
};
var priorityWeights = {
  high: 3,
  normal: 2,
  low: 1
};

// node_modules/@aws-sdk/smithy-client/dist/es/client.js
var Client2 = function() {
  function Client3(config) {
    this.middlewareStack = constructStack();
    this.config = config;
  }
  Client3.prototype.send = function(command, optionsOrCb, cb) {
    var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
    var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
    if (callback) {
      handler(command).then(function(result) {
        return callback(null, result.output);
      }, function(err) {
        return callback(err);
      }).catch(
        function() {
        }
      );
    } else {
      return handler(command).then(function(result) {
        return result.output;
      });
    }
  };
  Client3.prototype.destroy = function() {
    if (this.config.requestHandler.destroy)
      this.config.requestHandler.destroy();
  };
  return Client3;
}();

// node_modules/@aws-sdk/smithy-client/dist/es/command.js
var Command2 = function() {
  function Command3() {
    this.middlewareStack = constructStack();
  }
  return Command3;
}();

// node_modules/@aws-sdk/smithy-client/dist/es/lazy-json.js
var StringWrapper = function() {
  var Class = Object.getPrototypeOf(this).constructor;
  var Constructor = Function.bind.apply(String, __spread([null], arguments));
  var instance = new Constructor();
  Object.setPrototypeOf(instance, Class.prototype);
  return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
  constructor: {
    value: StringWrapper,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = function(_super) {
  __extends4(LazyJsonString2, _super);
  function LazyJsonString2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LazyJsonString2.prototype.deserializeJSON = function() {
    return JSON.parse(_super.prototype.toString.call(this));
  };
  LazyJsonString2.prototype.toJSON = function() {
    return _super.prototype.toString.call(this);
  };
  LazyJsonString2.fromObject = function(object) {
    if (object instanceof LazyJsonString2) {
      return object;
    } else if (object instanceof String || typeof object === "string") {
      return new LazyJsonString2(object);
    }
    return new LazyJsonString2(JSON.stringify(object));
  };
  return LazyJsonString2;
}(StringWrapper);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogsClient.js
var CloudWatchLogsClient = function(_super) {
  __extends3(CloudWatchLogsClient2, _super);
  function CloudWatchLogsClient2(configuration) {
    var _this = this;
    var _config_0 = __assign7(__assign7({}, ClientDefaultValues), configuration);
    var _config_1 = resolveRegionConfig2(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveAwsAuthConfig3(_config_2);
    var _config_4 = resolveRetryConfig2(_config_3);
    var _config_5 = resolveHostHeaderConfig3(_config_4);
    var _config_6 = resolveUserAgentConfig3(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getAwsAuthPlugin3(_this.config));
    _this.middlewareStack.use(getRetryPlugin2(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin2(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin3(_this.config));
    _this.middlewareStack.use(getLoggerPlugin3(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin3(_this.config));
    return _this;
  }
  CloudWatchLogsClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return CloudWatchLogsClient2;
}(Client2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/models/models_0.js
var AssociateKmsKeyRequest;
(function(AssociateKmsKeyRequest2) {
  AssociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(AssociateKmsKeyRequest || (AssociateKmsKeyRequest = {}));
var InvalidParameterException2;
(function(InvalidParameterException3) {
  InvalidParameterException3.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(InvalidParameterException2 || (InvalidParameterException2 = {}));
var OperationAbortedException;
(function(OperationAbortedException2) {
  OperationAbortedException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(OperationAbortedException || (OperationAbortedException = {}));
var ResourceNotFoundException2;
(function(ResourceNotFoundException3) {
  ResourceNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ResourceNotFoundException2 || (ResourceNotFoundException2 = {}));
var ServiceUnavailableException;
(function(ServiceUnavailableException2) {
  ServiceUnavailableException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ServiceUnavailableException || (ServiceUnavailableException = {}));
var CancelExportTaskRequest;
(function(CancelExportTaskRequest2) {
  CancelExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(CancelExportTaskRequest || (CancelExportTaskRequest = {}));
var InvalidOperationException;
(function(InvalidOperationException2) {
  InvalidOperationException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(InvalidOperationException || (InvalidOperationException = {}));
var CreateExportTaskRequest;
(function(CreateExportTaskRequest2) {
  CreateExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(CreateExportTaskRequest || (CreateExportTaskRequest = {}));
var CreateExportTaskResponse;
(function(CreateExportTaskResponse2) {
  CreateExportTaskResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(CreateExportTaskResponse || (CreateExportTaskResponse = {}));
var LimitExceededException2;
(function(LimitExceededException3) {
  LimitExceededException3.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(LimitExceededException2 || (LimitExceededException2 = {}));
var ResourceAlreadyExistsException;
(function(ResourceAlreadyExistsException2) {
  ResourceAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ResourceAlreadyExistsException || (ResourceAlreadyExistsException = {}));
var CreateLogGroupRequest;
(function(CreateLogGroupRequest2) {
  CreateLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(CreateLogGroupRequest || (CreateLogGroupRequest = {}));
var CreateLogStreamRequest;
(function(CreateLogStreamRequest2) {
  CreateLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(CreateLogStreamRequest || (CreateLogStreamRequest = {}));
var DataAlreadyAcceptedException;
(function(DataAlreadyAcceptedException2) {
  DataAlreadyAcceptedException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DataAlreadyAcceptedException || (DataAlreadyAcceptedException = {}));
var DeleteDestinationRequest;
(function(DeleteDestinationRequest2) {
  DeleteDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteDestinationRequest || (DeleteDestinationRequest = {}));
var DeleteLogGroupRequest;
(function(DeleteLogGroupRequest2) {
  DeleteLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteLogGroupRequest || (DeleteLogGroupRequest = {}));
var DeleteLogStreamRequest;
(function(DeleteLogStreamRequest2) {
  DeleteLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteLogStreamRequest || (DeleteLogStreamRequest = {}));
var DeleteMetricFilterRequest;
(function(DeleteMetricFilterRequest2) {
  DeleteMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteMetricFilterRequest || (DeleteMetricFilterRequest = {}));
var DeleteQueryDefinitionRequest;
(function(DeleteQueryDefinitionRequest2) {
  DeleteQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteQueryDefinitionRequest || (DeleteQueryDefinitionRequest = {}));
var DeleteQueryDefinitionResponse;
(function(DeleteQueryDefinitionResponse2) {
  DeleteQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteQueryDefinitionResponse || (DeleteQueryDefinitionResponse = {}));
var DeleteResourcePolicyRequest;
(function(DeleteResourcePolicyRequest2) {
  DeleteResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteResourcePolicyRequest || (DeleteResourcePolicyRequest = {}));
var DeleteRetentionPolicyRequest;
(function(DeleteRetentionPolicyRequest2) {
  DeleteRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteRetentionPolicyRequest || (DeleteRetentionPolicyRequest = {}));
var DeleteSubscriptionFilterRequest;
(function(DeleteSubscriptionFilterRequest2) {
  DeleteSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DeleteSubscriptionFilterRequest || (DeleteSubscriptionFilterRequest = {}));
var DescribeDestinationsRequest;
(function(DescribeDestinationsRequest2) {
  DescribeDestinationsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeDestinationsRequest || (DescribeDestinationsRequest = {}));
var Destination;
(function(Destination2) {
  Destination2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(Destination || (Destination = {}));
var DescribeDestinationsResponse;
(function(DescribeDestinationsResponse2) {
  DescribeDestinationsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeDestinationsResponse || (DescribeDestinationsResponse = {}));
var ExportTaskStatusCode;
(function(ExportTaskStatusCode2) {
  ExportTaskStatusCode2["CANCELLED"] = "CANCELLED";
  ExportTaskStatusCode2["COMPLETED"] = "COMPLETED";
  ExportTaskStatusCode2["FAILED"] = "FAILED";
  ExportTaskStatusCode2["PENDING"] = "PENDING";
  ExportTaskStatusCode2["PENDING_CANCEL"] = "PENDING_CANCEL";
  ExportTaskStatusCode2["RUNNING"] = "RUNNING";
})(ExportTaskStatusCode || (ExportTaskStatusCode = {}));
var DescribeExportTasksRequest;
(function(DescribeExportTasksRequest2) {
  DescribeExportTasksRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeExportTasksRequest || (DescribeExportTasksRequest = {}));
var ExportTaskExecutionInfo;
(function(ExportTaskExecutionInfo2) {
  ExportTaskExecutionInfo2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ExportTaskExecutionInfo || (ExportTaskExecutionInfo = {}));
var ExportTaskStatus;
(function(ExportTaskStatus2) {
  ExportTaskStatus2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ExportTaskStatus || (ExportTaskStatus = {}));
var ExportTask;
(function(ExportTask2) {
  ExportTask2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ExportTask || (ExportTask = {}));
var DescribeExportTasksResponse;
(function(DescribeExportTasksResponse2) {
  DescribeExportTasksResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeExportTasksResponse || (DescribeExportTasksResponse = {}));
var DescribeLogGroupsRequest;
(function(DescribeLogGroupsRequest2) {
  DescribeLogGroupsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeLogGroupsRequest || (DescribeLogGroupsRequest = {}));
var LogGroup;
(function(LogGroup2) {
  LogGroup2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(LogGroup || (LogGroup = {}));
var DescribeLogGroupsResponse;
(function(DescribeLogGroupsResponse2) {
  DescribeLogGroupsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeLogGroupsResponse || (DescribeLogGroupsResponse = {}));
var OrderBy;
(function(OrderBy2) {
  OrderBy2["LastEventTime"] = "LastEventTime";
  OrderBy2["LogStreamName"] = "LogStreamName";
})(OrderBy || (OrderBy = {}));
var DescribeLogStreamsRequest;
(function(DescribeLogStreamsRequest2) {
  DescribeLogStreamsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeLogStreamsRequest || (DescribeLogStreamsRequest = {}));
var LogStream;
(function(LogStream2) {
  LogStream2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(LogStream || (LogStream = {}));
var DescribeLogStreamsResponse;
(function(DescribeLogStreamsResponse2) {
  DescribeLogStreamsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeLogStreamsResponse || (DescribeLogStreamsResponse = {}));
var DescribeMetricFiltersRequest;
(function(DescribeMetricFiltersRequest2) {
  DescribeMetricFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeMetricFiltersRequest || (DescribeMetricFiltersRequest = {}));
var MetricTransformation;
(function(MetricTransformation2) {
  MetricTransformation2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(MetricTransformation || (MetricTransformation = {}));
var MetricFilter;
(function(MetricFilter2) {
  MetricFilter2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(MetricFilter || (MetricFilter = {}));
var DescribeMetricFiltersResponse;
(function(DescribeMetricFiltersResponse2) {
  DescribeMetricFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeMetricFiltersResponse || (DescribeMetricFiltersResponse = {}));
var QueryStatus;
(function(QueryStatus2) {
  QueryStatus2["Cancelled"] = "Cancelled";
  QueryStatus2["Complete"] = "Complete";
  QueryStatus2["Failed"] = "Failed";
  QueryStatus2["Running"] = "Running";
  QueryStatus2["Scheduled"] = "Scheduled";
})(QueryStatus || (QueryStatus = {}));
var DescribeQueriesRequest;
(function(DescribeQueriesRequest2) {
  DescribeQueriesRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeQueriesRequest || (DescribeQueriesRequest = {}));
var QueryInfo;
(function(QueryInfo2) {
  QueryInfo2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(QueryInfo || (QueryInfo = {}));
var DescribeQueriesResponse;
(function(DescribeQueriesResponse2) {
  DescribeQueriesResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeQueriesResponse || (DescribeQueriesResponse = {}));
var DescribeQueryDefinitionsRequest;
(function(DescribeQueryDefinitionsRequest2) {
  DescribeQueryDefinitionsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeQueryDefinitionsRequest || (DescribeQueryDefinitionsRequest = {}));
var QueryDefinition;
(function(QueryDefinition2) {
  QueryDefinition2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(QueryDefinition || (QueryDefinition = {}));
var DescribeQueryDefinitionsResponse;
(function(DescribeQueryDefinitionsResponse2) {
  DescribeQueryDefinitionsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeQueryDefinitionsResponse || (DescribeQueryDefinitionsResponse = {}));
var DescribeResourcePoliciesRequest;
(function(DescribeResourcePoliciesRequest2) {
  DescribeResourcePoliciesRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeResourcePoliciesRequest || (DescribeResourcePoliciesRequest = {}));
var ResourcePolicy;
(function(ResourcePolicy2) {
  ResourcePolicy2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ResourcePolicy || (ResourcePolicy = {}));
var DescribeResourcePoliciesResponse;
(function(DescribeResourcePoliciesResponse2) {
  DescribeResourcePoliciesResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeResourcePoliciesResponse || (DescribeResourcePoliciesResponse = {}));
var DescribeSubscriptionFiltersRequest;
(function(DescribeSubscriptionFiltersRequest2) {
  DescribeSubscriptionFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeSubscriptionFiltersRequest || (DescribeSubscriptionFiltersRequest = {}));
var Distribution;
(function(Distribution2) {
  Distribution2["ByLogStream"] = "ByLogStream";
  Distribution2["Random"] = "Random";
})(Distribution || (Distribution = {}));
var SubscriptionFilter;
(function(SubscriptionFilter2) {
  SubscriptionFilter2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(SubscriptionFilter || (SubscriptionFilter = {}));
var DescribeSubscriptionFiltersResponse;
(function(DescribeSubscriptionFiltersResponse2) {
  DescribeSubscriptionFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DescribeSubscriptionFiltersResponse || (DescribeSubscriptionFiltersResponse = {}));
var DisassociateKmsKeyRequest;
(function(DisassociateKmsKeyRequest2) {
  DisassociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(DisassociateKmsKeyRequest || (DisassociateKmsKeyRequest = {}));
var FilteredLogEvent;
(function(FilteredLogEvent2) {
  FilteredLogEvent2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(FilteredLogEvent || (FilteredLogEvent = {}));
var FilterLogEventsRequest;
(function(FilterLogEventsRequest2) {
  FilterLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(FilterLogEventsRequest || (FilterLogEventsRequest = {}));
var SearchedLogStream;
(function(SearchedLogStream2) {
  SearchedLogStream2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(SearchedLogStream || (SearchedLogStream = {}));
var FilterLogEventsResponse;
(function(FilterLogEventsResponse2) {
  FilterLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(FilterLogEventsResponse || (FilterLogEventsResponse = {}));
var GetLogEventsRequest;
(function(GetLogEventsRequest2) {
  GetLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetLogEventsRequest || (GetLogEventsRequest = {}));
var OutputLogEvent;
(function(OutputLogEvent2) {
  OutputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(OutputLogEvent || (OutputLogEvent = {}));
var GetLogEventsResponse;
(function(GetLogEventsResponse2) {
  GetLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetLogEventsResponse || (GetLogEventsResponse = {}));
var GetLogGroupFieldsRequest;
(function(GetLogGroupFieldsRequest2) {
  GetLogGroupFieldsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetLogGroupFieldsRequest || (GetLogGroupFieldsRequest = {}));
var LogGroupField;
(function(LogGroupField2) {
  LogGroupField2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(LogGroupField || (LogGroupField = {}));
var GetLogGroupFieldsResponse;
(function(GetLogGroupFieldsResponse2) {
  GetLogGroupFieldsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetLogGroupFieldsResponse || (GetLogGroupFieldsResponse = {}));
var GetLogRecordRequest;
(function(GetLogRecordRequest2) {
  GetLogRecordRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetLogRecordRequest || (GetLogRecordRequest = {}));
var GetLogRecordResponse;
(function(GetLogRecordResponse2) {
  GetLogRecordResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetLogRecordResponse || (GetLogRecordResponse = {}));
var GetQueryResultsRequest;
(function(GetQueryResultsRequest2) {
  GetQueryResultsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetQueryResultsRequest || (GetQueryResultsRequest = {}));
var ResultField;
(function(ResultField2) {
  ResultField2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ResultField || (ResultField = {}));
var QueryStatistics;
(function(QueryStatistics2) {
  QueryStatistics2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(QueryStatistics || (QueryStatistics = {}));
var GetQueryResultsResponse;
(function(GetQueryResultsResponse2) {
  GetQueryResultsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(GetQueryResultsResponse || (GetQueryResultsResponse = {}));
var InputLogEvent;
(function(InputLogEvent2) {
  InputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(InputLogEvent || (InputLogEvent = {}));
var InvalidSequenceTokenException;
(function(InvalidSequenceTokenException2) {
  InvalidSequenceTokenException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(InvalidSequenceTokenException || (InvalidSequenceTokenException = {}));
var ListTagsLogGroupRequest;
(function(ListTagsLogGroupRequest2) {
  ListTagsLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ListTagsLogGroupRequest || (ListTagsLogGroupRequest = {}));
var ListTagsLogGroupResponse;
(function(ListTagsLogGroupResponse2) {
  ListTagsLogGroupResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(ListTagsLogGroupResponse || (ListTagsLogGroupResponse = {}));
var PutDestinationRequest;
(function(PutDestinationRequest2) {
  PutDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutDestinationRequest || (PutDestinationRequest = {}));
var PutDestinationResponse;
(function(PutDestinationResponse2) {
  PutDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutDestinationResponse || (PutDestinationResponse = {}));
var PutDestinationPolicyRequest;
(function(PutDestinationPolicyRequest2) {
  PutDestinationPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutDestinationPolicyRequest || (PutDestinationPolicyRequest = {}));
var PutLogEventsRequest;
(function(PutLogEventsRequest2) {
  PutLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutLogEventsRequest || (PutLogEventsRequest = {}));
var RejectedLogEventsInfo;
(function(RejectedLogEventsInfo2) {
  RejectedLogEventsInfo2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(RejectedLogEventsInfo || (RejectedLogEventsInfo = {}));
var PutLogEventsResponse;
(function(PutLogEventsResponse2) {
  PutLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutLogEventsResponse || (PutLogEventsResponse = {}));
var UnrecognizedClientException;
(function(UnrecognizedClientException2) {
  UnrecognizedClientException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(UnrecognizedClientException || (UnrecognizedClientException = {}));
var PutMetricFilterRequest;
(function(PutMetricFilterRequest2) {
  PutMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutMetricFilterRequest || (PutMetricFilterRequest = {}));
var PutQueryDefinitionRequest;
(function(PutQueryDefinitionRequest2) {
  PutQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutQueryDefinitionRequest || (PutQueryDefinitionRequest = {}));
var PutQueryDefinitionResponse;
(function(PutQueryDefinitionResponse2) {
  PutQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutQueryDefinitionResponse || (PutQueryDefinitionResponse = {}));
var PutResourcePolicyRequest;
(function(PutResourcePolicyRequest2) {
  PutResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutResourcePolicyRequest || (PutResourcePolicyRequest = {}));
var PutResourcePolicyResponse;
(function(PutResourcePolicyResponse2) {
  PutResourcePolicyResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutResourcePolicyResponse || (PutResourcePolicyResponse = {}));
var PutRetentionPolicyRequest;
(function(PutRetentionPolicyRequest2) {
  PutRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutRetentionPolicyRequest || (PutRetentionPolicyRequest = {}));
var PutSubscriptionFilterRequest;
(function(PutSubscriptionFilterRequest2) {
  PutSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(PutSubscriptionFilterRequest || (PutSubscriptionFilterRequest = {}));
var QueryCompileErrorLocation;
(function(QueryCompileErrorLocation2) {
  QueryCompileErrorLocation2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(QueryCompileErrorLocation || (QueryCompileErrorLocation = {}));
var QueryCompileError;
(function(QueryCompileError2) {
  QueryCompileError2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(QueryCompileError || (QueryCompileError = {}));
var MalformedQueryException;
(function(MalformedQueryException2) {
  MalformedQueryException2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(MalformedQueryException || (MalformedQueryException = {}));
var StartQueryRequest;
(function(StartQueryRequest2) {
  StartQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(StartQueryRequest || (StartQueryRequest = {}));
var StartQueryResponse;
(function(StartQueryResponse2) {
  StartQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(StartQueryResponse || (StartQueryResponse = {}));
var StopQueryRequest;
(function(StopQueryRequest2) {
  StopQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(StopQueryRequest || (StopQueryRequest = {}));
var StopQueryResponse;
(function(StopQueryResponse2) {
  StopQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(StopQueryResponse || (StopQueryResponse = {}));
var TagLogGroupRequest;
(function(TagLogGroupRequest2) {
  TagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(TagLogGroupRequest || (TagLogGroupRequest = {}));
var TestMetricFilterRequest;
(function(TestMetricFilterRequest2) {
  TestMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(TestMetricFilterRequest || (TestMetricFilterRequest = {}));
var MetricFilterMatchRecord;
(function(MetricFilterMatchRecord2) {
  MetricFilterMatchRecord2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(MetricFilterMatchRecord || (MetricFilterMatchRecord = {}));
var TestMetricFilterResponse;
(function(TestMetricFilterResponse2) {
  TestMetricFilterResponse2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(TestMetricFilterResponse || (TestMetricFilterResponse = {}));
var UntagLogGroupRequest;
(function(UntagLogGroupRequest2) {
  UntagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign7({}, obj);
  };
})(UntagLogGroupRequest || (UntagLogGroupRequest = {}));

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1AssociateKmsKeyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.AssociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1AssociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CancelExportTaskCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CancelExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CancelExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateExportTaskCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CreateExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogStreamCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteDestinationCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteDestination"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteDestinationRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogStreamCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteMetricFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteQueryDefinitionCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteResourcePolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteRetentionPolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteSubscriptionFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeDestinationsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeDestinations"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeDestinationsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeExportTasksCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeExportTasks"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeExportTasksRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogGroupsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogGroups"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogGroupsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogStreamsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogStreams"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogStreamsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeMetricFiltersCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeMetricFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeMetricFiltersRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueriesCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueries"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueriesRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueryDefinitionsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueryDefinitions"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueryDefinitionsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeResourcePoliciesCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeResourcePolicies"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeResourcePoliciesRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeSubscriptionFiltersCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeSubscriptionFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeSubscriptionFiltersRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DisassociateKmsKeyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DisassociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1DisassociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1FilterLogEventsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.FilterLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1FilterLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogEventsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogGroupFieldsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogGroupFields"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogGroupFieldsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogRecordCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogRecord"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogRecordRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetQueryResultsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetQueryResults"
      };
      body = JSON.stringify(serializeAws_json1_1GetQueryResultsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.ListTagsLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestination"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationPolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestinationPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationPolicyRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutLogEventsCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1PutLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutMetricFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutQueryDefinitionCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1PutQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutResourcePolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutRetentionPolicyCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutSubscriptionFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StartQueryCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StartQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StartQueryRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StopQueryCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StopQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StopQueryRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1TagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TestMetricFilterCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TestMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1TestMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagLogGroupCommand = function(input, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator3(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.UntagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1UntagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest3(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1AssociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CancelExportTaskCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidOperationException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateExportTaskCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1CreateExportTaskResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator3(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign7({}, output)];
          _j = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 10];
            case "ServiceUnavailableException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogGroupCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign7({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogStreamCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceAlreadyExistsException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteDestinationCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogGroupCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogStreamCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteMetricFilterCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteQueryDefinitionResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeDestinationsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeDestinationsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeExportTasksCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeExportTasksResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogGroupsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogGroupsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogStreamsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogStreamsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeMetricFiltersCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeMetricFiltersResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueriesCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueriesResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueryDefinitionsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueryDefinitionsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeResourcePoliciesCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeResourcePoliciesResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeSubscriptionFiltersCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeSubscriptionFiltersResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DisassociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1FilterLogEventsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1FilterLogEventsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogEventsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogEventsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogGroupFieldsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogGroupFieldsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogRecordCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogRecordResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetQueryResultsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetQueryResultsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsLogGroupCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsLogGroupResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutDestinationResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationPolicyCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutLogEventsCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutLogEventsResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator3(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign7({}, output)];
          _j = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DataAlreadyAcceptedException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "InvalidSequenceTokenException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
            case "UnrecognizedClientException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidSequenceTokenExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1UnrecognizedClientExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutMetricFilterCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign7({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutQueryDefinitionResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutResourcePolicyCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator3(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign7({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign7({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StartQueryCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StartQueryResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator3(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign7({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "MalformedQueryException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1MalformedQueryExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StopQueryCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StopQueryResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator3(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign7({}, output)];
          _f = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagLogGroupCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TestMetricFilterCommandError(output, context)];
          }
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TestMetricFilterResponse(data, context);
          response = __assign7({ $metadata: deserializeMetadata3(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign7({}, output)];
          _e = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommand = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var response;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagLogGroupCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata3(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommandError = function(output, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator3(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign7({}, output)];
          _d = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign7.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign7.apply(void 0, [__assign7.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign7(__assign7({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DataAlreadyAcceptedException(body, context);
      contents = __assign7({ name: "DataAlreadyAcceptedException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidOperationExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
      contents = __assign7({ name: "InvalidOperationException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
      contents = __assign7({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidSequenceTokenExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidSequenceTokenException(body, context);
      contents = __assign7({ name: "InvalidSequenceTokenException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      contents = __assign7({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1MalformedQueryExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1MalformedQueryException(body, context);
      contents = __assign7({ name: "MalformedQueryException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1OperationAbortedExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1OperationAbortedException(body, context);
      contents = __assign7({ name: "OperationAbortedException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
      contents = __assign7({ name: "ResourceAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
      contents = __assign7({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
      contents = __assign7({ name: "ServiceUnavailableException", $fault: "server", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1UnrecognizedClientExceptionResponse = function(parsedOutput, context) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator3(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1UnrecognizedClientException(body, context);
      contents = __assign7({ name: "UnrecognizedClientException", $fault: "client", $metadata: deserializeMetadata3(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1AssociateKmsKeyRequest = function(input, context) {
  return __assign7(__assign7({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1CancelExportTaskRequest = function(input, context) {
  return __assign7({}, input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1CreateExportTaskRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7(__assign7(__assign7(__assign7({}, input.destination !== void 0 && input.destination !== null && { destination: input.destination }), input.destinationPrefix !== void 0 && input.destinationPrefix !== null && { destinationPrefix: input.destinationPrefix }), input.from !== void 0 && input.from !== null && { from: input.from }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.taskName !== void 0 && input.taskName !== null && { taskName: input.taskName }), input.to !== void 0 && input.to !== null && { to: input.to });
};
var serializeAws_json1_1CreateLogGroupRequest = function(input, context) {
  return __assign7(__assign7(__assign7({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1CreateLogStreamRequest = function(input, context) {
  return __assign7(__assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteDestinationRequest = function(input, context) {
  return __assign7({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1DeleteLogGroupRequest = function(input, context) {
  return __assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteLogStreamRequest = function(input, context) {
  return __assign7(__assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteMetricFilterRequest = function(input, context) {
  return __assign7(__assign7({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteQueryDefinitionRequest = function(input, context) {
  return __assign7({}, input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId });
};
var serializeAws_json1_1DeleteResourcePolicyRequest = function(input, context) {
  return __assign7({}, input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1DeleteRetentionPolicyRequest = function(input, context) {
  return __assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteSubscriptionFilterRequest = function(input, context) {
  return __assign7(__assign7({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DescribeDestinationsRequest = function(input, context) {
  return __assign7(__assign7(__assign7({}, input.DestinationNamePrefix !== void 0 && input.DestinationNamePrefix !== null && { DestinationNamePrefix: input.DestinationNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeExportTasksRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.statusCode !== void 0 && input.statusCode !== null && { statusCode: input.statusCode }), input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1DescribeLogGroupsRequest = function(input, context) {
  return __assign7(__assign7(__assign7({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupNamePrefix !== void 0 && input.logGroupNamePrefix !== null && { logGroupNamePrefix: input.logGroupNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeLogStreamsRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7(__assign7(__assign7({}, input.descending !== void 0 && input.descending !== null && { descending: input.descending }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.orderBy !== void 0 && input.orderBy !== null && { orderBy: input.orderBy });
};
var serializeAws_json1_1DescribeMetricFiltersRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7(__assign7(__assign7({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeQueriesRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.status !== void 0 && input.status !== null && { status: input.status });
};
var serializeAws_json1_1DescribeQueryDefinitionsRequest = function(input, context) {
  return __assign7(__assign7(__assign7({}, input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.queryDefinitionNamePrefix !== void 0 && input.queryDefinitionNamePrefix !== null && { queryDefinitionNamePrefix: input.queryDefinitionNamePrefix });
};
var serializeAws_json1_1DescribeResourcePoliciesRequest = function(input, context) {
  return __assign7(__assign7({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeSubscriptionFiltersRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DisassociateKmsKeyRequest = function(input, context) {
  return __assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1FilterLogEventsRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7(__assign7(__assign7(__assign7(__assign7(__assign7({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.interleaved !== void 0 && input.interleaved !== null && { interleaved: input.interleaved }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.logStreamNames !== void 0 && input.logStreamNames !== null && {
    logStreamNames: serializeAws_json1_1InputLogStreamNames(input.logStreamNames, context)
  }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogEventsRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7(__assign7(__assign7(__assign7({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startFromHead !== void 0 && input.startFromHead !== null && { startFromHead: input.startFromHead }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogGroupFieldsRequest = function(input, context) {
  return __assign7(__assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.time !== void 0 && input.time !== null && { time: input.time });
};
var serializeAws_json1_1GetLogRecordRequest = function(input, context) {
  return __assign7({}, input.logRecordPointer !== void 0 && input.logRecordPointer !== null && { logRecordPointer: input.logRecordPointer });
};
var serializeAws_json1_1GetQueryResultsRequest = function(input, context) {
  return __assign7({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1InputLogEvent = function(input, context) {
  return __assign7(__assign7({}, input.message !== void 0 && input.message !== null && { message: input.message }), input.timestamp !== void 0 && input.timestamp !== null && { timestamp: input.timestamp });
};
var serializeAws_json1_1InputLogEvents = function(input, context) {
  return input.filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1InputLogEvent(entry, context);
  });
};
var serializeAws_json1_1InputLogStreamNames = function(input, context) {
  return input.filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1ListTagsLogGroupRequest = function(input, context) {
  return __assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1LogGroupNames = function(input, context) {
  return input.filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1MetricTransformation = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7({}, input.defaultValue !== void 0 && input.defaultValue !== null && { defaultValue: input.defaultValue }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.metricValue !== void 0 && input.metricValue !== null && { metricValue: input.metricValue });
};
var serializeAws_json1_1MetricTransformations = function(input, context) {
  return input.filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MetricTransformation(entry, context);
  });
};
var serializeAws_json1_1PutDestinationPolicyRequest = function(input, context) {
  return __assign7(__assign7({}, input.accessPolicy !== void 0 && input.accessPolicy !== null && { accessPolicy: input.accessPolicy }), input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1PutDestinationRequest = function(input, context) {
  return __assign7(__assign7(__assign7({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn }), input.targetArn !== void 0 && input.targetArn !== null && { targetArn: input.targetArn });
};
var serializeAws_json1_1PutLogEventsRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7({}, input.logEvents !== void 0 && input.logEvents !== null && { logEvents: serializeAws_json1_1InputLogEvents(input.logEvents, context) }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.sequenceToken !== void 0 && input.sequenceToken !== null && { sequenceToken: input.sequenceToken });
};
var serializeAws_json1_1PutMetricFilterRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricTransformations !== void 0 && input.metricTransformations !== null && {
    metricTransformations: serializeAws_json1_1MetricTransformations(input.metricTransformations, context)
  });
};
var serializeAws_json1_1PutQueryDefinitionRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7({}, input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.name !== void 0 && input.name !== null && { name: input.name }), input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString });
};
var serializeAws_json1_1PutResourcePolicyRequest = function(input, context) {
  return __assign7(__assign7({}, input.policyDocument !== void 0 && input.policyDocument !== null && { policyDocument: input.policyDocument }), input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1PutRetentionPolicyRequest = function(input, context) {
  return __assign7(__assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.retentionInDays !== void 0 && input.retentionInDays !== null && { retentionInDays: input.retentionInDays });
};
var serializeAws_json1_1PutSubscriptionFilterRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7(__assign7(__assign7({}, input.destinationArn !== void 0 && input.destinationArn !== null && { destinationArn: input.destinationArn }), input.distribution !== void 0 && input.distribution !== null && { distribution: input.distribution }), input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn });
};
var serializeAws_json1_1StartQueryRequest = function(input, context) {
  return __assign7(__assign7(__assign7(__assign7(__assign7(__assign7({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1StopQueryRequest = function(input, context) {
  return __assign7({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1TagList = function(input, context) {
  return input.filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TagLogGroupRequest = function(input, context) {
  return __assign7(__assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1Tags = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign7(__assign7({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1TestEventMessages = function(input, context) {
  return input.filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TestMetricFilterRequest = function(input, context) {
  return __assign7(__assign7({}, input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logEventMessages !== void 0 && input.logEventMessages !== null && {
    logEventMessages: serializeAws_json1_1TestEventMessages(input.logEventMessages, context)
  });
};
var serializeAws_json1_1UntagLogGroupRequest = function(input, context) {
  return __assign7(__assign7({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1TagList(input.tags, context) });
};
var deserializeAws_json1_1CreateExportTaskResponse = function(output, context) {
  return {
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0
  };
};
var deserializeAws_json1_1DataAlreadyAcceptedException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeleteQueryDefinitionResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1DescribeDestinationsResponse = function(output, context) {
  return {
    destinations: output.destinations !== void 0 && output.destinations !== null ? deserializeAws_json1_1Destinations(output.destinations, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeExportTasksResponse = function(output, context) {
  return {
    exportTasks: output.exportTasks !== void 0 && output.exportTasks !== null ? deserializeAws_json1_1ExportTasks(output.exportTasks, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogGroupsResponse = function(output, context) {
  return {
    logGroups: output.logGroups !== void 0 && output.logGroups !== null ? deserializeAws_json1_1LogGroups(output.logGroups, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogStreamsResponse = function(output, context) {
  return {
    logStreams: output.logStreams !== void 0 && output.logStreams !== null ? deserializeAws_json1_1LogStreams(output.logStreams, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeMetricFiltersResponse = function(output, context) {
  return {
    metricFilters: output.metricFilters !== void 0 && output.metricFilters !== null ? deserializeAws_json1_1MetricFilters(output.metricFilters, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeQueriesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queries: output.queries !== void 0 && output.queries !== null ? deserializeAws_json1_1QueryInfoList(output.queries, context) : void 0
  };
};
var deserializeAws_json1_1DescribeQueryDefinitionsResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queryDefinitions: output.queryDefinitions !== void 0 && output.queryDefinitions !== null ? deserializeAws_json1_1QueryDefinitionList(output.queryDefinitions, context) : void 0
  };
};
var deserializeAws_json1_1DescribeResourcePoliciesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    resourcePolicies: output.resourcePolicies !== void 0 && output.resourcePolicies !== null ? deserializeAws_json1_1ResourcePolicies(output.resourcePolicies, context) : void 0
  };
};
var deserializeAws_json1_1DescribeSubscriptionFiltersResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    subscriptionFilters: output.subscriptionFilters !== void 0 && output.subscriptionFilters !== null ? deserializeAws_json1_1SubscriptionFilters(output.subscriptionFilters, context) : void 0
  };
};
var deserializeAws_json1_1Destination = function(output, context) {
  return {
    accessPolicy: output.accessPolicy !== void 0 && output.accessPolicy !== null ? output.accessPolicy : void 0,
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationName: output.destinationName !== void 0 && output.destinationName !== null ? output.destinationName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0,
    targetArn: output.targetArn !== void 0 && output.targetArn !== null ? output.targetArn : void 0
  };
};
var deserializeAws_json1_1Destinations = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Destination(entry, context);
  });
};
var deserializeAws_json1_1ExportTask = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? output.destination : void 0,
    destinationPrefix: output.destinationPrefix !== void 0 && output.destinationPrefix !== null ? output.destinationPrefix : void 0,
    executionInfo: output.executionInfo !== void 0 && output.executionInfo !== null ? deserializeAws_json1_1ExportTaskExecutionInfo(output.executionInfo, context) : void 0,
    from: output.from !== void 0 && output.from !== null ? output.from : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    status: output.status !== void 0 && output.status !== null ? deserializeAws_json1_1ExportTaskStatus(output.status, context) : void 0,
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0,
    taskName: output.taskName !== void 0 && output.taskName !== null ? output.taskName : void 0,
    to: output.to !== void 0 && output.to !== null ? output.to : void 0
  };
};
var deserializeAws_json1_1ExportTaskExecutionInfo = function(output, context) {
  return {
    completionTime: output.completionTime !== void 0 && output.completionTime !== null ? output.completionTime : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0
  };
};
var deserializeAws_json1_1ExportTasks = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ExportTask(entry, context);
  });
};
var deserializeAws_json1_1ExportTaskStatus = function(output, context) {
  return {
    code: output.code !== void 0 && output.code !== null ? output.code : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ExtractedValues = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign7(__assign7({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1FilteredLogEvent = function(output, context) {
  return {
    eventId: output.eventId !== void 0 && output.eventId !== null ? output.eventId : void 0,
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1FilteredLogEvents = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1FilteredLogEvent(entry, context);
  });
};
var deserializeAws_json1_1FilterLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1FilteredLogEvents(output.events, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    searchedLogStreams: output.searchedLogStreams !== void 0 && output.searchedLogStreams !== null ? deserializeAws_json1_1SearchedLogStreams(output.searchedLogStreams, context) : void 0
  };
};
var deserializeAws_json1_1GetLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1OutputLogEvents(output.events, context) : void 0,
    nextBackwardToken: output.nextBackwardToken !== void 0 && output.nextBackwardToken !== null ? output.nextBackwardToken : void 0,
    nextForwardToken: output.nextForwardToken !== void 0 && output.nextForwardToken !== null ? output.nextForwardToken : void 0
  };
};
var deserializeAws_json1_1GetLogGroupFieldsResponse = function(output, context) {
  return {
    logGroupFields: output.logGroupFields !== void 0 && output.logGroupFields !== null ? deserializeAws_json1_1LogGroupFieldList(output.logGroupFields, context) : void 0
  };
};
var deserializeAws_json1_1GetLogRecordResponse = function(output, context) {
  return {
    logRecord: output.logRecord !== void 0 && output.logRecord !== null ? deserializeAws_json1_1LogRecord(output.logRecord, context) : void 0
  };
};
var deserializeAws_json1_1GetQueryResultsResponse = function(output, context) {
  return {
    results: output.results !== void 0 && output.results !== null ? deserializeAws_json1_1QueryResults(output.results, context) : void 0,
    statistics: output.statistics !== void 0 && output.statistics !== null ? deserializeAws_json1_1QueryStatistics(output.statistics, context) : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1InvalidOperationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidSequenceTokenException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListTagsLogGroupResponse = function(output, context) {
  return {
    tags: output.tags !== void 0 && output.tags !== null ? deserializeAws_json1_1Tags(output.tags, context) : void 0
  };
};
var deserializeAws_json1_1LogGroup = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    kmsKeyId: output.kmsKeyId !== void 0 && output.kmsKeyId !== null ? output.kmsKeyId : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricFilterCount: output.metricFilterCount !== void 0 && output.metricFilterCount !== null ? output.metricFilterCount : void 0,
    retentionInDays: output.retentionInDays !== void 0 && output.retentionInDays !== null ? output.retentionInDays : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0
  };
};
var deserializeAws_json1_1LogGroupField = function(output, context) {
  return {
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    percent: output.percent !== void 0 && output.percent !== null ? output.percent : void 0
  };
};
var deserializeAws_json1_1LogGroupFieldList = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroupField(entry, context);
  });
};
var deserializeAws_json1_1LogGroupNames = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LogGroups = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroup(entry, context);
  });
};
var deserializeAws_json1_1LogRecord = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign7(__assign7({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1LogStream = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    firstEventTimestamp: output.firstEventTimestamp !== void 0 && output.firstEventTimestamp !== null ? output.firstEventTimestamp : void 0,
    lastEventTimestamp: output.lastEventTimestamp !== void 0 && output.lastEventTimestamp !== null ? output.lastEventTimestamp : void 0,
    lastIngestionTime: output.lastIngestionTime !== void 0 && output.lastIngestionTime !== null ? output.lastIngestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0,
    uploadSequenceToken: output.uploadSequenceToken !== void 0 && output.uploadSequenceToken !== null ? output.uploadSequenceToken : void 0
  };
};
var deserializeAws_json1_1LogStreams = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogStream(entry, context);
  });
};
var deserializeAws_json1_1MalformedQueryException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    queryCompileError: output.queryCompileError !== void 0 && output.queryCompileError !== null ? deserializeAws_json1_1QueryCompileError(output.queryCompileError, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricTransformations: output.metricTransformations !== void 0 && output.metricTransformations !== null ? deserializeAws_json1_1MetricTransformations(output.metricTransformations, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilterMatches = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilterMatchRecord(entry, context);
  });
};
var deserializeAws_json1_1MetricFilterMatchRecord = function(output, context) {
  return {
    eventMessage: output.eventMessage !== void 0 && output.eventMessage !== null ? output.eventMessage : void 0,
    eventNumber: output.eventNumber !== void 0 && output.eventNumber !== null ? output.eventNumber : void 0,
    extractedValues: output.extractedValues !== void 0 && output.extractedValues !== null ? deserializeAws_json1_1ExtractedValues(output.extractedValues, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilters = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilter(entry, context);
  });
};
var deserializeAws_json1_1MetricTransformation = function(output, context) {
  return {
    defaultValue: output.defaultValue !== void 0 && output.defaultValue !== null ? output.defaultValue : void 0,
    metricName: output.metricName !== void 0 && output.metricName !== null ? output.metricName : void 0,
    metricNamespace: output.metricNamespace !== void 0 && output.metricNamespace !== null ? output.metricNamespace : void 0,
    metricValue: output.metricValue !== void 0 && output.metricValue !== null ? output.metricValue : void 0
  };
};
var deserializeAws_json1_1MetricTransformations = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricTransformation(entry, context);
  });
};
var deserializeAws_json1_1OperationAbortedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OutputLogEvent = function(output, context) {
  return {
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1OutputLogEvents = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1OutputLogEvent(entry, context);
  });
};
var deserializeAws_json1_1PutDestinationResponse = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? deserializeAws_json1_1Destination(output.destination, context) : void 0
  };
};
var deserializeAws_json1_1PutLogEventsResponse = function(output, context) {
  return {
    nextSequenceToken: output.nextSequenceToken !== void 0 && output.nextSequenceToken !== null ? output.nextSequenceToken : void 0,
    rejectedLogEventsInfo: output.rejectedLogEventsInfo !== void 0 && output.rejectedLogEventsInfo !== null ? deserializeAws_json1_1RejectedLogEventsInfo(output.rejectedLogEventsInfo, context) : void 0
  };
};
var deserializeAws_json1_1PutQueryDefinitionResponse = function(output, context) {
  return {
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0
  };
};
var deserializeAws_json1_1PutResourcePolicyResponse = function(output, context) {
  return {
    resourcePolicy: output.resourcePolicy !== void 0 && output.resourcePolicy !== null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : void 0
  };
};
var deserializeAws_json1_1QueryCompileError = function(output, context) {
  return {
    location: output.location !== void 0 && output.location !== null ? deserializeAws_json1_1QueryCompileErrorLocation(output.location, context) : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1QueryCompileErrorLocation = function(output, context) {
  return {
    endCharOffset: output.endCharOffset !== void 0 && output.endCharOffset !== null ? output.endCharOffset : void 0,
    startCharOffset: output.startCharOffset !== void 0 && output.startCharOffset !== null ? output.startCharOffset : void 0
  };
};
var deserializeAws_json1_1QueryDefinition = function(output, context) {
  return {
    lastModified: output.lastModified !== void 0 && output.lastModified !== null ? output.lastModified : void 0,
    logGroupNames: output.logGroupNames !== void 0 && output.logGroupNames !== null ? deserializeAws_json1_1LogGroupNames(output.logGroupNames, context) : void 0,
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0
  };
};
var deserializeAws_json1_1QueryDefinitionList = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryDefinition(entry, context);
  });
};
var deserializeAws_json1_1QueryInfo = function(output, context) {
  return {
    createTime: output.createTime !== void 0 && output.createTime !== null ? output.createTime : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1QueryInfoList = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryInfo(entry, context);
  });
};
var deserializeAws_json1_1QueryResults = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultRows(entry, context);
  });
};
var deserializeAws_json1_1QueryStatistics = function(output, context) {
  return {
    bytesScanned: output.bytesScanned !== void 0 && output.bytesScanned !== null ? output.bytesScanned : void 0,
    recordsMatched: output.recordsMatched !== void 0 && output.recordsMatched !== null ? output.recordsMatched : void 0,
    recordsScanned: output.recordsScanned !== void 0 && output.recordsScanned !== null ? output.recordsScanned : void 0
  };
};
var deserializeAws_json1_1RejectedLogEventsInfo = function(output, context) {
  return {
    expiredLogEventEndIndex: output.expiredLogEventEndIndex !== void 0 && output.expiredLogEventEndIndex !== null ? output.expiredLogEventEndIndex : void 0,
    tooNewLogEventStartIndex: output.tooNewLogEventStartIndex !== void 0 && output.tooNewLogEventStartIndex !== null ? output.tooNewLogEventStartIndex : void 0,
    tooOldLogEventEndIndex: output.tooOldLogEventEndIndex !== void 0 && output.tooOldLogEventEndIndex !== null ? output.tooOldLogEventEndIndex : void 0
  };
};
var deserializeAws_json1_1ResourceAlreadyExistsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourcePolicies = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResourcePolicy(entry, context);
  });
};
var deserializeAws_json1_1ResourcePolicy = function(output, context) {
  return {
    lastUpdatedTime: output.lastUpdatedTime !== void 0 && output.lastUpdatedTime !== null ? output.lastUpdatedTime : void 0,
    policyDocument: output.policyDocument !== void 0 && output.policyDocument !== null ? output.policyDocument : void 0,
    policyName: output.policyName !== void 0 && output.policyName !== null ? output.policyName : void 0
  };
};
var deserializeAws_json1_1ResultField = function(output, context) {
  return {
    field: output.field !== void 0 && output.field !== null ? output.field : void 0,
    value: output.value !== void 0 && output.value !== null ? output.value : void 0
  };
};
var deserializeAws_json1_1ResultRows = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultField(entry, context);
  });
};
var deserializeAws_json1_1SearchedLogStream = function(output, context) {
  return {
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    searchedCompletely: output.searchedCompletely !== void 0 && output.searchedCompletely !== null ? output.searchedCompletely : void 0
  };
};
var deserializeAws_json1_1SearchedLogStreams = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SearchedLogStream(entry, context);
  });
};
var deserializeAws_json1_1ServiceUnavailableException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1StartQueryResponse = function(output, context) {
  return {
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0
  };
};
var deserializeAws_json1_1StopQueryResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationArn: output.destinationArn !== void 0 && output.destinationArn !== null ? output.destinationArn : void 0,
    distribution: output.distribution !== void 0 && output.distribution !== null ? output.distribution : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilters = function(output, context) {
  return (output || []).filter(function(e3) {
    return e3 != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SubscriptionFilter(entry, context);
  });
};
var deserializeAws_json1_1Tags = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign7(__assign7({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1TestMetricFilterResponse = function(output, context) {
  return {
    matches: output.matches !== void 0 && output.matches !== null ? deserializeAws_json1_1MetricFilterMatches(output.matches, context) : void 0
  };
};
var deserializeAws_json1_1UnrecognizedClientException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeMetadata3 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody2 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString3 = function(streamBody, context) {
  return collectBody2(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest3 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator3(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest2(contents)];
      }
    });
  });
};
var parseBody3 = function(streamBody, context) {
  return collectBodyString3(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode2 = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k3) {
      return k3.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/middleware-serde/dist/es/deserializerMiddleware.js
var deserializerMiddleware = function(options, deserializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var response, parsed;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              response = _a.sent().response;
              return [4, deserializer(response, options)];
            case 2:
              parsed = _a.sent();
              return [2, {
                response,
                output: parsed
              }];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serializerMiddleware.js
var serializerMiddleware = function(options, serializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter4(void 0, void 0, void 0, function() {
        var request;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, serializer(args.input, options)];
            case 1:
              request = _a.sent();
              return [2, next(__assign8(__assign8({}, args), { request }))];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serdePlugin.js
var deserializerMiddlewareOption = {
  name: "deserializerMiddleware",
  step: "deserialize",
  tags: ["DESERIALIZER"],
  override: true
};
var serializerMiddlewareOption = {
  name: "serializerMiddleware",
  step: "serialize",
  tags: ["SERIALIZER"],
  override: true
};
function getSerdePlugin2(config, serializer, deserializer) {
  return {
    applyToStack: function(commandStack) {
      commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
    }
  };
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/AssociateKmsKeyCommand.js
var AssociateKmsKeyCommand = function(_super) {
  __extends3(AssociateKmsKeyCommand2, _super);
  function AssociateKmsKeyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AssociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "AssociateKmsKeyCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: AssociateKmsKeyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AssociateKmsKeyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1AssociateKmsKeyCommand(input, context);
  };
  AssociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1AssociateKmsKeyCommand(output, context);
  };
  return AssociateKmsKeyCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CancelExportTaskCommand.js
var CancelExportTaskCommand = function(_super) {
  __extends3(CancelExportTaskCommand2, _super);
  function CancelExportTaskCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CancelExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CancelExportTaskCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: CancelExportTaskRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CancelExportTaskCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CancelExportTaskCommand(input, context);
  };
  CancelExportTaskCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CancelExportTaskCommand(output, context);
  };
  return CancelExportTaskCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateExportTaskCommand.js
var CreateExportTaskCommand = function(_super) {
  __extends3(CreateExportTaskCommand2, _super);
  function CreateExportTaskCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateExportTaskCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateExportTaskRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateExportTaskResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateExportTaskCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateExportTaskCommand(input, context);
  };
  CreateExportTaskCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateExportTaskCommand(output, context);
  };
  return CreateExportTaskCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogGroupCommand.js
var CreateLogGroupCommand = function(_super) {
  __extends3(CreateLogGroupCommand2, _super);
  function CreateLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateLogGroupCommand(input, context);
  };
  CreateLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateLogGroupCommand(output, context);
  };
  return CreateLogGroupCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogStreamCommand.js
var CreateLogStreamCommand = function(_super) {
  __extends3(CreateLogStreamCommand2, _super);
  function CreateLogStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateLogStreamCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateLogStreamRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateLogStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateLogStreamCommand(input, context);
  };
  CreateLogStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateLogStreamCommand(output, context);
  };
  return CreateLogStreamCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteDestinationCommand.js
var DeleteDestinationCommand = function(_super) {
  __extends3(DeleteDestinationCommand2, _super);
  function DeleteDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteDestinationCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteDestinationCommand(input, context);
  };
  DeleteDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteDestinationCommand(output, context);
  };
  return DeleteDestinationCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogGroupCommand.js
var DeleteLogGroupCommand = function(_super) {
  __extends3(DeleteLogGroupCommand2, _super);
  function DeleteLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteLogGroupCommand(input, context);
  };
  DeleteLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteLogGroupCommand(output, context);
  };
  return DeleteLogGroupCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogStreamCommand.js
var DeleteLogStreamCommand = function(_super) {
  __extends3(DeleteLogStreamCommand2, _super);
  function DeleteLogStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteLogStreamCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteLogStreamRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteLogStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteLogStreamCommand(input, context);
  };
  DeleteLogStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteLogStreamCommand(output, context);
  };
  return DeleteLogStreamCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteMetricFilterCommand.js
var DeleteMetricFilterCommand = function(_super) {
  __extends3(DeleteMetricFilterCommand2, _super);
  function DeleteMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteMetricFilterCommand(input, context);
  };
  DeleteMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteMetricFilterCommand(output, context);
  };
  return DeleteMetricFilterCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteQueryDefinitionCommand.js
var DeleteQueryDefinitionCommand = function(_super) {
  __extends3(DeleteQueryDefinitionCommand2, _super);
  function DeleteQueryDefinitionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteQueryDefinitionCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteQueryDefinitionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteQueryDefinitionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteQueryDefinitionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteQueryDefinitionCommand(input, context);
  };
  DeleteQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteQueryDefinitionCommand(output, context);
  };
  return DeleteQueryDefinitionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteResourcePolicyCommand.js
var DeleteResourcePolicyCommand = function(_super) {
  __extends3(DeleteResourcePolicyCommand2, _super);
  function DeleteResourcePolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteResourcePolicyCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteResourcePolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteResourcePolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteResourcePolicyCommand(input, context);
  };
  DeleteResourcePolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteResourcePolicyCommand(output, context);
  };
  return DeleteResourcePolicyCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteRetentionPolicyCommand.js
var DeleteRetentionPolicyCommand = function(_super) {
  __extends3(DeleteRetentionPolicyCommand2, _super);
  function DeleteRetentionPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteRetentionPolicyCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteRetentionPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteRetentionPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteRetentionPolicyCommand(input, context);
  };
  DeleteRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteRetentionPolicyCommand(output, context);
  };
  return DeleteRetentionPolicyCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteSubscriptionFilterCommand.js
var DeleteSubscriptionFilterCommand = function(_super) {
  __extends3(DeleteSubscriptionFilterCommand2, _super);
  function DeleteSubscriptionFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteSubscriptionFilterCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteSubscriptionFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteSubscriptionFilterCommand(input, context);
  };
  DeleteSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteSubscriptionFilterCommand(output, context);
  };
  return DeleteSubscriptionFilterCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeDestinationsCommand.js
var DescribeDestinationsCommand = function(_super) {
  __extends3(DescribeDestinationsCommand2, _super);
  function DescribeDestinationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeDestinationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeDestinationsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeDestinationsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeDestinationsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeDestinationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeDestinationsCommand(input, context);
  };
  DescribeDestinationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeDestinationsCommand(output, context);
  };
  return DescribeDestinationsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeExportTasksCommand.js
var DescribeExportTasksCommand = function(_super) {
  __extends3(DescribeExportTasksCommand2, _super);
  function DescribeExportTasksCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeExportTasksCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeExportTasksCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeExportTasksRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeExportTasksResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeExportTasksCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeExportTasksCommand(input, context);
  };
  DescribeExportTasksCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeExportTasksCommand(output, context);
  };
  return DescribeExportTasksCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogGroupsCommand.js
var DescribeLogGroupsCommand = function(_super) {
  __extends3(DescribeLogGroupsCommand2, _super);
  function DescribeLogGroupsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLogGroupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeLogGroupsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLogGroupsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLogGroupsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLogGroupsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeLogGroupsCommand(input, context);
  };
  DescribeLogGroupsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeLogGroupsCommand(output, context);
  };
  return DescribeLogGroupsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogStreamsCommand.js
var DescribeLogStreamsCommand = function(_super) {
  __extends3(DescribeLogStreamsCommand2, _super);
  function DescribeLogStreamsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLogStreamsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeLogStreamsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLogStreamsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLogStreamsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLogStreamsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeLogStreamsCommand(input, context);
  };
  DescribeLogStreamsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeLogStreamsCommand(output, context);
  };
  return DescribeLogStreamsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeMetricFiltersCommand.js
var DescribeMetricFiltersCommand = function(_super) {
  __extends3(DescribeMetricFiltersCommand2, _super);
  function DescribeMetricFiltersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeMetricFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeMetricFiltersCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeMetricFiltersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeMetricFiltersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeMetricFiltersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeMetricFiltersCommand(input, context);
  };
  DescribeMetricFiltersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeMetricFiltersCommand(output, context);
  };
  return DescribeMetricFiltersCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueriesCommand.js
var DescribeQueriesCommand = function(_super) {
  __extends3(DescribeQueriesCommand2, _super);
  function DescribeQueriesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeQueriesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeQueriesCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeQueriesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeQueriesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeQueriesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeQueriesCommand(input, context);
  };
  DescribeQueriesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeQueriesCommand(output, context);
  };
  return DescribeQueriesCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueryDefinitionsCommand.js
var DescribeQueryDefinitionsCommand = function(_super) {
  __extends3(DescribeQueryDefinitionsCommand2, _super);
  function DescribeQueryDefinitionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeQueryDefinitionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeQueryDefinitionsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeQueryDefinitionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeQueryDefinitionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeQueryDefinitionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeQueryDefinitionsCommand(input, context);
  };
  DescribeQueryDefinitionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeQueryDefinitionsCommand(output, context);
  };
  return DescribeQueryDefinitionsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeResourcePoliciesCommand.js
var DescribeResourcePoliciesCommand = function(_super) {
  __extends3(DescribeResourcePoliciesCommand2, _super);
  function DescribeResourcePoliciesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeResourcePoliciesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeResourcePoliciesCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeResourcePoliciesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeResourcePoliciesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeResourcePoliciesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeResourcePoliciesCommand(input, context);
  };
  DescribeResourcePoliciesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeResourcePoliciesCommand(output, context);
  };
  return DescribeResourcePoliciesCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeSubscriptionFiltersCommand.js
var DescribeSubscriptionFiltersCommand = function(_super) {
  __extends3(DescribeSubscriptionFiltersCommand2, _super);
  function DescribeSubscriptionFiltersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeSubscriptionFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeSubscriptionFiltersCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeSubscriptionFiltersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeSubscriptionFiltersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeSubscriptionFiltersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeSubscriptionFiltersCommand(input, context);
  };
  DescribeSubscriptionFiltersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeSubscriptionFiltersCommand(output, context);
  };
  return DescribeSubscriptionFiltersCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DisassociateKmsKeyCommand.js
var DisassociateKmsKeyCommand = function(_super) {
  __extends3(DisassociateKmsKeyCommand2, _super);
  function DisassociateKmsKeyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DisassociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DisassociateKmsKeyCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: DisassociateKmsKeyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DisassociateKmsKeyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DisassociateKmsKeyCommand(input, context);
  };
  DisassociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DisassociateKmsKeyCommand(output, context);
  };
  return DisassociateKmsKeyCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/FilterLogEventsCommand.js
var FilterLogEventsCommand = function(_super) {
  __extends3(FilterLogEventsCommand2, _super);
  function FilterLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  FilterLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "FilterLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: FilterLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: FilterLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  FilterLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1FilterLogEventsCommand(input, context);
  };
  FilterLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1FilterLogEventsCommand(output, context);
  };
  return FilterLogEventsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogEventsCommand.js
var GetLogEventsCommand = function(_super) {
  __extends3(GetLogEventsCommand2, _super);
  function GetLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogEventsCommand(input, context);
  };
  GetLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogEventsCommand(output, context);
  };
  return GetLogEventsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogGroupFieldsCommand.js
var GetLogGroupFieldsCommand = function(_super) {
  __extends3(GetLogGroupFieldsCommand2, _super);
  function GetLogGroupFieldsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogGroupFieldsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogGroupFieldsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogGroupFieldsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogGroupFieldsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogGroupFieldsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogGroupFieldsCommand(input, context);
  };
  GetLogGroupFieldsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogGroupFieldsCommand(output, context);
  };
  return GetLogGroupFieldsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogRecordCommand.js
var GetLogRecordCommand = function(_super) {
  __extends3(GetLogRecordCommand2, _super);
  function GetLogRecordCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogRecordCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogRecordCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogRecordRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogRecordResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogRecordCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogRecordCommand(input, context);
  };
  GetLogRecordCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogRecordCommand(output, context);
  };
  return GetLogRecordCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetQueryResultsCommand.js
var GetQueryResultsCommand = function(_super) {
  __extends3(GetQueryResultsCommand2, _super);
  function GetQueryResultsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetQueryResultsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetQueryResultsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetQueryResultsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetQueryResultsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetQueryResultsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetQueryResultsCommand(input, context);
  };
  GetQueryResultsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetQueryResultsCommand(output, context);
  };
  return GetQueryResultsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/ListTagsLogGroupCommand.js
var ListTagsLogGroupCommand = function(_super) {
  __extends3(ListTagsLogGroupCommand2, _super);
  function ListTagsLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "ListTagsLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsLogGroupResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListTagsLogGroupCommand(input, context);
  };
  ListTagsLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListTagsLogGroupCommand(output, context);
  };
  return ListTagsLogGroupCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationCommand.js
var PutDestinationCommand = function(_super) {
  __extends3(PutDestinationCommand2, _super);
  function PutDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutDestinationCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutDestinationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutDestinationCommand(input, context);
  };
  PutDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutDestinationCommand(output, context);
  };
  return PutDestinationCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationPolicyCommand.js
var PutDestinationPolicyCommand = function(_super) {
  __extends3(PutDestinationPolicyCommand2, _super);
  function PutDestinationPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutDestinationPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutDestinationPolicyCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutDestinationPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutDestinationPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutDestinationPolicyCommand(input, context);
  };
  PutDestinationPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutDestinationPolicyCommand(output, context);
  };
  return PutDestinationPolicyCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutLogEventsCommand.js
var PutLogEventsCommand = function(_super) {
  __extends3(PutLogEventsCommand2, _super);
  function PutLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutLogEventsCommand(input, context);
  };
  PutLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutLogEventsCommand(output, context);
  };
  return PutLogEventsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutMetricFilterCommand.js
var PutMetricFilterCommand = function(_super) {
  __extends3(PutMetricFilterCommand2, _super);
  function PutMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutMetricFilterCommand(input, context);
  };
  PutMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutMetricFilterCommand(output, context);
  };
  return PutMetricFilterCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutQueryDefinitionCommand.js
var PutQueryDefinitionCommand = function(_super) {
  __extends3(PutQueryDefinitionCommand2, _super);
  function PutQueryDefinitionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutQueryDefinitionCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutQueryDefinitionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutQueryDefinitionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutQueryDefinitionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutQueryDefinitionCommand(input, context);
  };
  PutQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutQueryDefinitionCommand(output, context);
  };
  return PutQueryDefinitionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutResourcePolicyCommand.js
var PutResourcePolicyCommand = function(_super) {
  __extends3(PutResourcePolicyCommand2, _super);
  function PutResourcePolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutResourcePolicyCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutResourcePolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutResourcePolicyResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutResourcePolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutResourcePolicyCommand(input, context);
  };
  PutResourcePolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutResourcePolicyCommand(output, context);
  };
  return PutResourcePolicyCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutRetentionPolicyCommand.js
var PutRetentionPolicyCommand = function(_super) {
  __extends3(PutRetentionPolicyCommand2, _super);
  function PutRetentionPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutRetentionPolicyCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutRetentionPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutRetentionPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutRetentionPolicyCommand(input, context);
  };
  PutRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutRetentionPolicyCommand(output, context);
  };
  return PutRetentionPolicyCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutSubscriptionFilterCommand.js
var PutSubscriptionFilterCommand = function(_super) {
  __extends3(PutSubscriptionFilterCommand2, _super);
  function PutSubscriptionFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutSubscriptionFilterCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutSubscriptionFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutSubscriptionFilterCommand(input, context);
  };
  PutSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutSubscriptionFilterCommand(output, context);
  };
  return PutSubscriptionFilterCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StartQueryCommand.js
var StartQueryCommand = function(_super) {
  __extends3(StartQueryCommand2, _super);
  function StartQueryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StartQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "StartQueryCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: StartQueryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: StartQueryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StartQueryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StartQueryCommand(input, context);
  };
  StartQueryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StartQueryCommand(output, context);
  };
  return StartQueryCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StopQueryCommand.js
var StopQueryCommand = function(_super) {
  __extends3(StopQueryCommand2, _super);
  function StopQueryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StopQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "StopQueryCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: StopQueryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: StopQueryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StopQueryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StopQueryCommand(input, context);
  };
  StopQueryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StopQueryCommand(output, context);
  };
  return StopQueryCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TagLogGroupCommand.js
var TagLogGroupCommand = function(_super) {
  __extends3(TagLogGroupCommand2, _super);
  function TagLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "TagLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TagLogGroupCommand(input, context);
  };
  TagLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TagLogGroupCommand(output, context);
  };
  return TagLogGroupCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TestMetricFilterCommand.js
var TestMetricFilterCommand = function(_super) {
  __extends3(TestMetricFilterCommand2, _super);
  function TestMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TestMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "TestMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: TestMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: TestMetricFilterResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TestMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TestMetricFilterCommand(input, context);
  };
  TestMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TestMetricFilterCommand(output, context);
  };
  return TestMetricFilterCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/UntagLogGroupCommand.js
var UntagLogGroupCommand = function(_super) {
  __extends3(UntagLogGroupCommand2, _super);
  function UntagLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger12 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "UntagLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger12,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UntagLogGroupCommand(input, context);
  };
  UntagLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UntagLogGroupCommand(output, context);
  };
  return UntagLogGroupCommand2;
}(Command2);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogs.js
var CloudWatchLogs = function(_super) {
  __extends3(CloudWatchLogs2, _super);
  function CloudWatchLogs2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CloudWatchLogs2.prototype.associateKmsKey = function(args, optionsOrCb, cb) {
    var command = new AssociateKmsKeyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.cancelExportTask = function(args, optionsOrCb, cb) {
    var command = new CancelExportTaskCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createExportTask = function(args, optionsOrCb, cb) {
    var command = new CreateExportTaskCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createLogGroup = function(args, optionsOrCb, cb) {
    var command = new CreateLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createLogStream = function(args, optionsOrCb, cb) {
    var command = new CreateLogStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteDestination = function(args, optionsOrCb, cb) {
    var command = new DeleteDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteLogGroup = function(args, optionsOrCb, cb) {
    var command = new DeleteLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteLogStream = function(args, optionsOrCb, cb) {
    var command = new DeleteLogStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteMetricFilter = function(args, optionsOrCb, cb) {
    var command = new DeleteMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteQueryDefinition = function(args, optionsOrCb, cb) {
    var command = new DeleteQueryDefinitionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteResourcePolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteResourcePolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteRetentionPolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteRetentionPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteSubscriptionFilter = function(args, optionsOrCb, cb) {
    var command = new DeleteSubscriptionFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeDestinations = function(args, optionsOrCb, cb) {
    var command = new DescribeDestinationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeExportTasks = function(args, optionsOrCb, cb) {
    var command = new DescribeExportTasksCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeLogGroups = function(args, optionsOrCb, cb) {
    var command = new DescribeLogGroupsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeLogStreams = function(args, optionsOrCb, cb) {
    var command = new DescribeLogStreamsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeMetricFilters = function(args, optionsOrCb, cb) {
    var command = new DescribeMetricFiltersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeQueries = function(args, optionsOrCb, cb) {
    var command = new DescribeQueriesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeQueryDefinitions = function(args, optionsOrCb, cb) {
    var command = new DescribeQueryDefinitionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeResourcePolicies = function(args, optionsOrCb, cb) {
    var command = new DescribeResourcePoliciesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeSubscriptionFilters = function(args, optionsOrCb, cb) {
    var command = new DescribeSubscriptionFiltersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.disassociateKmsKey = function(args, optionsOrCb, cb) {
    var command = new DisassociateKmsKeyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.filterLogEvents = function(args, optionsOrCb, cb) {
    var command = new FilterLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogEvents = function(args, optionsOrCb, cb) {
    var command = new GetLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogGroupFields = function(args, optionsOrCb, cb) {
    var command = new GetLogGroupFieldsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogRecord = function(args, optionsOrCb, cb) {
    var command = new GetLogRecordCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getQueryResults = function(args, optionsOrCb, cb) {
    var command = new GetQueryResultsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.listTagsLogGroup = function(args, optionsOrCb, cb) {
    var command = new ListTagsLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putDestination = function(args, optionsOrCb, cb) {
    var command = new PutDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putDestinationPolicy = function(args, optionsOrCb, cb) {
    var command = new PutDestinationPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putLogEvents = function(args, optionsOrCb, cb) {
    var command = new PutLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putMetricFilter = function(args, optionsOrCb, cb) {
    var command = new PutMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putQueryDefinition = function(args, optionsOrCb, cb) {
    var command = new PutQueryDefinitionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putResourcePolicy = function(args, optionsOrCb, cb) {
    var command = new PutResourcePolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putRetentionPolicy = function(args, optionsOrCb, cb) {
    var command = new PutRetentionPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putSubscriptionFilter = function(args, optionsOrCb, cb) {
    var command = new PutSubscriptionFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.startQuery = function(args, optionsOrCb, cb) {
    var command = new StartQueryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.stopQuery = function(args, optionsOrCb, cb) {
    var command = new StopQueryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.tagLogGroup = function(args, optionsOrCb, cb) {
    var command = new TagLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.testMetricFilter = function(args, optionsOrCb, cb) {
    var command = new TestMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.untagLogGroup = function(args, optionsOrCb, cb) {
    var command = new UntagLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return CloudWatchLogs2;
}(CloudWatchLogsClient);

// node_modules/@aws-amplify/core/lib-esm/Providers/AWSCloudWatchProvider.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator5 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read12 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
      if (ar || !(i3 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i3);
        ar[i3] = from[i3];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var logger8 = new ConsoleLogger("AWSCloudWatch");
var AWSCloudWatchProvider = function() {
  function AWSCloudWatchProvider2(config) {
    this.configure(config);
    this._dataTracker = {
      eventUploadInProgress: false,
      logEvents: []
    };
    this._currentLogBatch = [];
    this._initiateLogPushInterval();
  }
  AWSCloudWatchProvider2.prototype.getProviderName = function() {
    return AWSCloudWatchProvider2.PROVIDER_NAME;
  };
  AWSCloudWatchProvider2.prototype.getCategoryName = function() {
    return AWSCloudWatchProvider2.CATEGORY;
  };
  AWSCloudWatchProvider2.prototype.getLogQueue = function() {
    return this._dataTracker.logEvents;
  };
  AWSCloudWatchProvider2.prototype.configure = function(config) {
    if (!config)
      return this._config || {};
    var conf = Object.assign({}, this._config, parseAWSExports(config).Logging, config);
    this._config = conf;
    return this._config;
  };
  AWSCloudWatchProvider2.prototype.createLogGroup = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_1;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("creating new log group in CloudWatch - ", params.logGroupName);
            cmd = new CreateLogGroupCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_1 = _a.sent();
            logger8.error("error creating log group - ".concat(error_1));
            throw error_1;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogGroups = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_2;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("getting list of log groups");
            cmd = new DescribeLogGroupsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_2 = _a.sent();
            logger8.error("error getting log group - ".concat(error_2));
            throw error_2;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.createLogStream = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_3;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("creating new log stream in CloudWatch - ", params.logStreamName);
            cmd = new CreateLogStreamCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_3 = _a.sent();
            logger8.error("error creating log stream - ".concat(error_3));
            throw error_3;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogStreams = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_4;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("getting list of log streams");
            cmd = new DescribeLogStreamsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_4 = _a.sent();
            logger8.error("error getting log stream - ".concat(error_4));
            throw error_4;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogEvents = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_5;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("getting log events from stream - ", params.logStreamName);
            cmd = new GetLogEventsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_5 = _a.sent();
            logger8.error("error getting log events - ".concat(error_5));
            throw error_5;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.pushLogs = function(logs) {
    logger8.debug("pushing log events to Cloudwatch...");
    this._dataTracker.logEvents = __spreadArray4(__spreadArray4([], __read12(this._dataTracker.logEvents), false), __read12(logs), false);
  };
  AWSCloudWatchProvider2.prototype._validateLogGroupExistsAndCreate = function(logGroupName) {
    return __awaiter5(this, void 0, void 0, function() {
      var credentialsOK, currGroups, foundGroups, err_1, errString;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this._dataTracker.verifiedLogGroup) {
              return [2, this._dataTracker.verifiedLogGroup];
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, 5, , 6]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            return [4, this.getLogGroups({
              logGroupNamePrefix: logGroupName
            })];
          case 3:
            currGroups = _a.sent();
            if (!(typeof currGroups === "string") && currGroups.logGroups) {
              foundGroups = currGroups.logGroups.filter(function(group) {
                return group.logGroupName === logGroupName;
              });
              if (foundGroups.length > 0) {
                this._dataTracker.verifiedLogGroup = foundGroups[0];
                return [2, foundGroups[0]];
              }
            }
            return [4, this.createLogGroup({ logGroupName })];
          case 4:
            _a.sent();
            return [2, null];
          case 5:
            err_1 = _a.sent();
            errString = "failure during log group search: ".concat(err_1);
            logger8.error(errString);
            throw err_1;
          case 6:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._validateLogStreamExists = function(logGroupName, logStreamName) {
    return __awaiter5(this, void 0, void 0, function() {
      var credentialsOK, currStreams, foundStreams, err_2, errString;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            return [4, this.getLogStreams({
              logGroupName,
              logStreamNamePrefix: logStreamName
            })];
          case 2:
            currStreams = _a.sent();
            if (currStreams.logStreams) {
              foundStreams = currStreams.logStreams.filter(function(stream) {
                return stream.logStreamName === logStreamName;
              });
              if (foundStreams.length > 0) {
                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;
                return [2, foundStreams[0]];
              }
            }
            return [4, this.createLogStream({
              logGroupName,
              logStreamName
            })];
          case 3:
            _a.sent();
            return [2, null];
          case 4:
            err_2 = _a.sent();
            errString = "failure during log stream search: ".concat(err_2);
            logger8.error(errString);
            throw err_2;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._sendLogEvents = function(params) {
    return __awaiter5(this, void 0, void 0, function() {
      var credentialsOK, cmd, client, output, err_3, errString;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            logger8.debug("sending log events to stream - ", params.logStreamName);
            cmd = new PutLogEventsCommand(params);
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 2:
            output = _a.sent();
            return [2, output];
          case 3:
            err_3 = _a.sent();
            errString = "failure during log push: ".concat(err_3);
            logger8.error(errString);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._initCloudWatchLogs = function() {
    return new CloudWatchLogsClient({
      region: this._config.region,
      credentials: this._config.credentials,
      customUserAgent: getAmplifyUserAgentObject(),
      endpoint: this._config.endpoint
    });
  };
  AWSCloudWatchProvider2.prototype._ensureCredentials = function() {
    return __awaiter5(this, void 0, void 0, function() {
      var _this = this;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, Credentials.get().then(function(credentials) {
              if (!credentials)
                return false;
              var cred = Credentials.shear(credentials);
              logger8.debug("set credentials for logging", cred);
              _this._config.credentials = cred;
              return true;
            }).catch(function(error) {
              logger8.warn("ensure credentials error", error);
              return false;
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._getNextSequenceToken = function() {
    return __awaiter5(this, void 0, void 0, function() {
      var logStream, err_4;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {
              return [2, this._nextSequenceToken];
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];
          case 2:
            _a.sent();
            this._nextSequenceToken = void 0;
            return [4, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];
          case 3:
            logStream = _a.sent();
            if (logStream) {
              this._nextSequenceToken = logStream.uploadSequenceToken;
            }
            return [2, this._nextSequenceToken];
          case 4:
            err_4 = _a.sent();
            logger8.error("failure while getting next sequence token: ".concat(err_4));
            throw err_4;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._safeUploadLogEvents = function() {
    return __awaiter5(this, void 0, void 0, function() {
      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            return [4, this._getNextSequenceToken()];
          case 1:
            seqToken = _a.sent();
            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;
            putLogsPayload = {
              logGroupName: this._config.logGroupName,
              logStreamName: this._config.logStreamName,
              logEvents: logBatch,
              sequenceToken: seqToken
            };
            this._dataTracker.eventUploadInProgress = true;
            return [4, this._sendLogEvents(putLogsPayload)];
          case 2:
            sendLogEventsResponse = _a.sent();
            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;
            this._dataTracker.eventUploadInProgress = false;
            this._currentLogBatch = [];
            return [2, sendLogEventsResponse];
          case 3:
            err_5 = _a.sent();
            logger8.error("error during _safeUploadLogEvents: ".concat(err_5));
            if (RETRY_ERROR_CODES.includes(err_5.name)) {
              this._getNewSequenceTokenAndSubmit({
                logEvents: this._currentLogBatch,
                logGroupName: this._config.logGroupName,
                logStreamName: this._config.logStreamName
              });
            } else {
              this._dataTracker.eventUploadInProgress = false;
              throw err_5;
            }
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._getBufferedBatchOfLogs = function() {
    var currentEventIdx = 0;
    var totalByteSize = 0;
    while (currentEventIdx < this._dataTracker.logEvents.length) {
      var currentEvent = this._dataTracker.logEvents[currentEventIdx];
      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;
      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {
        var errString = "Log entry exceeds maximum size for CloudWatch logs. Log size: ".concat(eventSize, ". Truncating log message.");
        logger8.warn(errString);
        currentEvent.message = currentEvent.message.substring(0, eventSize);
      }
      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)
        break;
      totalByteSize += eventSize;
      currentEventIdx++;
    }
    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);
    return this._currentLogBatch;
  };
  AWSCloudWatchProvider2.prototype._getNewSequenceTokenAndSubmit = function(payload) {
    return __awaiter5(this, void 0, void 0, function() {
      var seqToken, sendLogEventsRepsonse, err_6;
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            this._nextSequenceToken = void 0;
            this._dataTracker.eventUploadInProgress = true;
            return [4, this._getNextSequenceToken()];
          case 1:
            seqToken = _a.sent();
            payload.sequenceToken = seqToken;
            return [4, this._sendLogEvents(payload)];
          case 2:
            sendLogEventsRepsonse = _a.sent();
            this._dataTracker.eventUploadInProgress = false;
            this._currentLogBatch = [];
            return [2, sendLogEventsRepsonse];
          case 3:
            err_6 = _a.sent();
            logger8.error("error when retrying log submission with new sequence token: ".concat(err_6));
            this._dataTracker.eventUploadInProgress = false;
            throw err_6;
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._initiateLogPushInterval = function() {
    var _this = this;
    if (this._timer) {
      clearInterval(this._timer);
    }
    this._timer = setInterval(function() {
      return __awaiter5(_this, void 0, void 0, function() {
        var err_7;
        return __generator5(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              if (!this._getDocUploadPermissibility())
                return [3, 2];
              return [4, this._safeUploadLogEvents()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              return [3, 4];
            case 3:
              err_7 = _a.sent();
              logger8.error("error when calling _safeUploadLogEvents in the timer interval - ".concat(err_7));
              return [3, 4];
            case 4:
              return [2];
          }
        });
      });
    }, 2e3);
  };
  AWSCloudWatchProvider2.prototype._getDocUploadPermissibility = function() {
    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;
  };
  AWSCloudWatchProvider2.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;
  AWSCloudWatchProvider2.CATEGORY = AWS_CLOUDWATCH_CATEGORY;
  return AWSCloudWatchProvider2;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/GoogleOAuth.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator6 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger9 = new ConsoleLogger("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger9.debug("not in the browser, directly resolved");
    return res();
  }
  var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
  if (ga) {
    logger9.debug("google api already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var GoogleOAuth = function() {
  function GoogleOAuth3() {
    this.initialized = false;
    this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
    this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
  }
  GoogleOAuth3.prototype.refreshGoogleToken = function() {
    return __awaiter6(this, void 0, void 0, function() {
      return __generator6(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!this.initialized)
              return [3, 2];
            logger9.debug("need to wait for the Google SDK loaded");
            return [4, waitForInit];
          case 1:
            _a.sent();
            this.initialized = true;
            logger9.debug("finish waiting");
            _a.label = 2;
          case 2:
            return [2, this._refreshGoogleTokenImpl()];
        }
      });
    });
  };
  GoogleOAuth3.prototype._refreshGoogleTokenImpl = function() {
    var ga = null;
    if (browserOrNode().isBrowser)
      ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
    if (!ga) {
      logger9.debug("no gapi auth2 available");
      return Promise.reject("no gapi auth2 available");
    }
    return new Promise(function(res, rej) {
      ga.getAuthInstance().then(function(googleAuth) {
        if (!googleAuth) {
          logger9.debug("google Auth undefined");
          rej(new NonRetryableError("google Auth undefined"));
        }
        var googleUser = googleAuth.currentUser.get();
        if (googleUser.isSignedIn()) {
          logger9.debug("refreshing the google access token");
          googleUser.reloadAuthResponse().then(function(authResponse) {
            var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
            res({ token: id_token, expires_at });
          }).catch(function(err) {
            if (err && err.error === "network_error") {
              rej("Network error reloading google auth response");
            } else {
              rej(new NonRetryableError("Failed to reload google auth response"));
            }
          });
        } else {
          rej(new NonRetryableError("User is not signed in with Google"));
        }
      }).catch(function(err) {
        logger9.debug("Failed to refresh google token", err);
        rej(new NonRetryableError("Failed to refresh google token"));
      });
    });
  };
  return GoogleOAuth3;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/FacebookOAuth.js
var __awaiter7 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator7 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger10 = new ConsoleLogger("CognitoCredentials");
var waitForInit2 = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger10.debug("not in the browser, directly resolved");
    return res();
  }
  var fb = window["FB"];
  if (fb) {
    logger10.debug("FB SDK already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var FacebookOAuth = function() {
  function FacebookOAuth3() {
    this.initialized = false;
    this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
    this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
  }
  FacebookOAuth3.prototype.refreshFacebookToken = function() {
    return __awaiter7(this, void 0, void 0, function() {
      return __generator7(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!this.initialized)
              return [3, 2];
            logger10.debug("need to wait for the Facebook SDK loaded");
            return [4, waitForInit2];
          case 1:
            _a.sent();
            this.initialized = true;
            logger10.debug("finish waiting");
            _a.label = 2;
          case 2:
            return [2, this._refreshFacebookTokenImpl()];
        }
      });
    });
  };
  FacebookOAuth3.prototype._refreshFacebookTokenImpl = function() {
    var fb = null;
    if (browserOrNode().isBrowser)
      fb = window["FB"];
    if (!fb) {
      var errorMessage = "no fb sdk available";
      logger10.debug(errorMessage);
      return Promise.reject(new NonRetryableError(errorMessage));
    }
    return new Promise(function(res, rej) {
      fb.getLoginStatus(function(fbResponse) {
        if (!fbResponse || !fbResponse.authResponse) {
          var errorMessage2 = "no response from facebook when refreshing the jwt token";
          logger10.debug(errorMessage2);
          rej(new NonRetryableError(errorMessage2));
        } else {
          var response = fbResponse.authResponse;
          var accessToken = response.accessToken, expiresIn = response.expiresIn;
          var date = new Date();
          var expires_at = expiresIn * 1e3 + date.getTime();
          if (!accessToken) {
            var errorMessage2 = "the jwtToken is undefined";
            logger10.debug(errorMessage2);
            rej(new NonRetryableError(errorMessage2));
          }
          res({
            token: accessToken,
            expires_at
          });
        }
      }, { scope: "public_profile,email" });
    });
  };
  return FacebookOAuth3;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/index.js
var GoogleOAuth2 = new GoogleOAuth();
var FacebookOAuth2 = new FacebookOAuth();

// node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
var dataMemory = {};
var MemoryStorage = function() {
  function MemoryStorage2() {
  }
  MemoryStorage2.setItem = function(key, value) {
    dataMemory[key] = value;
    return dataMemory[key];
  };
  MemoryStorage2.getItem = function(key) {
    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : void 0;
  };
  MemoryStorage2.removeItem = function(key) {
    return delete dataMemory[key];
  };
  MemoryStorage2.clear = function() {
    dataMemory = {};
    return dataMemory;
  };
  return MemoryStorage2;
}();
var StorageHelper = function() {
  function StorageHelper2() {
    try {
      this.storageWindow = window.localStorage;
      this.storageWindow.setItem("aws.amplify.test-ls", 1);
      this.storageWindow.removeItem("aws.amplify.test-ls");
    } catch (exception) {
      this.storageWindow = MemoryStorage;
    }
  }
  StorageHelper2.prototype.getStorage = function() {
    return this.storageWindow;
  };
  return StorageHelper2;
}();

// node_modules/@aws-amplify/core/lib-esm/RNComponents/index.js
var AsyncStorage = browserOrNode().isBrowser ? new StorageHelper().getStorage() : void 0;

// node_modules/@aws-amplify/core/lib-esm/clients/endpoints/partitions.js
var defaultPartition = {
  id: "aws",
  outputs: {
    dnsSuffix: "amazonaws.com"
  },
  regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
  regions: ["aws-global"]
};
var partitionsInfo = {
  partitions: [
    defaultPartition,
    {
      id: "aws-cn",
      outputs: {
        dnsSuffix: "amazonaws.com.cn"
      },
      regionRegex: "^cn\\-\\w+\\-\\d+$",
      regions: ["aws-cn-global"]
    }
  ]
};

// node_modules/@aws-amplify/core/lib-esm/clients/endpoints/getDnsSuffix.js
var __values5 = function(o3) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
  if (m3)
    return m3.call(o3);
  if (o3 && typeof o3.length === "number")
    return {
      next: function() {
        if (o3 && i3 >= o3.length)
          o3 = void 0;
        return { value: o3 && o3[i3++], done: !o3 };
      }
    };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var getDnsSuffix = function(region) {
  var e_1, _a;
  var partitions = partitionsInfo.partitions;
  try {
    for (var partitions_1 = __values5(partitions), partitions_1_1 = partitions_1.next(); !partitions_1_1.done; partitions_1_1 = partitions_1.next()) {
      var _b = partitions_1_1.value, regions = _b.regions, outputs = _b.outputs, regionRegex = _b.regionRegex;
      var regex = new RegExp(regionRegex);
      if (regions.includes(region) || regex.test(region)) {
        return outputs.dnsSuffix;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (partitions_1_1 && !partitions_1_1.done && (_a = partitions_1.return))
        _a.call(partitions_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return defaultPartition.outputs.dnsSuffix;
};

// node_modules/@aws-amplify/core/lib-esm/clients/handlers/fetch.js
var import_isomorphic_unfetch = __toESM(require_browser());
var __assign9 = function() {
  __assign9 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign9.apply(this, arguments);
};
var __awaiter8 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator8 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var shouldSendBody = function(method) {
  return !["HEAD", "GET", "DELETE"].includes(method.toUpperCase());
};
var fetchTransferHandler = function(_a, _b) {
  var url = _a.url, method = _a.method, headers = _a.headers, body = _a.body;
  var abortSignal = _b.abortSignal;
  return __awaiter8(void 0, void 0, void 0, function() {
    var resp, e_1, responseHeaders, httpResponse, bodyWithMixin;
    var _c, _d;
    return __generator8(this, function(_e) {
      switch (_e.label) {
        case 0:
          _e.trys.push([0, 2, , 3]);
          return [4, fetch(url, {
            method,
            headers,
            body: shouldSendBody(method) ? body : void 0,
            signal: abortSignal
          })];
        case 1:
          resp = _e.sent();
          return [3, 3];
        case 2:
          e_1 = _e.sent();
          if (e_1 instanceof TypeError) {
            throw new Error("Network error");
          }
          throw e_1;
        case 3:
          responseHeaders = {};
          (_c = resp.headers) === null || _c === void 0 ? void 0 : _c.forEach(function(value, key) {
            responseHeaders[key.toLowerCase()] = value;
          });
          httpResponse = {
            statusCode: resp.status,
            headers: responseHeaders,
            body: null
          };
          bodyWithMixin = Object.assign((_d = resp.body) !== null && _d !== void 0 ? _d : {}, {
            text: withMemoization(function() {
              return resp.text();
            }),
            blob: withMemoization(function() {
              return resp.blob();
            }),
            json: withMemoization(function() {
              return resp.json();
            })
          });
          return [2, __assign9(__assign9({}, httpResponse), { body: bodyWithMixin })];
      }
    });
  });
};
var withMemoization = function(payloadAccessor) {
  var cached;
  return function() {
    if (!cached) {
      cached = payloadAccessor();
    }
    return cached;
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/middleware.js
var __awaiter9 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator9 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var DEFAULT_RETRY_ATTEMPTS = 3;
var retryMiddleware2 = function(_a) {
  var _b = _a.maxAttempts, maxAttempts = _b === void 0 ? DEFAULT_RETRY_ATTEMPTS : _b, retryDecider = _a.retryDecider, computeDelay = _a.computeDelay, abortSignal = _a.abortSignal;
  if (maxAttempts < 1) {
    throw new Error("maxAttempts must be greater than 0");
  }
  return function(next, context) {
    return function retryMiddleware3(request) {
      var _a2;
      return __awaiter9(this, void 0, void 0, function() {
        var error, attemptsCount, response, e_1, delay;
        return __generator9(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              attemptsCount = (_a2 = context.attemptsCount) !== null && _a2 !== void 0 ? _a2 : 0;
              _b2.label = 1;
            case 1:
              if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts))
                return [3, 11];
              error = void 0;
              response = void 0;
              _b2.label = 2;
            case 2:
              _b2.trys.push([2, 4, , 5]);
              return [4, next(request)];
            case 3:
              response = _b2.sent();
              return [3, 5];
            case 4:
              e_1 = _b2.sent();
              error = e_1;
              return [3, 5];
            case 5:
              attemptsCount = context.attemptsCount > attemptsCount ? context.attemptsCount : attemptsCount + 1;
              context.attemptsCount = attemptsCount;
              return [4, retryDecider(response, error)];
            case 6:
              if (!_b2.sent())
                return [3, 9];
              if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts))
                return [3, 8];
              delay = computeDelay(attemptsCount);
              return [4, cancellableSleep(delay, abortSignal)];
            case 7:
              _b2.sent();
              _b2.label = 8;
            case 8:
              return [3, 1];
            case 9:
              if (response) {
                updateMetadataAttempts(response, attemptsCount);
                return [2, response];
              } else {
                updateMetadataAttempts(error, attemptsCount);
                throw error;
              }
              _b2.label = 10;
            case 10:
              return [3, 1];
            case 11:
              throw (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) ? new Error("Request aborted") : error !== null && error !== void 0 ? error : new Error("Retry attempts exhausted");
          }
        });
      });
    };
  };
};
var cancellableSleep = function(timeoutMs, abortSignal) {
  if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
    return Promise.resolve();
  }
  var timeoutId;
  var sleepPromiseResolveFn;
  var sleepPromise = new Promise(function(resolve) {
    sleepPromiseResolveFn = resolve;
    timeoutId = setTimeout(resolve, timeoutMs);
  });
  abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener("abort", function cancelSleep(event) {
    clearTimeout(timeoutId);
    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener("abort", cancelSleep);
    sleepPromiseResolveFn();
  });
  return sleepPromise;
};
var isMetadataBearer = function(response) {
  return typeof (response === null || response === void 0 ? void 0 : response["$metadata"]) === "object";
};
var updateMetadataAttempts = function(nextHandlerOutput, attempts) {
  if (isMetadataBearer(nextHandlerOutput)) {
    nextHandlerOutput.$metadata.attempts = attempts;
  }
  nextHandlerOutput["$metadata"] = { attempts };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/jitteredBackoff.js
var DEFAULT_MAX_DELAY_MS = 5 * 60 * 1e3;
var jitteredBackoff2 = function(attempt) {
  var delayFunction = jitteredBackoff(DEFAULT_MAX_DELAY_MS);
  var delay = delayFunction(attempt);
  return delay === false ? DEFAULT_MAX_DELAY_MS : delay;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/isClockSkewError.js
var CLOCK_SKEW_ERROR_CODES2 = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch",
  "BadRequestException"
];
var isClockSkewError2 = function(errorCode) {
  return CLOCK_SKEW_ERROR_CODES2.includes(errorCode);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/defaultRetryDecider.js
var __awaiter10 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator10 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getRetryDecider = function(errorParser) {
  return function(response, error) {
    return __awaiter10(void 0, void 0, void 0, function() {
      var errorCode, _a, statusCode;
      var _b;
      return __generator10(this, function(_c) {
        switch (_c.label) {
          case 0:
            if (!(error !== null && error !== void 0))
              return [3, 1];
            _a = error;
            return [3, 3];
          case 1:
            return [4, errorParser(response)];
          case 2:
            _a = _c.sent();
            _c.label = 3;
          case 3:
            errorCode = ((_b = _a) !== null && _b !== void 0 ? _b : {}).name;
            statusCode = response === null || response === void 0 ? void 0 : response.statusCode;
            return [2, isConnectionError(error) || isThrottlingError2(statusCode, errorCode) || isClockSkewError2(errorCode) || isServerSideError(statusCode, errorCode)];
        }
      });
    });
  };
};
var THROTTLING_ERROR_CODES2 = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException"
];
var TIMEOUT_ERROR_CODES = [
  "TimeoutError",
  "RequestTimeout",
  "RequestTimeoutException"
];
var isThrottlingError2 = function(statusCode, errorCode) {
  return statusCode === 429 || THROTTLING_ERROR_CODES2.includes(errorCode);
};
var isConnectionError = function(error) {
  return (error === null || error === void 0 ? void 0 : error.name) === "Network error";
};
var isServerSideError = function(statusCode, errorCode) {
  return [500, 502, 503, 504].includes(statusCode) || TIMEOUT_ERROR_CODES.includes(errorCode);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/userAgent/middleware.js
var __awaiter11 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator11 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var userAgentMiddleware4 = function(_a) {
  var _b = _a.userAgentHeader, userAgentHeader = _b === void 0 ? "x-amz-user-agent" : _b, _c = _a.userAgentValue, userAgentValue = _c === void 0 ? "" : _c;
  return function(next) {
    return function userAgentMiddleware5(request) {
      return __awaiter11(this, void 0, void 0, function() {
        var result, headerName, response;
        return __generator11(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!(userAgentValue.trim().length === 0))
                return [3, 2];
              return [4, next(request)];
            case 1:
              result = _a2.sent();
              return [2, result];
            case 2:
              headerName = userAgentHeader.toLowerCase();
              request.headers[headerName] = request.headers[headerName] ? "".concat(request.headers[headerName], " ").concat(userAgentValue) : userAgentValue;
              return [4, next(request)];
            case 3:
              response = _a2.sent();
              return [2, response];
          }
        });
      });
    };
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/internal/composeTransferHandler.js
var composeTransferHandler = function(coreHandler, middleware) {
  return function(request, options) {
    var context = {};
    var composedHandler = function(request2) {
      return coreHandler(request2, options);
    };
    for (var i3 = middleware.length - 1; i3 >= 0; i3--) {
      var m3 = middleware[i3];
      var resolvedMiddleware = m3(options);
      composedHandler = resolvedMiddleware(composedHandler, context);
    }
    return composedHandler(request);
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/handlers/unauthenticated.js
var unauthenticatedHandler = composeTransferHandler(fetchTransferHandler, [userAgentMiddleware4, retryMiddleware2]);

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate5 = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/utils/isClockSkewed.js
var SKEW_WINDOW = 5 * 60 * 1e3;
var isClockSkewed5 = function(clockTimeInMilliseconds, clockOffsetInMilliseconds) {
  return Math.abs(getSkewCorrectedDate5(clockOffsetInMilliseconds).getTime() - clockTimeInMilliseconds) >= SKEW_WINDOW;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset4 = function(clockTimeInMilliseconds, currentSystemClockOffset) {
  if (isClockSkewed5(clockTimeInMilliseconds, currentSystemClockOffset)) {
    return clockTimeInMilliseconds - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/middleware.js
var __awaiter12 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator12 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var signingMiddleware = function(_a) {
  var credentials = _a.credentials, region = _a.region, service = _a.service;
  var currentSystemClockOffset;
  return function(next) {
    return function signingMiddleware2(request) {
      return __awaiter12(this, void 0, void 0, function() {
        var signRequestOptions, signedRequest, response, dateString;
        return __generator12(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              currentSystemClockOffset = currentSystemClockOffset !== null && currentSystemClockOffset !== void 0 ? currentSystemClockOffset : 0;
              signRequestOptions = {
                credentials,
                signingDate: getSkewCorrectedDate5(currentSystemClockOffset),
                signingRegion: region,
                signingService: service
              };
              return [4, signRequest(request, signRequestOptions)];
            case 1:
              signedRequest = _a2.sent();
              return [4, next(signedRequest)];
            case 2:
              response = _a2.sent();
              dateString = getDateHeader3(response);
              if (dateString) {
                currentSystemClockOffset = getUpdatedSystemClockOffset4(Date.parse(dateString), currentSystemClockOffset);
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var getDateHeader3 = function(_a) {
  var _b, _c;
  var _d = _a === void 0 ? {} : _a, headers = _d.headers;
  return (_c = (_b = headers === null || headers === void 0 ? void 0 : headers.date) !== null && _b !== void 0 ? _b : headers === null || headers === void 0 ? void 0 : headers.Date) !== null && _c !== void 0 ? _c : headers === null || headers === void 0 ? void 0 : headers["x-amz-date"];
};

// node_modules/@aws-amplify/core/lib-esm/clients/handlers/authenticated.js
var authenticatedHandler = composeTransferHandler(fetchTransferHandler, [
  userAgentMiddleware4,
  retryMiddleware2,
  signingMiddleware
]);

// node_modules/@aws-amplify/core/lib-esm/clients/internal/composeServiceApi.js
var __assign10 = function() {
  __assign10 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign10.apply(this, arguments);
};
var __awaiter13 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator13 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var composeServiceApi = function(transferHandler, serializer, deserializer, defaultConfig2) {
  return function(config, input) {
    return __awaiter13(void 0, void 0, void 0, function() {
      var resolvedConfig, endpoint, request, response;
      return __generator13(this, function(_a) {
        switch (_a.label) {
          case 0:
            resolvedConfig = __assign10(__assign10({}, defaultConfig2), config);
            return [4, resolvedConfig.endpointResolver({
              region: resolvedConfig.region
            })];
          case 1:
            endpoint = _a.sent();
            request = serializer(input, endpoint);
            return [4, transferHandler(request, __assign10({}, resolvedConfig))];
          case 2:
            response = _a.sent();
            return [4, deserializer(response)];
          case 3:
            return [2, _a.sent()];
        }
      });
    });
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/serde/responseInfo.js
var __assign11 = function() {
  __assign11 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign11.apply(this, arguments);
};
var parseMetadata = function(response) {
  var _a, _b;
  var headers = response.headers, statusCode = response.statusCode;
  return __assign11(__assign11({}, isMetadataBearer(response) ? response.$metadata : {}), { httpStatusCode: statusCode, requestId: (_b = (_a = headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : headers["x-amz-request-id"], extendedRequestId: headers["x-amz-id-2"], cfId: headers["x-amz-cf-id"] });
};

// node_modules/@aws-amplify/core/lib-esm/clients/serde/json.js
var __awaiter14 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator14 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read13 = function(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3)
    return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done)
      ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"]))
        m3.call(i3);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar;
};
var parseJsonError = function(response) {
  return __awaiter14(void 0, void 0, void 0, function() {
    var body, sanitizeErrorCode, code, message, error;
    var _a, _b, _c, _d, _e;
    return __generator14(this, function(_f) {
      switch (_f.label) {
        case 0:
          if (!response || response.statusCode < 300) {
            return [2];
          }
          return [4, parseJsonBody(response)];
        case 1:
          body = _f.sent();
          sanitizeErrorCode = function(rawValue) {
            var _a2 = __read13(rawValue.toString().split(/[\,\:]+/), 1), cleanValue = _a2[0];
            if (cleanValue.includes("#")) {
              return cleanValue.split("#")[1];
            }
            return cleanValue;
          };
          code = sanitizeErrorCode((_c = (_b = (_a = response.headers["x-amzn-errortype"]) !== null && _a !== void 0 ? _a : body.code) !== null && _b !== void 0 ? _b : body.__type) !== null && _c !== void 0 ? _c : "UnknownError");
          message = (_e = (_d = body.message) !== null && _d !== void 0 ? _d : body.Message) !== null && _e !== void 0 ? _e : "Unknown error";
          error = new Error(message);
          return [2, Object.assign(error, {
            name: code,
            $metadata: parseMetadata(response)
          })];
      }
    });
  });
};
var parseJsonBody = function(response) {
  return __awaiter14(void 0, void 0, void 0, function() {
    var output;
    return __generator14(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!response.body) {
            throw new Error("Missing response payload");
          }
          return [4, response.body.json()];
        case 1:
          output = _a.sent();
          return [2, Object.assign(output, {
            $metadata: parseMetadata(response)
          })];
      }
    });
  });
};

// node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/base.js
var __awaiter15 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator15 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var SERVICE_NAME = "cognito-identity";
var endpointResolver = function(_a) {
  var region = _a.region;
  return {
    url: new URL("https://cognito-identity.".concat(region, ".").concat(getDnsSuffix(region)))
  };
};
var disableCacheMiddleware = function() {
  return function(next, context) {
    return function disableCacheMiddleware2(request) {
      return __awaiter15(this, void 0, void 0, function() {
        return __generator15(this, function(_a) {
          request.headers["cache-control"] = "no-store";
          return [2, next(request)];
        });
      });
    };
  };
};
var cognitoIdentityTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddleware]);
var defaultConfig = {
  service: SERVICE_NAME,
  endpointResolver,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  userAgentValue: getAmplifyUserAgent()
};
observeFrameworkChanges(function() {
  defaultConfig.userAgentValue = getAmplifyUserAgent();
});
var getSharedHeaders = function(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "AWSCognitoIdentityService.".concat(operation)
  };
};
var buildHttpRpcRequest4 = function(_a, headers, body) {
  var url = _a.url;
  return {
    headers,
    url,
    body,
    method: "POST"
  };
};

// node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/getId.js
var __awaiter16 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator16 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getIdSerializer = function(input, endpoint) {
  var headers = getSharedHeaders("GetId");
  var body = JSON.stringify(input);
  return buildHttpRpcRequest4(endpoint, headers, body);
};
var getIdDeserializer = function(response) {
  return __awaiter16(void 0, void 0, void 0, function() {
    var error, body;
    return __generator16(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!(response.statusCode >= 300))
            return [3, 2];
          return [4, parseJsonError(response)];
        case 1:
          error = _a.sent();
          throw error;
        case 2:
          return [4, parseJsonBody(response)];
        case 3:
          body = _a.sent();
          return [2, {
            IdentityId: body.IdentityId,
            $metadata: parseMetadata(response)
          }];
      }
    });
  });
};
var getId = composeServiceApi(cognitoIdentityTransferHandler, getIdSerializer, getIdDeserializer, defaultConfig);

// node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/getCredentialsForIdentity.js
var __awaiter17 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator17 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getCredentialsForIdentitySerializer = function(input, endpoint) {
  var headers = getSharedHeaders("GetCredentialsForIdentity");
  var body = JSON.stringify(input);
  return buildHttpRpcRequest4(endpoint, headers, body);
};
var getCredentialsForIdentityDeserializer = function(response) {
  return __awaiter17(void 0, void 0, void 0, function() {
    var error, body;
    return __generator17(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!(response.statusCode >= 300))
            return [3, 2];
          return [4, parseJsonError(response)];
        case 1:
          error = _a.sent();
          throw error;
        case 2:
          return [4, parseJsonBody(response)];
        case 3:
          body = _a.sent();
          return [2, {
            IdentityId: body.IdentityId,
            Credentials: deserializeCredentials(body.Credentials),
            $metadata: parseMetadata(response)
          }];
      }
    });
  });
};
var deserializeCredentials = function(output) {
  if (output === void 0) {
    output = {};
  }
  return {
    AccessKeyId: output["AccessKeyId"],
    SecretKey: output["SecretKey"],
    SessionToken: output["SessionToken"],
    Expiration: new Date(output["Expiration"] * 1e3)
  };
};
var getCredentialsForIdentity = composeServiceApi(cognitoIdentityTransferHandler, getCredentialsForIdentitySerializer, getCredentialsForIdentityDeserializer, defaultConfig);

// node_modules/@aws-amplify/core/lib-esm/Credentials.js
var __assign12 = function() {
  __assign12 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign12.apply(this, arguments);
};
var __awaiter18 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator18 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f3, y2, t2, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_ = 0)), _)
      try {
        if (f3 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e3) {
        op = [6, e3];
        y2 = 0;
      } finally {
        f3 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger11 = new ConsoleLogger("Credentials");
var CREDENTIALS_TTL = 50 * 60 * 1e3;
var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
var AMPLIFY_SYMBOL2 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchCredentialsEvent = function(event, data, message) {
  Hub.dispatch("core", { event, data, message }, "Credentials", AMPLIFY_SYMBOL2);
};
var CredentialsClass = function() {
  function CredentialsClass2(config) {
    this._gettingCredPromise = null;
    this._refreshHandlers = {};
    this.Auth = void 0;
    this.configure(config);
    this._refreshHandlers["google"] = GoogleOAuth2.refreshGoogleToken;
    this._refreshHandlers["facebook"] = FacebookOAuth2.refreshFacebookToken;
  }
  CredentialsClass2.prototype.getModuleName = function() {
    return "Credentials";
  };
  CredentialsClass2.prototype.getCredSource = function() {
    return this._credentials_source;
  };
  CredentialsClass2.prototype.configure = function(config) {
    if (!config)
      return this._config || {};
    this._config = Object.assign({}, this._config, config);
    var refreshHandlers = this._config.refreshHandlers;
    if (refreshHandlers) {
      this._refreshHandlers = __assign12(__assign12({}, this._refreshHandlers), refreshHandlers);
    }
    this._storage = this._config.storage;
    if (!this._storage) {
      this._storage = new StorageHelper().getStorage();
    }
    this._storageSync = Promise.resolve();
    if (typeof this._storage["sync"] === "function") {
      this._storageSync = this._storage["sync"]();
    }
    dispatchCredentialsEvent("credentials_configured", null, "Credentials has been configured successfully");
    return this._config;
  };
  CredentialsClass2.prototype.get = function() {
    logger11.debug("getting credentials");
    return this._pickupCredentials();
  };
  CredentialsClass2.prototype._getCognitoIdentityIdStorageKey = function(identityPoolId) {
    return "".concat(COGNITO_IDENTITY_KEY_PREFIX).concat(identityPoolId);
  };
  CredentialsClass2.prototype._pickupCredentials = function() {
    logger11.debug("picking up credentials");
    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
      logger11.debug("getting new cred promise");
      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());
    } else {
      logger11.debug("getting old cred promise");
    }
    return this._gettingCredPromise;
  };
  CredentialsClass2.prototype._keepAlive = function() {
    return __awaiter18(this, void 0, void 0, function() {
      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;
      return __generator18(this, function(_b) {
        switch (_b.label) {
          case 0:
            logger11.debug("checking if credentials exists and not expired");
            cred = this._credentials;
            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
              logger11.debug("credentials not changed and not expired, directly return");
              return [2, Promise.resolve(cred)];
            }
            logger11.debug("need to get a new credential or refresh the existing one");
            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;
            if (!Auth || typeof Auth.currentUserCredentials !== "function") {
              return [2, this._setCredentialsForGuest()];
            }
            if (!(!this._isExpired(cred) && this._isPastTTL()))
              return [3, 6];
            logger11.debug("ttl has passed but token is not yet expired");
            _b.label = 1;
          case 1:
            _b.trys.push([1, 5, , 6]);
            return [4, Auth.currentUserPoolUser()];
          case 2:
            user_1 = _b.sent();
            return [4, Auth.currentSession()];
          case 3:
            session = _b.sent();
            refreshToken_1 = session.refreshToken;
            refreshRequest = new Promise(function(res, rej) {
              user_1.refreshSession(refreshToken_1, function(err, data) {
                return err ? rej(err) : res(data);
              });
            });
            return [4, refreshRequest];
          case 4:
            _b.sent();
            return [3, 6];
          case 5:
            err_1 = _b.sent();
            logger11.debug("Error attempting to refreshing the session", err_1);
            return [3, 6];
          case 6:
            return [2, Auth.currentUserCredentials()];
        }
      });
    });
  };
  CredentialsClass2.prototype.refreshFederatedToken = function(federatedInfo) {
    logger11.debug("Getting federated credentials");
    var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
    var expires_at = federatedInfo.expires_at;
    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1e3 : expires_at;
    var that = this;
    logger11.debug("checking if federated jwt token expired");
    if (expires_at > new Date().getTime()) {
      logger11.debug("token not expired");
      return this._setCredentialsFromFederation({
        provider,
        token,
        user,
        identity_id,
        expires_at
      });
    } else {
      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === "function") {
        logger11.debug("getting refreshed jwt token from federation provider");
        return this._providerRefreshWithRetry({
          refreshHandler: that._refreshHandlers[provider],
          provider,
          user
        });
      } else {
        logger11.debug("no refresh handler for provider:", provider);
        this.clear();
        return Promise.reject("no refresh handler for provider");
      }
    }
  };
  CredentialsClass2.prototype._providerRefreshWithRetry = function(_a) {
    var _this = this;
    var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
    var MAX_DELAY_MS2 = 10 * 1e3;
    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS2).then(function(data) {
      logger11.debug("refresh federated token sucessfully", data);
      return _this._setCredentialsFromFederation({
        provider,
        token: data.token,
        user,
        identity_id: data.identity_id,
        expires_at: data.expires_at
      });
    }).catch(function(e3) {
      var isNetworkError = typeof e3 === "string" && e3.toLowerCase().lastIndexOf("network error", e3.length) === 0;
      if (!isNetworkError) {
        _this.clear();
      }
      logger11.debug("refresh federated token failed", e3);
      return Promise.reject("refreshing federation token failed: " + e3);
    });
  };
  CredentialsClass2.prototype._isExpired = function(credentials) {
    if (!credentials) {
      logger11.debug("no credentials for expiration check");
      return true;
    }
    logger11.debug("are these credentials expired?", credentials);
    var ts = Date.now();
    var expiration = credentials.expiration;
    return expiration.getTime() <= ts;
  };
  CredentialsClass2.prototype._isPastTTL = function() {
    return this._nextCredentialsRefresh <= Date.now();
  };
  CredentialsClass2.prototype._setCredentialsForGuest = function() {
    var _a;
    return __awaiter18(this, void 0, void 0, function() {
      var _b, identityPoolId, region, mandatorySignIn, identityPoolRegion, identityId, _c, cognitoConfig, guestCredentialsProvider, credentials;
      var _this = this;
      return __generator18(this, function(_d) {
        switch (_d.label) {
          case 0:
            logger11.debug("setting credentials for guest");
            if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) {
              this._config = Object.assign({}, this._config, parseAWSExports(this._config || {}).Auth);
            }
            _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn, identityPoolRegion = _b.identityPoolRegion;
            if (mandatorySignIn) {
              return [2, Promise.reject("cannot get guest credentials when mandatory signin enabled")];
            }
            if (!identityPoolId) {
              logger11.debug("No Cognito Identity pool provided for unauthenticated access");
              return [2, Promise.reject("No Cognito Identity pool provided for unauthenticated access")];
            }
            if (!identityPoolRegion && !region) {
              logger11.debug("region is not configured for getting the credentials");
              return [2, Promise.reject("region is not configured for getting the credentials")];
            }
            _c = this;
            return [4, this._getGuestIdentityId()];
          case 1:
            identityId = _c._identityId = _d.sent();
            cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
            guestCredentialsProvider = function() {
              return __awaiter18(_this, void 0, void 0, function() {
                var IdentityId, Credentials2;
                return __generator18(this, function(_a2) {
                  switch (_a2.label) {
                    case 0:
                      if (!!identityId)
                        return [3, 2];
                      return [4, getId(cognitoConfig, {
                        IdentityPoolId: identityPoolId
                      })];
                    case 1:
                      IdentityId = _a2.sent().IdentityId;
                      this._identityId = IdentityId;
                      _a2.label = 2;
                    case 2:
                      return [4, getCredentialsForIdentity(cognitoConfig, {
                        IdentityId: this._identityId
                      })];
                    case 3:
                      Credentials2 = _a2.sent().Credentials;
                      return [2, {
                        identityId: this._identityId,
                        accessKeyId: Credentials2.AccessKeyId,
                        secretAccessKey: Credentials2.SecretKey,
                        sessionToken: Credentials2.SessionToken,
                        expiration: Credentials2.Expiration
                      }];
                  }
                });
              });
            };
            credentials = guestCredentialsProvider().catch(function(err) {
              return __awaiter18(_this, void 0, void 0, function() {
                return __generator18(this, function(_a2) {
                  throw err;
                });
              });
            });
            return [2, this._loadCredentials(credentials, "guest", false, null).then(function(res) {
              return res;
            }).catch(function(e3) {
              return __awaiter18(_this, void 0, void 0, function() {
                var guestCredentialsProvider_1;
                var _this2 = this;
                return __generator18(this, function(_a2) {
                  switch (_a2.label) {
                    case 0:
                      if (!(e3.name === "ResourceNotFoundException" && e3.message === "Identity '".concat(identityId, "' not found.")))
                        return [3, 2];
                      logger11.debug("Failed to load guest credentials");
                      return [4, this._removeGuestIdentityId()];
                    case 1:
                      _a2.sent();
                      guestCredentialsProvider_1 = function() {
                        return __awaiter18(_this2, void 0, void 0, function() {
                          var IdentityId, Credentials2;
                          return __generator18(this, function(_a3) {
                            switch (_a3.label) {
                              case 0:
                                return [4, getId(cognitoConfig, {
                                  IdentityPoolId: identityPoolId
                                })];
                              case 1:
                                IdentityId = _a3.sent().IdentityId;
                                this._identityId = IdentityId;
                                return [4, getCredentialsForIdentity(cognitoConfig, {
                                  IdentityId
                                })];
                              case 2:
                                Credentials2 = _a3.sent().Credentials;
                                return [2, {
                                  identityId: IdentityId,
                                  accessKeyId: Credentials2.AccessKeyId,
                                  secretAccessKey: Credentials2.SecretKey,
                                  sessionToken: Credentials2.SessionToken,
                                  expiration: Credentials2.Expiration
                                }];
                            }
                          });
                        });
                      };
                      credentials = guestCredentialsProvider_1().catch(function(err) {
                        return __awaiter18(_this2, void 0, void 0, function() {
                          return __generator18(this, function(_a3) {
                            throw err;
                          });
                        });
                      });
                      return [2, this._loadCredentials(credentials, "guest", false, null)];
                    case 2:
                      return [2, e3];
                  }
                });
              });
            })];
        }
      });
    });
  };
  CredentialsClass2.prototype._setCredentialsFromFederation = function(params) {
    var _this = this;
    var provider = params.provider, token = params.token;
    var identity_id = params.identity_id;
    var domains = {
      google: "accounts.google.com",
      facebook: "graph.facebook.com",
      amazon: "www.amazon.com",
      developer: "cognito-identity.amazonaws.com"
    };
    var domain = domains[provider] || provider;
    if (!domain) {
      return Promise.reject("You must specify a federated provider");
    }
    var logins = {};
    logins[domain] = token;
    var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, identityPoolRegion = _a.identityPoolRegion;
    if (!identityPoolId) {
      logger11.debug("No Cognito Federated Identity pool provided");
      return Promise.reject("No Cognito Federated Identity pool provided");
    }
    if (!identityPoolRegion && !region) {
      logger11.debug("region is not configured for getting the credentials");
      return Promise.reject("region is not configured for getting the credentials");
    }
    var cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
    var authenticatedCredentialsProvider = function() {
      return __awaiter18(_this, void 0, void 0, function() {
        var IdentityId, Credentials2;
        return __generator18(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!!identity_id)
                return [3, 2];
              return [4, getId(cognitoConfig, {
                IdentityPoolId: identityPoolId,
                Logins: logins
              })];
            case 1:
              IdentityId = _a2.sent().IdentityId;
              identity_id = IdentityId;
              _a2.label = 2;
            case 2:
              return [4, getCredentialsForIdentity(cognitoConfig, {
                IdentityId: identity_id,
                Logins: logins
              })];
            case 3:
              Credentials2 = _a2.sent().Credentials;
              return [2, {
                identityId: identity_id,
                accessKeyId: Credentials2.AccessKeyId,
                secretAccessKey: Credentials2.SecretKey,
                sessionToken: Credentials2.SessionToken,
                expiration: Credentials2.Expiration
              }];
          }
        });
      });
    };
    var credentials = authenticatedCredentialsProvider().catch(function(err) {
      return __awaiter18(_this, void 0, void 0, function() {
        return __generator18(this, function(_a2) {
          throw err;
        });
      });
    });
    return this._loadCredentials(credentials, "federated", true, params);
  };
  CredentialsClass2.prototype._setCredentialsFromSession = function(session) {
    var _this = this;
    logger11.debug("set credentials from session");
    var idToken = session.getIdToken().getJwtToken();
    var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId, identityPoolRegion = _a.identityPoolRegion;
    if (!identityPoolId) {
      logger11.debug("No Cognito Federated Identity pool provided");
      return Promise.reject("No Cognito Federated Identity pool provided");
    }
    if (!identityPoolRegion && !region) {
      logger11.debug("region is not configured for getting the credentials");
      return Promise.reject("region is not configured for getting the credentials");
    }
    var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
    var logins = {};
    logins[key] = idToken;
    var cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
    var credentialsProvider = function() {
      return __awaiter18(_this, void 0, void 0, function() {
        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a2, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
        return __generator18(this, function(_c) {
          switch (_c.label) {
            case 0:
              return [4, this._getGuestIdentityId()];
            case 1:
              guestIdentityId = _c.sent();
              if (!!guestIdentityId)
                return [3, 3];
              return [4, getId(cognitoConfig, {
                IdentityPoolId: identityPoolId,
                Logins: logins
              })];
            case 2:
              IdentityId = _c.sent().IdentityId;
              generatedOrRetrievedIdentityId = IdentityId;
              _c.label = 3;
            case 3:
              return [4, getCredentialsForIdentity(cognitoConfig, {
                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                Logins: logins
              })];
            case 4:
              _a2 = _c.sent(), _b = _a2.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a2.IdentityId;
              this._identityId = primaryIdentityId;
              if (!guestIdentityId)
                return [3, 6];
              logger11.debug("The guest identity ".concat(guestIdentityId, " has been successfully linked to the logins"));
              if (guestIdentityId === primaryIdentityId) {
                logger11.debug("The guest identity ".concat(guestIdentityId, " has become the primary identity"));
              }
              return [4, this._removeGuestIdentityId()];
            case 5:
              _c.sent();
              _c.label = 6;
            case 6:
              return [2, {
                accessKeyId: AccessKeyId,
                secretAccessKey: SecretKey,
                sessionToken: SessionToken,
                expiration: Expiration,
                identityId: primaryIdentityId
              }];
          }
        });
      });
    };
    var credentials = credentialsProvider().catch(function(err) {
      return __awaiter18(_this, void 0, void 0, function() {
        return __generator18(this, function(_a2) {
          throw err;
        });
      });
    });
    return this._loadCredentials(credentials, "userPool", true, null);
  };
  CredentialsClass2.prototype._loadCredentials = function(credentials, source, authenticated, info) {
    var _this = this;
    var that = this;
    return new Promise(function(res, rej) {
      credentials.then(function(credentials2) {
        return __awaiter18(_this, void 0, void 0, function() {
          var user, provider, token, expires_at, identity_id;
          return __generator18(this, function(_a) {
            switch (_a.label) {
              case 0:
                logger11.debug("Load credentials successfully", credentials2);
                if (this._identityId && !credentials2.identityId) {
                  credentials2["identityId"] = this._identityId;
                }
                that._credentials = credentials2;
                that._credentials.authenticated = authenticated;
                that._credentials_source = source;
                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
                if (source === "federated") {
                  user = Object.assign({ id: this._credentials.identityId }, info.user);
                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                  try {
                    this._storage.setItem("aws-amplify-federatedInfo", JSON.stringify({
                      provider,
                      token,
                      user,
                      expires_at,
                      identity_id
                    }));
                  } catch (e3) {
                    logger11.debug("Failed to put federated info into auth storage", e3);
                  }
                }
                if (!(source === "guest"))
                  return [3, 2];
                return [4, this._setGuestIdentityId(credentials2.identityId)];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                res(that._credentials);
                return [2];
            }
          });
        });
      }).catch(function(err) {
        if (err) {
          logger11.debug("Failed to load credentials", credentials);
          logger11.debug("Error loading credentials", err);
          rej(err);
          return;
        }
      });
    });
  };
  CredentialsClass2.prototype.set = function(params, source) {
    if (source === "session") {
      return this._setCredentialsFromSession(params);
    } else if (source === "federation") {
      return this._setCredentialsFromFederation(params);
    } else if (source === "guest") {
      return this._setCredentialsForGuest();
    } else {
      logger11.debug("no source specified for setting credentials");
      return Promise.reject("invalid source");
    }
  };
  CredentialsClass2.prototype.clear = function() {
    return __awaiter18(this, void 0, void 0, function() {
      return __generator18(this, function(_a) {
        this._credentials = null;
        this._credentials_source = null;
        logger11.debug("removing aws-amplify-federatedInfo from storage");
        this._storage.removeItem("aws-amplify-federatedInfo");
        return [2];
      });
    });
  };
  CredentialsClass2.prototype._getGuestIdentityId = function() {
    return __awaiter18(this, void 0, void 0, function() {
      var identityPoolId, e_1;
      return __generator18(this, function(_a) {
        switch (_a.label) {
          case 0:
            identityPoolId = this._config.identityPoolId;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, this._storageSync];
          case 2:
            _a.sent();
            return [2, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];
          case 3:
            e_1 = _a.sent();
            logger11.debug("Failed to get the cached guest identityId", e_1);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  CredentialsClass2.prototype._setGuestIdentityId = function(identityId) {
    return __awaiter18(this, void 0, void 0, function() {
      var identityPoolId, e_2;
      return __generator18(this, function(_a) {
        switch (_a.label) {
          case 0:
            identityPoolId = this._config.identityPoolId;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, this._storageSync];
          case 2:
            _a.sent();
            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
            return [3, 4];
          case 3:
            e_2 = _a.sent();
            logger11.debug("Failed to cache guest identityId", e_2);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  CredentialsClass2.prototype._removeGuestIdentityId = function() {
    return __awaiter18(this, void 0, void 0, function() {
      var identityPoolId;
      return __generator18(this, function(_a) {
        identityPoolId = this._config.identityPoolId;
        logger11.debug("removing ".concat(this._getCognitoIdentityIdStorageKey(identityPoolId), " from storage"));
        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
        return [2];
      });
    });
  };
  CredentialsClass2.prototype.shear = function(credentials) {
    return {
      accessKeyId: credentials.accessKeyId,
      sessionToken: credentials.sessionToken,
      secretAccessKey: credentials.secretAccessKey,
      identityId: credentials.identityId,
      authenticated: credentials.authenticated
    };
  };
  return CredentialsClass2;
}();
var Credentials = new CredentialsClass(null);
Amplify.register(Credentials);

// node_modules/@aws-amplify/core/lib-esm/ServiceWorker/ServiceWorker.js
var ServiceWorkerClass = function() {
  function ServiceWorkerClass2() {
    this._logger = new ConsoleLogger("ServiceWorker");
  }
  Object.defineProperty(ServiceWorkerClass2.prototype, "serviceWorker", {
    get: function() {
      return this._serviceWorker;
    },
    enumerable: false,
    configurable: true
  });
  ServiceWorkerClass2.prototype.register = function(filePath, scope) {
    var _this = this;
    if (filePath === void 0) {
      filePath = "/service-worker.js";
    }
    if (scope === void 0) {
      scope = "/";
    }
    this._logger.debug("registering ".concat(filePath));
    this._logger.debug("registering service worker with scope ".concat(scope));
    return new Promise(function(resolve, reject) {
      if (navigator && "serviceWorker" in navigator) {
        navigator.serviceWorker.register(filePath, {
          scope
        }).then(function(registration) {
          if (registration.installing) {
            _this._serviceWorker = registration.installing;
          } else if (registration.waiting) {
            _this._serviceWorker = registration.waiting;
          } else if (registration.active) {
            _this._serviceWorker = registration.active;
          }
          _this._registration = registration;
          _this._setupListeners();
          _this._logger.debug("Service Worker Registration Success: ".concat(registration));
          return resolve(registration);
        }).catch(function(error) {
          _this._logger.debug("Service Worker Registration Failed ".concat(error));
          return reject(error);
        });
      } else {
        return reject(new Error("Service Worker not available"));
      }
    });
  };
  ServiceWorkerClass2.prototype.enablePush = function(publicKey) {
    var _this = this;
    if (!this._registration)
      throw new Error("Service Worker not registered");
    this._publicKey = publicKey;
    return new Promise(function(resolve, reject) {
      if (browserOrNode().isBrowser) {
        _this._registration.pushManager.getSubscription().then(function(subscription) {
          if (subscription) {
            _this._subscription = subscription;
            _this._logger.debug("User is subscribed to push: ".concat(JSON.stringify(subscription)));
            resolve(subscription);
          } else {
            _this._logger.debug("User is NOT subscribed to push");
            return _this._registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: _this._urlB64ToUint8Array(publicKey)
            }).then(function(subscription2) {
              _this._subscription = subscription2;
              _this._logger.debug("User subscribed: ".concat(JSON.stringify(subscription2)));
              resolve(subscription2);
            }).catch(function(error) {
              _this._logger.error(error);
            });
          }
        });
      } else {
        return reject(new Error("Service Worker not available"));
      }
    });
  };
  ServiceWorkerClass2.prototype._urlB64ToUint8Array = function(base64String) {
    var padding = "=".repeat((4 - base64String.length % 4) % 4);
    var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
    var rawData = window.atob(base64);
    var outputArray = new Uint8Array(rawData.length);
    for (var i3 = 0; i3 < rawData.length; ++i3) {
      outputArray[i3] = rawData.charCodeAt(i3);
    }
    return outputArray;
  };
  ServiceWorkerClass2.prototype.send = function(message) {
    if (this._serviceWorker) {
      this._serviceWorker.postMessage(typeof message === "object" ? JSON.stringify(message) : message);
    }
  };
  ServiceWorkerClass2.prototype._setupListeners = function() {
    var _this = this;
    this._serviceWorker.addEventListener("statechange", function(event) {
      var currentState = _this._serviceWorker.state;
      _this._logger.debug("ServiceWorker statechange: ".concat(currentState));
      if (Amplify.Analytics && typeof Amplify.Analytics.record === "function") {
        Amplify.Analytics.record({
          name: "ServiceWorker",
          attributes: {
            state: currentState
          }
        });
      }
    });
    this._serviceWorker.addEventListener("message", function(event) {
      _this._logger.debug("ServiceWorker message event: ".concat(event));
    });
  };
  return ServiceWorkerClass2;
}();

// node_modules/universal-cookie/es6/Cookies.js
var cookie2 = __toESM(require_cookie());

// node_modules/universal-cookie/es6/utils.js
var cookie = __toESM(require_cookie());
function hasDocumentCookie() {
  return typeof document === "object" && typeof document.cookie === "string";
}
function parseCookies(cookies, options) {
  if (typeof cookies === "string") {
    return cookie.parse(cookies, options);
  } else if (typeof cookies === "object" && cookies !== null) {
    return cookies;
  } else {
    return {};
  }
}
function isParsingCookie(value, doNotParse) {
  if (typeof doNotParse === "undefined") {
    doNotParse = !value || value[0] !== "{" && value[0] !== "[" && value[0] !== '"';
  }
  return !doNotParse;
}
function readCookie(value, options) {
  if (options === void 0) {
    options = {};
  }
  var cleanValue = cleanupCookieValue(value);
  if (isParsingCookie(cleanValue, options.doNotParse)) {
    try {
      return JSON.parse(cleanValue);
    } catch (e3) {
    }
  }
  return value;
}
function cleanupCookieValue(value) {
  if (value && value[0] === "j" && value[1] === ":") {
    return value.substr(2);
  }
  return value;
}

// node_modules/universal-cookie/es6/Cookies.js
var __assign13 = function() {
  __assign13 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign13.apply(this, arguments);
};
var Cookies = function() {
  function Cookies2(cookies, options) {
    var _this = this;
    this.changeListeners = [];
    this.HAS_DOCUMENT_COOKIE = false;
    this.cookies = parseCookies(cookies, options);
    new Promise(function() {
      _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
    }).catch(function() {
    });
  }
  Cookies2.prototype._updateBrowserValues = function(parseOptions) {
    if (!this.HAS_DOCUMENT_COOKIE) {
      return;
    }
    this.cookies = cookie2.parse(document.cookie, parseOptions);
  };
  Cookies2.prototype._emitChange = function(params) {
    for (var i3 = 0; i3 < this.changeListeners.length; ++i3) {
      this.changeListeners[i3](params);
    }
  };
  Cookies2.prototype.get = function(name, options, parseOptions) {
    if (options === void 0) {
      options = {};
    }
    this._updateBrowserValues(parseOptions);
    return readCookie(this.cookies[name], options);
  };
  Cookies2.prototype.getAll = function(options, parseOptions) {
    if (options === void 0) {
      options = {};
    }
    this._updateBrowserValues(parseOptions);
    var result = {};
    for (var name_1 in this.cookies) {
      result[name_1] = readCookie(this.cookies[name_1], options);
    }
    return result;
  };
  Cookies2.prototype.set = function(name, value, options) {
    var _a;
    if (typeof value === "object") {
      value = JSON.stringify(value);
    }
    this.cookies = __assign13(__assign13({}, this.cookies), (_a = {}, _a[name] = value, _a));
    if (this.HAS_DOCUMENT_COOKIE) {
      document.cookie = cookie2.serialize(name, value, options);
    }
    this._emitChange({ name, value, options });
  };
  Cookies2.prototype.remove = function(name, options) {
    var finalOptions = options = __assign13(__assign13({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 });
    this.cookies = __assign13({}, this.cookies);
    delete this.cookies[name];
    if (this.HAS_DOCUMENT_COOKIE) {
      document.cookie = cookie2.serialize(name, "", finalOptions);
    }
    this._emitChange({ name, value: void 0, options });
  };
  Cookies2.prototype.addChangeListener = function(callback) {
    this.changeListeners.push(callback);
  };
  Cookies2.prototype.removeChangeListener = function(callback) {
    var idx = this.changeListeners.indexOf(callback);
    if (idx >= 0) {
      this.changeListeners.splice(idx, 1);
    }
  };
  return Cookies2;
}();
var Cookies_default = Cookies;

// node_modules/universal-cookie/es6/index.js
var es6_default = Cookies_default;

// node_modules/@aws-amplify/core/lib-esm/UniversalStorage/index.js
var __assign14 = function() {
  __assign14 = Object.assign || function(t2) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p3))
          t2[p3] = s3[p3];
    }
    return t2;
  };
  return __assign14.apply(this, arguments);
};
var isBrowser = browserOrNode().isBrowser;
var ONE_YEAR_IN_MS = 365 * 24 * 60 * 60 * 1e3;
var UniversalStorage = function() {
  function UniversalStorage2(context) {
    if (context === void 0) {
      context = {};
    }
    this.cookies = new es6_default();
    this.store = isBrowser ? window.localStorage : /* @__PURE__ */ Object.create(null);
    this.cookies = context.req ? new es6_default(context.req.headers.cookie) : new es6_default();
    Object.assign(this.store, this.cookies.getAll());
  }
  Object.defineProperty(UniversalStorage2.prototype, "length", {
    get: function() {
      return Object.entries(this.store).length;
    },
    enumerable: false,
    configurable: true
  });
  UniversalStorage2.prototype.clear = function() {
    var _this = this;
    Array.from(new Array(this.length)).map(function(_, i3) {
      return _this.key(i3);
    }).forEach(function(key) {
      return _this.removeItem(key);
    });
  };
  UniversalStorage2.prototype.getItem = function(key) {
    return this.getLocalItem(key);
  };
  UniversalStorage2.prototype.getLocalItem = function(key) {
    return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
  };
  UniversalStorage2.prototype.getUniversalItem = function(key) {
    return this.cookies.get(key);
  };
  UniversalStorage2.prototype.key = function(index) {
    return Object.keys(this.store)[index];
  };
  UniversalStorage2.prototype.removeItem = function(key) {
    this.removeLocalItem(key);
    this.removeUniversalItem(key);
  };
  UniversalStorage2.prototype.removeLocalItem = function(key) {
    delete this.store[key];
  };
  UniversalStorage2.prototype.removeUniversalItem = function(key) {
    this.cookies.remove(key, {
      path: "/"
    });
  };
  UniversalStorage2.prototype.setItem = function(key, value) {
    this.setLocalItem(key, value);
    var tokenType = key.split(".").pop();
    var sessionTokenTypes = [
      "LastAuthUser",
      "accessToken",
      "refreshToken",
      "idToken"
    ];
    if (sessionTokenTypes.includes(tokenType !== null && tokenType !== void 0 ? tokenType : "")) {
      this.setUniversalItem(key, value, {
        expires: new Date(Date.now() + ONE_YEAR_IN_MS)
      });
    }
  };
  UniversalStorage2.prototype.setLocalItem = function(key, value) {
    this.store[key] = value;
  };
  UniversalStorage2.prototype.setUniversalItem = function(key, value, options) {
    if (options === void 0) {
      options = {};
    }
    this.cookies.set(key, value, __assign14(__assign14({}, options), {
      path: "/",
      sameSite: true,
      secure: isBrowser && window.location.hostname === "localhost" ? false : true
    }));
  };
  return UniversalStorage2;
}();

// node_modules/@aws-amplify/core/lib-esm/constants.js
var hasSymbol = typeof Symbol !== "undefined" && typeof Symbol.for === "function";
var INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER = hasSymbol ? Symbol.for("INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER") : "@@INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER";

// node_modules/@aws-amplify/core/lib-esm/index.js
var Constants = {
  userAgent: Platform.userAgent
};

// node_modules/@aws/amazon-location-utilities-auth-helper/dist/esm/cognito/index.js
async function withIdentityPoolId(identityPoolId) {
  const region = identityPoolId.split(":")[0];
  const credentialsProvider = fromCognitoIdentityPool2({
    identityPoolId,
    clientConfig: {
      region
    }
  });
  let credentials;
  async function refreshCredentials() {
    credentials = await credentialsProvider();
    let timeToRefresh = 36e5;
    if (credentials.expiration) {
      timeToRefresh = credentials.expiration.getTime() - new Date().getTime();
    }
    setTimeout(refreshCredentials, timeToRefresh - 6e4);
  }
  await refreshCredentials();
  return {
    getMapAuthenticationOptions: () => ({
      transformRequest: (url) => {
        if (url.includes("amazonaws.com")) {
          return {
            url: Signer.signUrl(url, {
              access_key: credentials.accessKeyId,
              secret_key: credentials.secretAccessKey,
              session_token: credentials.sessionToken
            })
          };
        }
        return { url };
      }
    }),
    getLocationClientConfig: () => ({
      credentials: credentialsProvider
    }),
    getCredentials: () => credentials
  };
}

// node_modules/@aws/amazon-location-utilities-auth-helper/dist/esm/apikey/index.js
async function withAPIKey(apiKey) {
  return {
    getLocationClientConfig: () => ({
      signer: {
        sign: async (requestToSign) => {
          var _a;
          requestToSign.query = Object.assign({ key: apiKey }, (_a = requestToSign.query) !== null && _a !== void 0 ? _a : {});
          return requestToSign;
        }
      }
    })
  };
}
export {
  withAPIKey,
  withIdentityPoolId
};
/*!
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=@aws_amazon-location-utilities-auth-helper.js.map
