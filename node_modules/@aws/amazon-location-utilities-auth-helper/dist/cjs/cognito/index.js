"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.withIdentityPoolId = void 0;
const credential_providers_1 = require("@aws-sdk/credential-providers");
const core_1 = require("@aws-amplify/core");
/**
 * Creates an auth helper instance using credentials from Cognito.
 *
 * @param identityPoolId Cognito Identity Pool Id
 */
async function withIdentityPoolId(identityPoolId) {
    const region = identityPoolId.split(":")[0];
    const credentialsProvider = (0, credential_providers_1.fromCognitoIdentityPool)({
        identityPoolId,
        clientConfig: {
            region,
        },
    });
    let credentials;
    async function refreshCredentials() {
        credentials = await credentialsProvider();
        let timeToRefresh = 3600000; // default to 1 hour if credentials does not have expiration field
        if (credentials.expiration) {
            timeToRefresh = credentials.expiration.getTime() - new Date().getTime();
        }
        // timeToRefresh minus 1 minute to give some time for the actual refresh to happen.
        setTimeout(refreshCredentials, timeToRefresh - 60000);
    }
    await refreshCredentials();
    return {
        getMapAuthenticationOptions: () => ({
            transformRequest: (url) => {
                // Only sign aws URLs
                if (url.includes("amazonaws.com")) {
                    return {
                        url: core_1.Signer.signUrl(url, {
                            access_key: credentials.accessKeyId,
                            secret_key: credentials.secretAccessKey,
                            session_token: credentials.sessionToken,
                        }),
                    };
                }
                return { url };
            },
        }),
        getLocationClientConfig: () => ({
            credentials: credentialsProvider,
        }),
        getCredentials: () => credentials,
    };
}
exports.withIdentityPoolId = withIdentityPoolId;
